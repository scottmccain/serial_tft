
SerialGraphicLCDTouchScreen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000034a6  0000353a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  00800134  00800134  0000356e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000356e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003deb  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bc  00000000  00000000  0000757f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002948  00000000  00000000  00007f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  0000a884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b1  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b9  00000000  00000000  0000b719  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 02 	jmp	0x492	; 0x492 <__ctors_end>
       4:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
       8:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
       c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      10:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      14:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      18:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      1c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      20:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      24:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      28:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      2c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      30:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      34:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      38:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      3c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      40:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      44:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      48:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__vector_18>
      4c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      50:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      54:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      58:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      5c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      60:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      64:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
      68:	4f 0f       	add	r20, r31
      6a:	14 0f       	add	r17, r20
      6c:	52 0f       	add	r21, r18
      6e:	6e 0f       	add	r22, r30
      70:	14 0f       	add	r17, r20
      72:	14 0f       	add	r17, r20
      74:	14 0f       	add	r17, r20
      76:	14 0f       	add	r17, r20
      78:	14 0f       	add	r17, r20
      7a:	14 0f       	add	r17, r20
      7c:	14 0f       	add	r17, r20
      7e:	8a 0f       	add	r24, r26
      80:	14 0f       	add	r17, r20
      82:	14 0f       	add	r17, r20
      84:	aa 0f       	add	r26, r26
      86:	ca 0f       	add	r28, r26
      88:	14 0f       	add	r17, r20
      8a:	e1 0f       	add	r30, r17
      8c:	14 0f       	add	r17, r20
      8e:	01 10       	cpse	r0, r1

00000090 <__trampolines_end>:
	...
      98:	00 00       	nop
      9a:	5f 00       	.word	0x005f	; ????
      9c:	00 00       	nop
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	07 00       	.word	0x0007	; ????
      a4:	07 00       	.word	0x0007	; ????
      a6:	00 00       	nop
      a8:	00 14       	cp	r0, r0
      aa:	7f 14       	cp	r7, r15
      ac:	7f 14       	cp	r7, r15
      ae:	00 00       	nop
      b0:	00 24       	eor	r0, r0
      b2:	2a 7f       	andi	r18, 0xFA	; 250
      b4:	2a 12       	cpse	r2, r26
      b6:	00 00       	nop
      b8:	00 23       	and	r16, r16
      ba:	13 08       	sbc	r1, r3
      bc:	64 62       	ori	r22, 0x24	; 36
      be:	00 00       	nop
      c0:	00 36       	cpi	r16, 0x60	; 96
      c2:	49 55       	subi	r20, 0x59	; 89
      c4:	22 50       	subi	r18, 0x02	; 2
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	05 03       	mulsu	r16, r21
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 1c       	adc	r0, r0
      d2:	22 41       	sbci	r18, 0x12	; 18
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	00 41       	sbci	r16, 0x10	; 16
      da:	22 1c       	adc	r2, r2
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	2a 1c       	adc	r2, r10
      e4:	2a 08       	sbc	r2, r10
      e6:	00 00       	nop
      e8:	00 08       	sbc	r0, r0
      ea:	08 3e       	cpi	r16, 0xE8	; 232
      ec:	08 08       	sbc	r0, r8
      ee:	00 00       	nop
      f0:	00 a0       	ldd	r0, Z+32	; 0x20
      f2:	60 00       	.word	0x0060	; ????
      f4:	00 00       	nop
      f6:	00 00       	nop
      f8:	00 08       	sbc	r0, r0
      fa:	08 08       	sbc	r0, r8
      fc:	08 08       	sbc	r0, r8
      fe:	00 00       	nop
     100:	00 60       	ori	r16, 0x00	; 0
     102:	60 00       	.word	0x0060	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 20       	and	r0, r0
     10a:	10 08       	sbc	r1, r0
     10c:	04 02       	muls	r16, r20
     10e:	00 00       	nop
     110:	00 3e       	cpi	r16, 0xE0	; 224
     112:	51 49       	sbci	r21, 0x91	; 145
     114:	45 3e       	cpi	r20, 0xE5	; 229
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	42 7f       	andi	r20, 0xF2	; 242
     11c:	40 00       	.word	0x0040	; ????
     11e:	00 00       	nop
     120:	00 62       	ori	r16, 0x20	; 32
     122:	51 49       	sbci	r21, 0x91	; 145
     124:	49 46       	sbci	r20, 0x69	; 105
     126:	00 00       	nop
     128:	00 22       	and	r0, r16
     12a:	41 49       	sbci	r20, 0x91	; 145
     12c:	49 36       	cpi	r20, 0x69	; 105
     12e:	00 00       	nop
     130:	00 18       	sub	r0, r0
     132:	14 12       	cpse	r1, r20
     134:	7f 10       	cpse	r7, r15
     136:	00 00       	nop
     138:	00 27       	eor	r16, r16
     13a:	45 45       	sbci	r20, 0x55	; 85
     13c:	45 39       	cpi	r20, 0x95	; 149
     13e:	00 00       	nop
     140:	00 3c       	cpi	r16, 0xC0	; 192
     142:	4a 49       	sbci	r20, 0x9A	; 154
     144:	49 30       	cpi	r20, 0x09	; 9
     146:	00 00       	nop
     148:	00 01       	movw	r0, r0
     14a:	71 09       	sbc	r23, r1
     14c:	05 03       	mulsu	r16, r21
     14e:	00 00       	nop
     150:	00 36       	cpi	r16, 0x60	; 96
     152:	49 49       	sbci	r20, 0x99	; 153
     154:	49 36       	cpi	r20, 0x69	; 105
     156:	00 00       	nop
     158:	00 06       	cpc	r0, r16
     15a:	49 49       	sbci	r20, 0x99	; 153
     15c:	29 1e       	adc	r2, r25
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	36 36       	cpi	r19, 0x66	; 102
     164:	00 00       	nop
     166:	00 00       	nop
     168:	00 00       	nop
     16a:	ac 6c       	ori	r26, 0xCC	; 204
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	00 08       	sbc	r0, r0
     172:	14 22       	and	r1, r20
     174:	41 00       	.word	0x0041	; ????
     176:	00 00       	nop
     178:	00 14       	cp	r0, r0
     17a:	14 14       	cp	r1, r4
     17c:	14 14       	cp	r1, r4
     17e:	00 00       	nop
     180:	00 41       	sbci	r16, 0x10	; 16
     182:	22 14       	cp	r2, r2
     184:	08 00       	.word	0x0008	; ????
     186:	00 00       	nop
     188:	00 02       	muls	r16, r16
     18a:	01 51       	subi	r16, 0x11	; 17
     18c:	09 06       	cpc	r0, r25
     18e:	00 00       	nop
     190:	00 32       	cpi	r16, 0x20	; 32
     192:	49 79       	andi	r20, 0x99	; 153
     194:	41 3e       	cpi	r20, 0xE1	; 225
     196:	00 00       	nop
     198:	00 7e       	andi	r16, 0xE0	; 224
     19a:	09 09       	sbc	r16, r9
     19c:	09 7e       	andi	r16, 0xE9	; 233
     19e:	00 00       	nop
     1a0:	00 7f       	andi	r16, 0xF0	; 240
     1a2:	49 49       	sbci	r20, 0x99	; 153
     1a4:	49 36       	cpi	r20, 0x69	; 105
     1a6:	00 00       	nop
     1a8:	00 3e       	cpi	r16, 0xE0	; 224
     1aa:	41 41       	sbci	r20, 0x11	; 17
     1ac:	41 22       	and	r4, r17
     1ae:	00 00       	nop
     1b0:	00 7f       	andi	r16, 0xF0	; 240
     1b2:	41 41       	sbci	r20, 0x11	; 17
     1b4:	22 1c       	adc	r2, r2
     1b6:	00 00       	nop
     1b8:	00 7f       	andi	r16, 0xF0	; 240
     1ba:	49 49       	sbci	r20, 0x99	; 153
     1bc:	49 41       	sbci	r20, 0x19	; 25
     1be:	00 00       	nop
     1c0:	00 7f       	andi	r16, 0xF0	; 240
     1c2:	09 09       	sbc	r16, r9
     1c4:	09 01       	movw	r0, r18
     1c6:	00 00       	nop
     1c8:	00 3e       	cpi	r16, 0xE0	; 224
     1ca:	41 41       	sbci	r20, 0x11	; 17
     1cc:	51 72       	andi	r21, 0x21	; 33
     1ce:	00 00       	nop
     1d0:	00 7f       	andi	r16, 0xF0	; 240
     1d2:	08 08       	sbc	r0, r8
     1d4:	08 7f       	andi	r16, 0xF8	; 248
     1d6:	00 00       	nop
     1d8:	00 41       	sbci	r16, 0x10	; 16
     1da:	7f 41       	sbci	r23, 0x1F	; 31
     1dc:	00 00       	nop
     1de:	00 00       	nop
     1e0:	00 20       	and	r0, r0
     1e2:	40 41       	sbci	r20, 0x10	; 16
     1e4:	3f 01       	movw	r6, r30
     1e6:	00 00       	nop
     1e8:	00 7f       	andi	r16, 0xF0	; 240
     1ea:	08 14       	cp	r0, r8
     1ec:	22 41       	sbci	r18, 0x12	; 18
     1ee:	00 00       	nop
     1f0:	00 7f       	andi	r16, 0xF0	; 240
     1f2:	40 40       	sbci	r20, 0x00	; 0
     1f4:	40 40       	sbci	r20, 0x00	; 0
     1f6:	00 00       	nop
     1f8:	00 7f       	andi	r16, 0xF0	; 240
     1fa:	02 0c       	add	r0, r2
     1fc:	02 7f       	andi	r16, 0xF2	; 242
     1fe:	00 00       	nop
     200:	00 7f       	andi	r16, 0xF0	; 240
     202:	04 08       	sbc	r0, r4
     204:	10 7f       	andi	r17, 0xF0	; 240
     206:	00 00       	nop
     208:	00 3e       	cpi	r16, 0xE0	; 224
     20a:	41 41       	sbci	r20, 0x11	; 17
     20c:	41 3e       	cpi	r20, 0xE1	; 225
     20e:	00 00       	nop
     210:	00 7f       	andi	r16, 0xF0	; 240
     212:	09 09       	sbc	r16, r9
     214:	09 06       	cpc	r0, r25
     216:	00 00       	nop
     218:	00 3e       	cpi	r16, 0xE0	; 224
     21a:	41 51       	subi	r20, 0x11	; 17
     21c:	21 5e       	subi	r18, 0xE1	; 225
     21e:	00 00       	nop
     220:	00 7f       	andi	r16, 0xF0	; 240
     222:	09 19       	sub	r16, r9
     224:	29 46       	sbci	r18, 0x69	; 105
     226:	00 00       	nop
     228:	00 26       	eor	r0, r16
     22a:	49 49       	sbci	r20, 0x99	; 153
     22c:	49 32       	cpi	r20, 0x29	; 41
     22e:	00 00       	nop
     230:	00 01       	movw	r0, r0
     232:	01 7f       	andi	r16, 0xF1	; 241
     234:	01 01       	movw	r0, r2
     236:	00 00       	nop
     238:	00 3f       	cpi	r16, 0xF0	; 240
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	40 3f       	cpi	r20, 0xF0	; 240
     23e:	00 00       	nop
     240:	00 1f       	adc	r16, r16
     242:	20 40       	sbci	r18, 0x00	; 0
     244:	20 1f       	adc	r18, r16
     246:	00 00       	nop
     248:	00 3f       	cpi	r16, 0xF0	; 240
     24a:	40 38       	cpi	r20, 0x80	; 128
     24c:	40 3f       	cpi	r20, 0xF0	; 240
     24e:	00 00       	nop
     250:	00 63       	ori	r16, 0x30	; 48
     252:	14 08       	sbc	r1, r4
     254:	14 63       	ori	r17, 0x34	; 52
     256:	00 00       	nop
     258:	00 03       	mulsu	r16, r16
     25a:	04 78       	andi	r16, 0x84	; 132
     25c:	04 03       	mulsu	r16, r20
     25e:	00 00       	nop
     260:	00 61       	ori	r16, 0x10	; 16
     262:	51 49       	sbci	r21, 0x91	; 145
     264:	45 43       	sbci	r20, 0x35	; 53
     266:	00 00       	nop
     268:	00 7f       	andi	r16, 0xF0	; 240
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	00 00       	nop
     26e:	00 00       	nop
     270:	00 02       	muls	r16, r16
     272:	04 08       	sbc	r0, r4
     274:	10 20       	and	r1, r0
     276:	00 00       	nop
     278:	00 41       	sbci	r16, 0x10	; 16
     27a:	41 7f       	andi	r20, 0xF1	; 241
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	00 04       	cpc	r0, r0
     282:	02 01       	movw	r0, r4
     284:	02 04       	cpc	r0, r2
     286:	00 00       	nop
     288:	00 80       	ld	r0, Z
     28a:	80 80       	ld	r8, Z
     28c:	80 80       	ld	r8, Z
     28e:	00 00       	nop
     290:	00 01       	movw	r0, r0
     292:	02 04       	cpc	r0, r2
     294:	00 00       	nop
     296:	00 00       	nop
     298:	00 20       	and	r0, r0
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	54 78       	andi	r21, 0x84	; 132
     29e:	00 00       	nop
     2a0:	00 7f       	andi	r16, 0xF0	; 240
     2a2:	48 44       	sbci	r20, 0x48	; 72
     2a4:	44 38       	cpi	r20, 0x84	; 132
     2a6:	00 00       	nop
     2a8:	00 38       	cpi	r16, 0x80	; 128
     2aa:	44 44       	sbci	r20, 0x44	; 68
     2ac:	28 00       	.word	0x0028	; ????
     2ae:	00 00       	nop
     2b0:	00 38       	cpi	r16, 0x80	; 128
     2b2:	44 44       	sbci	r20, 0x44	; 68
     2b4:	48 7f       	andi	r20, 0xF8	; 248
     2b6:	00 00       	nop
     2b8:	00 38       	cpi	r16, 0x80	; 128
     2ba:	54 54       	subi	r21, 0x44	; 68
     2bc:	54 18       	sub	r5, r4
     2be:	00 00       	nop
     2c0:	00 08       	sbc	r0, r0
     2c2:	7e 09       	sbc	r23, r14
     2c4:	02 00       	.word	0x0002	; ????
     2c6:	00 00       	nop
     2c8:	00 18       	sub	r0, r0
     2ca:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2cc:	a4 7c       	andi	r26, 0xC4	; 196
     2ce:	00 00       	nop
     2d0:	00 7f       	andi	r16, 0xF0	; 240
     2d2:	08 04       	cpc	r0, r8
     2d4:	04 78       	andi	r16, 0x84	; 132
     2d6:	00 00       	nop
     2d8:	00 00       	nop
     2da:	7d 00       	.word	0x007d	; ????
     2dc:	00 00       	nop
     2de:	00 00       	nop
     2e0:	00 80       	ld	r0, Z
     2e2:	84 7d       	andi	r24, 0xD4	; 212
     2e4:	00 00       	nop
     2e6:	00 00       	nop
     2e8:	00 7f       	andi	r16, 0xF0	; 240
     2ea:	10 28       	or	r1, r0
     2ec:	44 00       	.word	0x0044	; ????
     2ee:	00 00       	nop
     2f0:	00 41       	sbci	r16, 0x10	; 16
     2f2:	7f 40       	sbci	r23, 0x0F	; 15
     2f4:	00 00       	nop
     2f6:	00 00       	nop
     2f8:	00 7c       	andi	r16, 0xC0	; 192
     2fa:	04 18       	sub	r0, r4
     2fc:	04 78       	andi	r16, 0x84	; 132
     2fe:	00 00       	nop
     300:	00 7c       	andi	r16, 0xC0	; 192
     302:	08 04       	cpc	r0, r8
     304:	7c 00       	.word	0x007c	; ????
     306:	00 00       	nop
     308:	00 38       	cpi	r16, 0x80	; 128
     30a:	44 44       	sbci	r20, 0x44	; 68
     30c:	38 00       	.word	0x0038	; ????
     30e:	00 00       	nop
     310:	00 fc       	sbrc	r0, 0
     312:	24 24       	eor	r2, r4
     314:	18 00       	.word	0x0018	; ????
     316:	00 00       	nop
     318:	00 18       	sub	r0, r0
     31a:	24 24       	eor	r2, r4
     31c:	fc 00       	.word	0x00fc	; ????
     31e:	00 00       	nop
     320:	00 00       	nop
     322:	7c 08       	sbc	r7, r12
     324:	04 00       	.word	0x0004	; ????
     326:	00 00       	nop
     328:	00 48       	sbci	r16, 0x80	; 128
     32a:	54 54       	subi	r21, 0x44	; 68
     32c:	24 00       	.word	0x0024	; ????
     32e:	00 00       	nop
     330:	00 04       	cpc	r0, r0
     332:	7f 44       	sbci	r23, 0x4F	; 79
     334:	00 00       	nop
     336:	00 00       	nop
     338:	00 3c       	cpi	r16, 0xC0	; 192
     33a:	40 40       	sbci	r20, 0x00	; 0
     33c:	7c 00       	.word	0x007c	; ????
     33e:	00 00       	nop
     340:	00 1c       	adc	r0, r0
     342:	20 40       	sbci	r18, 0x00	; 0
     344:	20 1c       	adc	r2, r0
     346:	00 00       	nop
     348:	00 3c       	cpi	r16, 0xC0	; 192
     34a:	40 30       	cpi	r20, 0x00	; 0
     34c:	40 3c       	cpi	r20, 0xC0	; 192
     34e:	00 00       	nop
     350:	00 44       	sbci	r16, 0x40	; 64
     352:	28 10       	cpse	r2, r8
     354:	28 44       	sbci	r18, 0x48	; 72
     356:	00 00       	nop
     358:	00 1c       	adc	r0, r0
     35a:	a0 a0       	ldd	r10, Z+32	; 0x20
     35c:	7c 00       	.word	0x007c	; ????
     35e:	00 00       	nop
     360:	00 44       	sbci	r16, 0x40	; 64
     362:	64 54       	subi	r22, 0x44	; 68
     364:	4c 44       	sbci	r20, 0x4C	; 76
     366:	00 00       	nop
     368:	00 08       	sbc	r0, r0
     36a:	36 41       	sbci	r19, 0x16	; 22
     36c:	00 00       	nop
     36e:	00 00       	nop
     370:	00 00       	nop
     372:	7f 00       	.word	0x007f	; ????
     374:	00 00       	nop
     376:	00 00       	nop
     378:	00 41       	sbci	r16, 0x10	; 16
     37a:	36 08       	sbc	r3, r6
     37c:	00 00       	nop
     37e:	00 00       	nop
     380:	00 02       	muls	r16, r16
     382:	01 01       	movw	r0, r2
     384:	02 01       	movw	r0, r4
     386:	00 00       	nop
     388:	00 02       	muls	r16, r16
     38a:	05 05       	cpc	r16, r5
     38c:	02 00       	.word	0x0002	; ????
	...

00000390 <__c.2242>:
     390:	6e 61 6e 00                                         nan.

00000394 <__c.2240>:
     394:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     3a4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     3b4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     3c4:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     3d4:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     3e4:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3f4:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     404:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     414:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     424:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     434:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     444:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     454:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     464:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     474:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     484:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000492 <__ctors_end>:
     492:	11 24       	eor	r1, r1
     494:	1f be       	out	0x3f, r1	; 63
     496:	cf ef       	ldi	r28, 0xFF	; 255
     498:	d8 e0       	ldi	r29, 0x08	; 8
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	cd bf       	out	0x3d, r28	; 61

0000049e <__do_copy_data>:
     49e:	11 e0       	ldi	r17, 0x01	; 1
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b1 e0       	ldi	r27, 0x01	; 1
     4a4:	e6 ea       	ldi	r30, 0xA6	; 166
     4a6:	f4 e3       	ldi	r31, 0x34	; 52
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__do_copy_data+0x10>
     4aa:	05 90       	lpm	r0, Z+
     4ac:	0d 92       	st	X+, r0
     4ae:	a4 33       	cpi	r26, 0x34	; 52
     4b0:	b1 07       	cpc	r27, r17
     4b2:	d9 f7       	brne	.-10     	; 0x4aa <__do_copy_data+0xc>

000004b4 <__do_clear_bss>:
     4b4:	22 e0       	ldi	r18, 0x02	; 2
     4b6:	a4 e3       	ldi	r26, 0x34	; 52
     4b8:	b1 e0       	ldi	r27, 0x01	; 1
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <.do_clear_bss_start>

000004bc <.do_clear_bss_loop>:
     4bc:	1d 92       	st	X+, r1

000004be <.do_clear_bss_start>:
     4be:	ab 3b       	cpi	r26, 0xBB	; 187
     4c0:	b2 07       	cpc	r27, r18
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <.do_clear_bss_loop>
     4c4:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <main>
     4c8:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <_exit>

000004cc <__bad_interrupt>:
     4cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004d0 <_Z12send_commandj>:
	 send_command(0x0022); //Start to write to display RAM
 }

 void LCD_set_display_direct(uint8_t direction)
 {
	 display_direct = direction;
     4d0:	2a 98       	cbi	0x05, 2	; 5
     4d2:	2b 98       	cbi	0x05, 3	; 5
     4d4:	2d 9a       	sbi	0x05, 5	; 5
     4d6:	2c 9a       	sbi	0x05, 4	; 5
     4d8:	2c 98       	cbi	0x05, 4	; 5
     4da:	2b b1       	in	r18, 0x0b	; 11
     4dc:	23 70       	andi	r18, 0x03	; 3
     4de:	2b b9       	out	0x0b, r18	; 11
     4e0:	25 b1       	in	r18, 0x05	; 5
     4e2:	2c 7f       	andi	r18, 0xFC	; 252
     4e4:	25 b9       	out	0x05, r18	; 5
     4e6:	2b b1       	in	r18, 0x0b	; 11
     4e8:	2b b9       	out	0x0b, r18	; 11
     4ea:	25 b1       	in	r18, 0x05	; 5
     4ec:	25 b9       	out	0x05, r18	; 5
     4ee:	2c 9a       	sbi	0x05, 4	; 5
     4f0:	2c 98       	cbi	0x05, 4	; 5
     4f2:	2b b1       	in	r18, 0x0b	; 11
     4f4:	23 70       	andi	r18, 0x03	; 3
     4f6:	2b b9       	out	0x0b, r18	; 11
     4f8:	25 b1       	in	r18, 0x05	; 5
     4fa:	2c 7f       	andi	r18, 0xFC	; 252
     4fc:	25 b9       	out	0x05, r18	; 5
     4fe:	4b b1       	in	r20, 0x0b	; 11
     500:	99 27       	eor	r25, r25
     502:	9c 01       	movw	r18, r24
     504:	22 0f       	add	r18, r18
     506:	33 1f       	adc	r19, r19
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
     50c:	24 2b       	or	r18, r20
     50e:	2b b9       	out	0x0b, r18	; 11
     510:	25 b1       	in	r18, 0x05	; 5
     512:	08 2e       	mov	r0, r24
     514:	89 2f       	mov	r24, r25
     516:	00 0c       	add	r0, r0
     518:	88 1f       	adc	r24, r24
     51a:	99 0b       	sbc	r25, r25
     51c:	00 0c       	add	r0, r0
     51e:	88 1f       	adc	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	82 2b       	or	r24, r18
     524:	85 b9       	out	0x05, r24	; 5
     526:	2c 9a       	sbi	0x05, 4	; 5
     528:	2a 9a       	sbi	0x05, 2	; 5
     52a:	08 95       	ret

0000052c <_Z22LCD_paint_screen_blackv>:
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	46 e9       	ldi	r20, 0x96	; 150
     532:	21 c0       	rjmp	.+66     	; 0x576 <_Z22LCD_paint_screen_blackv+0x4a>
     534:	2a 98       	cbi	0x05, 2	; 5
     536:	2b 9a       	sbi	0x05, 3	; 5
     538:	2d 9a       	sbi	0x05, 5	; 5
     53a:	2c 98       	cbi	0x05, 4	; 5
     53c:	8b b1       	in	r24, 0x0b	; 11
     53e:	83 70       	andi	r24, 0x03	; 3
     540:	8b b9       	out	0x0b, r24	; 11
     542:	85 b1       	in	r24, 0x05	; 5
     544:	8c 7f       	andi	r24, 0xFC	; 252
     546:	85 b9       	out	0x05, r24	; 5
     548:	8b b1       	in	r24, 0x0b	; 11
     54a:	8b b9       	out	0x0b, r24	; 11
     54c:	85 b1       	in	r24, 0x05	; 5
     54e:	85 b9       	out	0x05, r24	; 5
     550:	2c 9a       	sbi	0x05, 4	; 5
     552:	2c 98       	cbi	0x05, 4	; 5
     554:	8b b1       	in	r24, 0x0b	; 11
     556:	83 70       	andi	r24, 0x03	; 3
     558:	8b b9       	out	0x0b, r24	; 11
     55a:	85 b1       	in	r24, 0x05	; 5
     55c:	8c 7f       	andi	r24, 0xFC	; 252
     55e:	85 b9       	out	0x05, r24	; 5
     560:	8b b1       	in	r24, 0x0b	; 11
     562:	8b b9       	out	0x0b, r24	; 11
     564:	85 b1       	in	r24, 0x05	; 5
     566:	85 b9       	out	0x05, r24	; 5
     568:	2c 9a       	sbi	0x05, 4	; 5
     56a:	2a 9a       	sbi	0x05, 2	; 5
     56c:	21 50       	subi	r18, 0x01	; 1
     56e:	31 09       	sbc	r19, r1
     570:	09 f7       	brne	.-62     	; 0x534 <_Z22LCD_paint_screen_blackv+0x8>
     572:	91 50       	subi	r25, 0x01	; 1
     574:	19 f0       	breq	.+6      	; 0x57c <_Z22LCD_paint_screen_blackv+0x50>
     576:	25 2f       	mov	r18, r21
     578:	34 2f       	mov	r19, r20
     57a:	dc cf       	rjmp	.-72     	; 0x534 <_Z22LCD_paint_screen_blackv+0x8>
     57c:	08 95       	ret

0000057e <_Z8LCD_initv>:
     57e:	22 9a       	sbi	0x04, 2	; 4
     580:	25 9a       	sbi	0x04, 5	; 4
     582:	24 9a       	sbi	0x04, 4	; 4
     584:	23 9a       	sbi	0x04, 3	; 4
     586:	8a b1       	in	r24, 0x0a	; 10
     588:	8c 6f       	ori	r24, 0xFC	; 252
     58a:	8a b9       	out	0x0a, r24	; 10
     58c:	84 b1       	in	r24, 0x04	; 4
     58e:	83 60       	ori	r24, 0x03	; 3
     590:	84 b9       	out	0x04, r24	; 4
     592:	8b b1       	in	r24, 0x0b	; 11
     594:	83 70       	andi	r24, 0x03	; 3
     596:	8b b9       	out	0x0b, r24	; 11
     598:	85 b1       	in	r24, 0x05	; 5
     59a:	8c 7f       	andi	r24, 0xFC	; 252
     59c:	85 b9       	out	0x05, r24	; 5
     59e:	2f ef       	ldi	r18, 0xFF	; 255
     5a0:	81 ee       	ldi	r24, 0xE1	; 225
     5a2:	94 e0       	ldi	r25, 0x04	; 4
     5a4:	21 50       	subi	r18, 0x01	; 1
     5a6:	80 40       	sbci	r24, 0x00	; 0
     5a8:	90 40       	sbci	r25, 0x00	; 0
     5aa:	e1 f7       	brne	.-8      	; 0x5a4 <_Z8LCD_initv+0x26>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <_Z8LCD_initv+0x30>
     5ae:	00 00       	nop
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     5b8:	2a 98       	cbi	0x05, 2	; 5
     5ba:	2b 9a       	sbi	0x05, 3	; 5
     5bc:	2d 9a       	sbi	0x05, 5	; 5
     5be:	2c 98       	cbi	0x05, 4	; 5
     5c0:	8b b1       	in	r24, 0x0b	; 11
     5c2:	83 70       	andi	r24, 0x03	; 3
     5c4:	8b b9       	out	0x0b, r24	; 11
     5c6:	85 b1       	in	r24, 0x05	; 5
     5c8:	8c 7f       	andi	r24, 0xFC	; 252
     5ca:	85 b9       	out	0x05, r24	; 5
     5cc:	5a 9a       	sbi	0x0b, 2	; 11
     5ce:	85 b1       	in	r24, 0x05	; 5
     5d0:	85 b9       	out	0x05, r24	; 5
     5d2:	2c 9a       	sbi	0x05, 4	; 5
     5d4:	2c 98       	cbi	0x05, 4	; 5
     5d6:	8b b1       	in	r24, 0x0b	; 11
     5d8:	83 70       	andi	r24, 0x03	; 3
     5da:	8b b9       	out	0x0b, r24	; 11
     5dc:	85 b1       	in	r24, 0x05	; 5
     5de:	8c 7f       	andi	r24, 0xFC	; 252
     5e0:	85 b9       	out	0x05, r24	; 5
     5e2:	8b b1       	in	r24, 0x0b	; 11
     5e4:	8b b9       	out	0x0b, r24	; 11
     5e6:	85 b1       	in	r24, 0x05	; 5
     5e8:	85 b9       	out	0x05, r24	; 5
     5ea:	2c 9a       	sbi	0x05, 4	; 5
     5ec:	2a 9a       	sbi	0x05, 2	; 5
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     5f6:	2a 98       	cbi	0x05, 2	; 5
     5f8:	2b 9a       	sbi	0x05, 3	; 5
     5fa:	2d 9a       	sbi	0x05, 5	; 5
     5fc:	2c 98       	cbi	0x05, 4	; 5
     5fe:	8b b1       	in	r24, 0x0b	; 11
     600:	83 70       	andi	r24, 0x03	; 3
     602:	8b b9       	out	0x0b, r24	; 11
     604:	85 b1       	in	r24, 0x05	; 5
     606:	8c 7f       	andi	r24, 0xFC	; 252
     608:	85 b9       	out	0x05, r24	; 5
     60a:	8b b1       	in	r24, 0x0b	; 11
     60c:	8c 61       	ori	r24, 0x1C	; 28
     60e:	8b b9       	out	0x0b, r24	; 11
     610:	85 b1       	in	r24, 0x05	; 5
     612:	85 b9       	out	0x05, r24	; 5
     614:	2c 9a       	sbi	0x05, 4	; 5
     616:	2c 98       	cbi	0x05, 4	; 5
     618:	8b b1       	in	r24, 0x0b	; 11
     61a:	83 70       	andi	r24, 0x03	; 3
     61c:	8b b9       	out	0x0b, r24	; 11
     61e:	85 b1       	in	r24, 0x05	; 5
     620:	8c 7f       	andi	r24, 0xFC	; 252
     622:	85 b9       	out	0x05, r24	; 5
     624:	8b b1       	in	r24, 0x0b	; 11
     626:	8b b9       	out	0x0b, r24	; 11
     628:	85 b1       	in	r24, 0x05	; 5
     62a:	85 b9       	out	0x05, r24	; 5
     62c:	2c 9a       	sbi	0x05, 4	; 5
     62e:	2a 9a       	sbi	0x05, 2	; 5
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     638:	2a 98       	cbi	0x05, 2	; 5
     63a:	2b 9a       	sbi	0x05, 3	; 5
     63c:	2d 9a       	sbi	0x05, 5	; 5
     63e:	2c 98       	cbi	0x05, 4	; 5
     640:	8b b1       	in	r24, 0x0b	; 11
     642:	83 70       	andi	r24, 0x03	; 3
     644:	8b b9       	out	0x0b, r24	; 11
     646:	85 b1       	in	r24, 0x05	; 5
     648:	8c 7f       	andi	r24, 0xFC	; 252
     64a:	85 b9       	out	0x05, r24	; 5
     64c:	5e 9a       	sbi	0x0b, 6	; 11
     64e:	85 b1       	in	r24, 0x05	; 5
     650:	85 b9       	out	0x05, r24	; 5
     652:	2c 9a       	sbi	0x05, 4	; 5
     654:	2c 98       	cbi	0x05, 4	; 5
     656:	8b b1       	in	r24, 0x0b	; 11
     658:	83 70       	andi	r24, 0x03	; 3
     65a:	8b b9       	out	0x0b, r24	; 11
     65c:	85 b1       	in	r24, 0x05	; 5
     65e:	8c 7f       	andi	r24, 0xFC	; 252
     660:	85 b9       	out	0x05, r24	; 5
     662:	8b b1       	in	r24, 0x0b	; 11
     664:	80 6c       	ori	r24, 0xC0	; 192
     666:	8b b9       	out	0x0b, r24	; 11
     668:	85 b1       	in	r24, 0x05	; 5
     66a:	85 b9       	out	0x05, r24	; 5
     66c:	2c 9a       	sbi	0x05, 4	; 5
     66e:	2a 9a       	sbi	0x05, 2	; 5
     670:	84 e0       	ldi	r24, 0x04	; 4
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     678:	2a 98       	cbi	0x05, 2	; 5
     67a:	2b 9a       	sbi	0x05, 3	; 5
     67c:	2d 9a       	sbi	0x05, 5	; 5
     67e:	2c 98       	cbi	0x05, 4	; 5
     680:	8b b1       	in	r24, 0x0b	; 11
     682:	83 70       	andi	r24, 0x03	; 3
     684:	8b b9       	out	0x0b, r24	; 11
     686:	85 b1       	in	r24, 0x05	; 5
     688:	8c 7f       	andi	r24, 0xFC	; 252
     68a:	85 b9       	out	0x05, r24	; 5
     68c:	8b b1       	in	r24, 0x0b	; 11
     68e:	8b b9       	out	0x0b, r24	; 11
     690:	85 b1       	in	r24, 0x05	; 5
     692:	85 b9       	out	0x05, r24	; 5
     694:	2c 9a       	sbi	0x05, 4	; 5
     696:	2c 98       	cbi	0x05, 4	; 5
     698:	8b b1       	in	r24, 0x0b	; 11
     69a:	83 70       	andi	r24, 0x03	; 3
     69c:	8b b9       	out	0x0b, r24	; 11
     69e:	85 b1       	in	r24, 0x05	; 5
     6a0:	8c 7f       	andi	r24, 0xFC	; 252
     6a2:	85 b9       	out	0x05, r24	; 5
     6a4:	8b b1       	in	r24, 0x0b	; 11
     6a6:	8b b9       	out	0x0b, r24	; 11
     6a8:	85 b1       	in	r24, 0x05	; 5
     6aa:	85 b9       	out	0x05, r24	; 5
     6ac:	2c 9a       	sbi	0x05, 4	; 5
     6ae:	2a 9a       	sbi	0x05, 2	; 5
     6b0:	88 e0       	ldi	r24, 0x08	; 8
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     6b8:	2a 98       	cbi	0x05, 2	; 5
     6ba:	2b 9a       	sbi	0x05, 3	; 5
     6bc:	2d 9a       	sbi	0x05, 5	; 5
     6be:	2c 98       	cbi	0x05, 4	; 5
     6c0:	8b b1       	in	r24, 0x0b	; 11
     6c2:	83 70       	andi	r24, 0x03	; 3
     6c4:	8b b9       	out	0x0b, r24	; 11
     6c6:	85 b1       	in	r24, 0x05	; 5
     6c8:	8c 7f       	andi	r24, 0xFC	; 252
     6ca:	85 b9       	out	0x05, r24	; 5
     6cc:	8b b1       	in	r24, 0x0b	; 11
     6ce:	8c 60       	ori	r24, 0x0C	; 12
     6d0:	8b b9       	out	0x0b, r24	; 11
     6d2:	85 b1       	in	r24, 0x05	; 5
     6d4:	85 b9       	out	0x05, r24	; 5
     6d6:	2c 9a       	sbi	0x05, 4	; 5
     6d8:	2c 98       	cbi	0x05, 4	; 5
     6da:	8b b1       	in	r24, 0x0b	; 11
     6dc:	83 70       	andi	r24, 0x03	; 3
     6de:	8b b9       	out	0x0b, r24	; 11
     6e0:	85 b1       	in	r24, 0x05	; 5
     6e2:	8c 7f       	andi	r24, 0xFC	; 252
     6e4:	85 b9       	out	0x05, r24	; 5
     6e6:	5b 9a       	sbi	0x0b, 3	; 11
     6e8:	85 b1       	in	r24, 0x05	; 5
     6ea:	85 b9       	out	0x05, r24	; 5
     6ec:	2c 9a       	sbi	0x05, 4	; 5
     6ee:	2a 9a       	sbi	0x05, 2	; 5
     6f0:	8a e0       	ldi	r24, 0x0A	; 10
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     6f8:	2a 98       	cbi	0x05, 2	; 5
     6fa:	2b 9a       	sbi	0x05, 3	; 5
     6fc:	2d 9a       	sbi	0x05, 5	; 5
     6fe:	2c 98       	cbi	0x05, 4	; 5
     700:	8b b1       	in	r24, 0x0b	; 11
     702:	83 70       	andi	r24, 0x03	; 3
     704:	8b b9       	out	0x0b, r24	; 11
     706:	85 b1       	in	r24, 0x05	; 5
     708:	8c 7f       	andi	r24, 0xFC	; 252
     70a:	85 b9       	out	0x05, r24	; 5
     70c:	8b b1       	in	r24, 0x0b	; 11
     70e:	8b b9       	out	0x0b, r24	; 11
     710:	85 b1       	in	r24, 0x05	; 5
     712:	85 b9       	out	0x05, r24	; 5
     714:	2c 9a       	sbi	0x05, 4	; 5
     716:	2c 98       	cbi	0x05, 4	; 5
     718:	8b b1       	in	r24, 0x0b	; 11
     71a:	83 70       	andi	r24, 0x03	; 3
     71c:	8b b9       	out	0x0b, r24	; 11
     71e:	85 b1       	in	r24, 0x05	; 5
     720:	8c 7f       	andi	r24, 0xFC	; 252
     722:	85 b9       	out	0x05, r24	; 5
     724:	8b b1       	in	r24, 0x0b	; 11
     726:	8b b9       	out	0x0b, r24	; 11
     728:	85 b1       	in	r24, 0x05	; 5
     72a:	85 b9       	out	0x05, r24	; 5
     72c:	2c 9a       	sbi	0x05, 4	; 5
     72e:	2a 9a       	sbi	0x05, 2	; 5
     730:	8c e0       	ldi	r24, 0x0C	; 12
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     738:	2a 98       	cbi	0x05, 2	; 5
     73a:	2b 9a       	sbi	0x05, 3	; 5
     73c:	2d 9a       	sbi	0x05, 5	; 5
     73e:	2c 98       	cbi	0x05, 4	; 5
     740:	8b b1       	in	r24, 0x0b	; 11
     742:	83 70       	andi	r24, 0x03	; 3
     744:	8b b9       	out	0x0b, r24	; 11
     746:	85 b1       	in	r24, 0x05	; 5
     748:	8c 7f       	andi	r24, 0xFC	; 252
     74a:	85 b9       	out	0x05, r24	; 5
     74c:	8b b1       	in	r24, 0x0b	; 11
     74e:	8b b9       	out	0x0b, r24	; 11
     750:	85 b1       	in	r24, 0x05	; 5
     752:	85 b9       	out	0x05, r24	; 5
     754:	2c 9a       	sbi	0x05, 4	; 5
     756:	2c 98       	cbi	0x05, 4	; 5
     758:	8b b1       	in	r24, 0x0b	; 11
     75a:	83 70       	andi	r24, 0x03	; 3
     75c:	8b b9       	out	0x0b, r24	; 11
     75e:	85 b1       	in	r24, 0x05	; 5
     760:	8c 7f       	andi	r24, 0xFC	; 252
     762:	85 b9       	out	0x05, r24	; 5
     764:	8b b1       	in	r24, 0x0b	; 11
     766:	8b b9       	out	0x0b, r24	; 11
     768:	85 b1       	in	r24, 0x05	; 5
     76a:	85 b9       	out	0x05, r24	; 5
     76c:	2c 9a       	sbi	0x05, 4	; 5
     76e:	2a 9a       	sbi	0x05, 2	; 5
     770:	8d e0       	ldi	r24, 0x0D	; 13
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     778:	2a 98       	cbi	0x05, 2	; 5
     77a:	2b 9a       	sbi	0x05, 3	; 5
     77c:	2d 9a       	sbi	0x05, 5	; 5
     77e:	2c 98       	cbi	0x05, 4	; 5
     780:	8b b1       	in	r24, 0x0b	; 11
     782:	83 70       	andi	r24, 0x03	; 3
     784:	8b b9       	out	0x0b, r24	; 11
     786:	85 b1       	in	r24, 0x05	; 5
     788:	8c 7f       	andi	r24, 0xFC	; 252
     78a:	85 b9       	out	0x05, r24	; 5
     78c:	8b b1       	in	r24, 0x0b	; 11
     78e:	8b b9       	out	0x0b, r24	; 11
     790:	85 b1       	in	r24, 0x05	; 5
     792:	85 b9       	out	0x05, r24	; 5
     794:	2c 9a       	sbi	0x05, 4	; 5
     796:	2c 98       	cbi	0x05, 4	; 5
     798:	8b b1       	in	r24, 0x0b	; 11
     79a:	83 70       	andi	r24, 0x03	; 3
     79c:	8b b9       	out	0x0b, r24	; 11
     79e:	85 b1       	in	r24, 0x05	; 5
     7a0:	8c 7f       	andi	r24, 0xFC	; 252
     7a2:	85 b9       	out	0x05, r24	; 5
     7a4:	8b b1       	in	r24, 0x0b	; 11
     7a6:	8b b9       	out	0x0b, r24	; 11
     7a8:	85 b1       	in	r24, 0x05	; 5
     7aa:	85 b9       	out	0x05, r24	; 5
     7ac:	2c 9a       	sbi	0x05, 4	; 5
     7ae:	2a 9a       	sbi	0x05, 2	; 5
     7b0:	8f e0       	ldi	r24, 0x0F	; 15
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     7b8:	2a 98       	cbi	0x05, 2	; 5
     7ba:	2b 9a       	sbi	0x05, 3	; 5
     7bc:	2d 9a       	sbi	0x05, 5	; 5
     7be:	2c 98       	cbi	0x05, 4	; 5
     7c0:	8b b1       	in	r24, 0x0b	; 11
     7c2:	83 70       	andi	r24, 0x03	; 3
     7c4:	8b b9       	out	0x0b, r24	; 11
     7c6:	85 b1       	in	r24, 0x05	; 5
     7c8:	8c 7f       	andi	r24, 0xFC	; 252
     7ca:	85 b9       	out	0x05, r24	; 5
     7cc:	8b b1       	in	r24, 0x0b	; 11
     7ce:	8b b9       	out	0x0b, r24	; 11
     7d0:	85 b1       	in	r24, 0x05	; 5
     7d2:	85 b9       	out	0x05, r24	; 5
     7d4:	2c 9a       	sbi	0x05, 4	; 5
     7d6:	2c 98       	cbi	0x05, 4	; 5
     7d8:	8b b1       	in	r24, 0x0b	; 11
     7da:	83 70       	andi	r24, 0x03	; 3
     7dc:	8b b9       	out	0x0b, r24	; 11
     7de:	85 b1       	in	r24, 0x05	; 5
     7e0:	8c 7f       	andi	r24, 0xFC	; 252
     7e2:	85 b9       	out	0x05, r24	; 5
     7e4:	8b b1       	in	r24, 0x0b	; 11
     7e6:	8b b9       	out	0x0b, r24	; 11
     7e8:	85 b1       	in	r24, 0x05	; 5
     7ea:	85 b9       	out	0x05, r24	; 5
     7ec:	2c 9a       	sbi	0x05, 4	; 5
     7ee:	2a 9a       	sbi	0x05, 2	; 5
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	81 ee       	ldi	r24, 0xE1	; 225
     7f4:	94 e0       	ldi	r25, 0x04	; 4
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <_Z8LCD_initv+0x278>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <_Z8LCD_initv+0x282>
     800:	00 00       	nop
     802:	80 e3       	ldi	r24, 0x30	; 48
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     80a:	2a 98       	cbi	0x05, 2	; 5
     80c:	2b 9a       	sbi	0x05, 3	; 5
     80e:	2d 9a       	sbi	0x05, 5	; 5
     810:	2c 98       	cbi	0x05, 4	; 5
     812:	8b b1       	in	r24, 0x0b	; 11
     814:	83 70       	andi	r24, 0x03	; 3
     816:	8b b9       	out	0x0b, r24	; 11
     818:	85 b1       	in	r24, 0x05	; 5
     81a:	8c 7f       	andi	r24, 0xFC	; 252
     81c:	85 b9       	out	0x05, r24	; 5
     81e:	8b b1       	in	r24, 0x0b	; 11
     820:	8b b9       	out	0x0b, r24	; 11
     822:	85 b1       	in	r24, 0x05	; 5
     824:	85 b9       	out	0x05, r24	; 5
     826:	2c 9a       	sbi	0x05, 4	; 5
     828:	2c 98       	cbi	0x05, 4	; 5
     82a:	8b b1       	in	r24, 0x0b	; 11
     82c:	83 70       	andi	r24, 0x03	; 3
     82e:	8b b9       	out	0x0b, r24	; 11
     830:	85 b1       	in	r24, 0x05	; 5
     832:	8c 7f       	andi	r24, 0xFC	; 252
     834:	85 b9       	out	0x05, r24	; 5
     836:	8b b1       	in	r24, 0x0b	; 11
     838:	8b b9       	out	0x0b, r24	; 11
     83a:	85 b1       	in	r24, 0x05	; 5
     83c:	85 b9       	out	0x05, r24	; 5
     83e:	2c 9a       	sbi	0x05, 4	; 5
     840:	2a 9a       	sbi	0x05, 2	; 5
     842:	81 e3       	ldi	r24, 0x31	; 49
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     84a:	2a 98       	cbi	0x05, 2	; 5
     84c:	2b 9a       	sbi	0x05, 3	; 5
     84e:	2d 9a       	sbi	0x05, 5	; 5
     850:	2c 98       	cbi	0x05, 4	; 5
     852:	8b b1       	in	r24, 0x0b	; 11
     854:	83 70       	andi	r24, 0x03	; 3
     856:	8b b9       	out	0x0b, r24	; 11
     858:	85 b1       	in	r24, 0x05	; 5
     85a:	8c 7f       	andi	r24, 0xFC	; 252
     85c:	85 b9       	out	0x05, r24	; 5
     85e:	5c 9a       	sbi	0x0b, 4	; 11
     860:	85 b1       	in	r24, 0x05	; 5
     862:	85 b9       	out	0x05, r24	; 5
     864:	2c 9a       	sbi	0x05, 4	; 5
     866:	2c 98       	cbi	0x05, 4	; 5
     868:	8b b1       	in	r24, 0x0b	; 11
     86a:	83 70       	andi	r24, 0x03	; 3
     86c:	8b b9       	out	0x0b, r24	; 11
     86e:	85 b1       	in	r24, 0x05	; 5
     870:	8c 7f       	andi	r24, 0xFC	; 252
     872:	85 b9       	out	0x05, r24	; 5
     874:	8b b1       	in	r24, 0x0b	; 11
     876:	84 61       	ori	r24, 0x14	; 20
     878:	8b b9       	out	0x0b, r24	; 11
     87a:	85 b1       	in	r24, 0x05	; 5
     87c:	85 b9       	out	0x05, r24	; 5
     87e:	2c 9a       	sbi	0x05, 4	; 5
     880:	2a 9a       	sbi	0x05, 2	; 5
     882:	82 e3       	ldi	r24, 0x32	; 50
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     88a:	2a 98       	cbi	0x05, 2	; 5
     88c:	2b 9a       	sbi	0x05, 3	; 5
     88e:	2d 9a       	sbi	0x05, 5	; 5
     890:	2c 98       	cbi	0x05, 4	; 5
     892:	8b b1       	in	r24, 0x0b	; 11
     894:	83 70       	andi	r24, 0x03	; 3
     896:	8b b9       	out	0x0b, r24	; 11
     898:	85 b1       	in	r24, 0x05	; 5
     89a:	8c 7f       	andi	r24, 0xFC	; 252
     89c:	85 b9       	out	0x05, r24	; 5
     89e:	5b 9a       	sbi	0x0b, 3	; 11
     8a0:	85 b1       	in	r24, 0x05	; 5
     8a2:	85 b9       	out	0x05, r24	; 5
     8a4:	2c 9a       	sbi	0x05, 4	; 5
     8a6:	2c 98       	cbi	0x05, 4	; 5
     8a8:	8b b1       	in	r24, 0x0b	; 11
     8aa:	83 70       	andi	r24, 0x03	; 3
     8ac:	8b b9       	out	0x0b, r24	; 11
     8ae:	85 b1       	in	r24, 0x05	; 5
     8b0:	8c 7f       	andi	r24, 0xFC	; 252
     8b2:	85 b9       	out	0x05, r24	; 5
     8b4:	8b b1       	in	r24, 0x0b	; 11
     8b6:	8c 60       	ori	r24, 0x0C	; 12
     8b8:	8b b9       	out	0x0b, r24	; 11
     8ba:	85 b1       	in	r24, 0x05	; 5
     8bc:	85 b9       	out	0x05, r24	; 5
     8be:	2c 9a       	sbi	0x05, 4	; 5
     8c0:	2a 9a       	sbi	0x05, 2	; 5
     8c2:	85 e3       	ldi	r24, 0x35	; 53
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     8ca:	2a 98       	cbi	0x05, 2	; 5
     8cc:	2b 9a       	sbi	0x05, 3	; 5
     8ce:	2d 9a       	sbi	0x05, 5	; 5
     8d0:	2c 98       	cbi	0x05, 4	; 5
     8d2:	8b b1       	in	r24, 0x0b	; 11
     8d4:	83 70       	andi	r24, 0x03	; 3
     8d6:	8b b9       	out	0x0b, r24	; 11
     8d8:	85 b1       	in	r24, 0x05	; 5
     8da:	8c 7f       	andi	r24, 0xFC	; 252
     8dc:	85 b9       	out	0x05, r24	; 5
     8de:	8b b1       	in	r24, 0x0b	; 11
     8e0:	8b b9       	out	0x0b, r24	; 11
     8e2:	85 b1       	in	r24, 0x05	; 5
     8e4:	85 b9       	out	0x05, r24	; 5
     8e6:	2c 9a       	sbi	0x05, 4	; 5
     8e8:	2c 98       	cbi	0x05, 4	; 5
     8ea:	8b b1       	in	r24, 0x0b	; 11
     8ec:	83 70       	andi	r24, 0x03	; 3
     8ee:	8b b9       	out	0x0b, r24	; 11
     8f0:	85 b1       	in	r24, 0x05	; 5
     8f2:	8c 7f       	andi	r24, 0xFC	; 252
     8f4:	85 b9       	out	0x05, r24	; 5
     8f6:	5c 9a       	sbi	0x0b, 4	; 11
     8f8:	85 b1       	in	r24, 0x05	; 5
     8fa:	85 b9       	out	0x05, r24	; 5
     8fc:	2c 9a       	sbi	0x05, 4	; 5
     8fe:	2a 9a       	sbi	0x05, 2	; 5
     900:	86 e3       	ldi	r24, 0x36	; 54
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     908:	2a 98       	cbi	0x05, 2	; 5
     90a:	2b 9a       	sbi	0x05, 3	; 5
     90c:	2d 9a       	sbi	0x05, 5	; 5
     90e:	2c 98       	cbi	0x05, 4	; 5
     910:	8b b1       	in	r24, 0x0b	; 11
     912:	83 70       	andi	r24, 0x03	; 3
     914:	8b b9       	out	0x0b, r24	; 11
     916:	85 b1       	in	r24, 0x05	; 5
     918:	8c 7f       	andi	r24, 0xFC	; 252
     91a:	85 b9       	out	0x05, r24	; 5
     91c:	8b b1       	in	r24, 0x0b	; 11
     91e:	8c 62       	ori	r24, 0x2C	; 44
     920:	8b b9       	out	0x0b, r24	; 11
     922:	85 b1       	in	r24, 0x05	; 5
     924:	85 b9       	out	0x05, r24	; 5
     926:	2c 9a       	sbi	0x05, 4	; 5
     928:	2c 98       	cbi	0x05, 4	; 5
     92a:	8b b1       	in	r24, 0x0b	; 11
     92c:	83 70       	andi	r24, 0x03	; 3
     92e:	8b b9       	out	0x0b, r24	; 11
     930:	85 b1       	in	r24, 0x05	; 5
     932:	8c 7f       	andi	r24, 0xFC	; 252
     934:	85 b9       	out	0x05, r24	; 5
     936:	8b b1       	in	r24, 0x0b	; 11
     938:	8c 61       	ori	r24, 0x1C	; 28
     93a:	8b b9       	out	0x0b, r24	; 11
     93c:	85 b1       	in	r24, 0x05	; 5
     93e:	85 b9       	out	0x05, r24	; 5
     940:	2c 9a       	sbi	0x05, 4	; 5
     942:	2a 9a       	sbi	0x05, 2	; 5
     944:	2a 98       	cbi	0x05, 2	; 5
     946:	2b 98       	cbi	0x05, 3	; 5
     948:	2d 9a       	sbi	0x05, 5	; 5
     94a:	2c 9a       	sbi	0x05, 4	; 5
     94c:	2c 98       	cbi	0x05, 4	; 5
     94e:	8b b1       	in	r24, 0x0b	; 11
     950:	83 70       	andi	r24, 0x03	; 3
     952:	8b b9       	out	0x0b, r24	; 11
     954:	85 b1       	in	r24, 0x05	; 5
     956:	8c 7f       	andi	r24, 0xFC	; 252
     958:	85 b9       	out	0x05, r24	; 5
     95a:	8b b1       	in	r24, 0x0b	; 11
     95c:	8b b9       	out	0x0b, r24	; 11
     95e:	85 b1       	in	r24, 0x05	; 5
     960:	85 b9       	out	0x05, r24	; 5
     962:	2c 9a       	sbi	0x05, 4	; 5
     964:	2c 98       	cbi	0x05, 4	; 5
     966:	8b b1       	in	r24, 0x0b	; 11
     968:	83 70       	andi	r24, 0x03	; 3
     96a:	8b b9       	out	0x0b, r24	; 11
     96c:	85 b1       	in	r24, 0x05	; 5
     96e:	8c 7f       	andi	r24, 0xFC	; 252
     970:	85 b9       	out	0x05, r24	; 5
     972:	8b b1       	in	r24, 0x0b	; 11
     974:	8c 6d       	ori	r24, 0xDC	; 220
     976:	8b b9       	out	0x0b, r24	; 11
     978:	85 b1       	in	r24, 0x05	; 5
     97a:	85 b9       	out	0x05, r24	; 5
     97c:	2c 9a       	sbi	0x05, 4	; 5
     97e:	2a 9a       	sbi	0x05, 2	; 5
     980:	2a 98       	cbi	0x05, 2	; 5
     982:	2b 9a       	sbi	0x05, 3	; 5
     984:	2d 9a       	sbi	0x05, 5	; 5
     986:	2c 98       	cbi	0x05, 4	; 5
     988:	8b b1       	in	r24, 0x0b	; 11
     98a:	83 70       	andi	r24, 0x03	; 3
     98c:	8b b9       	out	0x0b, r24	; 11
     98e:	85 b1       	in	r24, 0x05	; 5
     990:	8c 7f       	andi	r24, 0xFC	; 252
     992:	85 b9       	out	0x05, r24	; 5
     994:	8b b1       	in	r24, 0x0b	; 11
     996:	8b b9       	out	0x0b, r24	; 11
     998:	85 b1       	in	r24, 0x05	; 5
     99a:	85 b9       	out	0x05, r24	; 5
     99c:	2c 9a       	sbi	0x05, 4	; 5
     99e:	2c 98       	cbi	0x05, 4	; 5
     9a0:	8b b1       	in	r24, 0x0b	; 11
     9a2:	83 70       	andi	r24, 0x03	; 3
     9a4:	8b b9       	out	0x0b, r24	; 11
     9a6:	85 b1       	in	r24, 0x05	; 5
     9a8:	8c 7f       	andi	r24, 0xFC	; 252
     9aa:	85 b9       	out	0x05, r24	; 5
     9ac:	8b b1       	in	r24, 0x0b	; 11
     9ae:	8b b9       	out	0x0b, r24	; 11
     9b0:	85 b1       	in	r24, 0x05	; 5
     9b2:	85 b9       	out	0x05, r24	; 5
     9b4:	2c 9a       	sbi	0x05, 4	; 5
     9b6:	2a 9a       	sbi	0x05, 2	; 5
     9b8:	88 e3       	ldi	r24, 0x38	; 56
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     9c0:	2a 98       	cbi	0x05, 2	; 5
     9c2:	2b 9a       	sbi	0x05, 3	; 5
     9c4:	2d 9a       	sbi	0x05, 5	; 5
     9c6:	2c 98       	cbi	0x05, 4	; 5
     9c8:	8b b1       	in	r24, 0x0b	; 11
     9ca:	83 70       	andi	r24, 0x03	; 3
     9cc:	8b b9       	out	0x0b, r24	; 11
     9ce:	85 b1       	in	r24, 0x05	; 5
     9d0:	8c 7f       	andi	r24, 0xFC	; 252
     9d2:	85 b9       	out	0x05, r24	; 5
     9d4:	5c 9a       	sbi	0x0b, 4	; 11
     9d6:	85 b1       	in	r24, 0x05	; 5
     9d8:	85 b9       	out	0x05, r24	; 5
     9da:	2c 9a       	sbi	0x05, 4	; 5
     9dc:	2c 98       	cbi	0x05, 4	; 5
     9de:	8b b1       	in	r24, 0x0b	; 11
     9e0:	83 70       	andi	r24, 0x03	; 3
     9e2:	8b b9       	out	0x0b, r24	; 11
     9e4:	85 b1       	in	r24, 0x05	; 5
     9e6:	8c 7f       	andi	r24, 0xFC	; 252
     9e8:	85 b9       	out	0x05, r24	; 5
     9ea:	8b b1       	in	r24, 0x0b	; 11
     9ec:	84 61       	ori	r24, 0x14	; 20
     9ee:	8b b9       	out	0x0b, r24	; 11
     9f0:	85 b1       	in	r24, 0x05	; 5
     9f2:	85 b9       	out	0x05, r24	; 5
     9f4:	2c 9a       	sbi	0x05, 4	; 5
     9f6:	2a 9a       	sbi	0x05, 2	; 5
     9f8:	89 e3       	ldi	r24, 0x39	; 57
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     a00:	2a 98       	cbi	0x05, 2	; 5
     a02:	2b 9a       	sbi	0x05, 3	; 5
     a04:	2d 9a       	sbi	0x05, 5	; 5
     a06:	2c 98       	cbi	0x05, 4	; 5
     a08:	8b b1       	in	r24, 0x0b	; 11
     a0a:	83 70       	andi	r24, 0x03	; 3
     a0c:	8b b9       	out	0x0b, r24	; 11
     a0e:	85 b1       	in	r24, 0x05	; 5
     a10:	8c 7f       	andi	r24, 0xFC	; 252
     a12:	85 b9       	out	0x05, r24	; 5
     a14:	5b 9a       	sbi	0x0b, 3	; 11
     a16:	85 b1       	in	r24, 0x05	; 5
     a18:	85 b9       	out	0x05, r24	; 5
     a1a:	2c 9a       	sbi	0x05, 4	; 5
     a1c:	2c 98       	cbi	0x05, 4	; 5
     a1e:	8b b1       	in	r24, 0x0b	; 11
     a20:	83 70       	andi	r24, 0x03	; 3
     a22:	8b b9       	out	0x0b, r24	; 11
     a24:	85 b1       	in	r24, 0x05	; 5
     a26:	8c 7f       	andi	r24, 0xFC	; 252
     a28:	85 b9       	out	0x05, r24	; 5
     a2a:	8b b1       	in	r24, 0x0b	; 11
     a2c:	8c 60       	ori	r24, 0x0C	; 12
     a2e:	8b b9       	out	0x0b, r24	; 11
     a30:	85 b1       	in	r24, 0x05	; 5
     a32:	85 b9       	out	0x05, r24	; 5
     a34:	2c 9a       	sbi	0x05, 4	; 5
     a36:	2a 9a       	sbi	0x05, 2	; 5
     a38:	8c e3       	ldi	r24, 0x3C	; 60
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     a40:	2a 98       	cbi	0x05, 2	; 5
     a42:	2b 9a       	sbi	0x05, 3	; 5
     a44:	2d 9a       	sbi	0x05, 5	; 5
     a46:	2c 98       	cbi	0x05, 4	; 5
     a48:	8b b1       	in	r24, 0x0b	; 11
     a4a:	83 70       	andi	r24, 0x03	; 3
     a4c:	8b b9       	out	0x0b, r24	; 11
     a4e:	85 b1       	in	r24, 0x05	; 5
     a50:	8c 7f       	andi	r24, 0xFC	; 252
     a52:	85 b9       	out	0x05, r24	; 5
     a54:	8b b1       	in	r24, 0x0b	; 11
     a56:	8b b9       	out	0x0b, r24	; 11
     a58:	85 b1       	in	r24, 0x05	; 5
     a5a:	85 b9       	out	0x05, r24	; 5
     a5c:	2c 9a       	sbi	0x05, 4	; 5
     a5e:	2c 98       	cbi	0x05, 4	; 5
     a60:	8b b1       	in	r24, 0x0b	; 11
     a62:	83 70       	andi	r24, 0x03	; 3
     a64:	8b b9       	out	0x0b, r24	; 11
     a66:	85 b1       	in	r24, 0x05	; 5
     a68:	8c 7f       	andi	r24, 0xFC	; 252
     a6a:	85 b9       	out	0x05, r24	; 5
     a6c:	5c 9a       	sbi	0x0b, 4	; 11
     a6e:	85 b1       	in	r24, 0x05	; 5
     a70:	85 b9       	out	0x05, r24	; 5
     a72:	2c 9a       	sbi	0x05, 4	; 5
     a74:	2a 9a       	sbi	0x05, 2	; 5
     a76:	8d e3       	ldi	r24, 0x3D	; 61
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     a7e:	2a 98       	cbi	0x05, 2	; 5
     a80:	2b 9a       	sbi	0x05, 3	; 5
     a82:	2d 9a       	sbi	0x05, 5	; 5
     a84:	2c 98       	cbi	0x05, 4	; 5
     a86:	8b b1       	in	r24, 0x0b	; 11
     a88:	83 70       	andi	r24, 0x03	; 3
     a8a:	8b b9       	out	0x0b, r24	; 11
     a8c:	85 b1       	in	r24, 0x05	; 5
     a8e:	8c 7f       	andi	r24, 0xFC	; 252
     a90:	85 b9       	out	0x05, r24	; 5
     a92:	8b b1       	in	r24, 0x0b	; 11
     a94:	8c 62       	ori	r24, 0x2C	; 44
     a96:	8b b9       	out	0x0b, r24	; 11
     a98:	85 b1       	in	r24, 0x05	; 5
     a9a:	85 b9       	out	0x05, r24	; 5
     a9c:	2c 9a       	sbi	0x05, 4	; 5
     a9e:	2c 98       	cbi	0x05, 4	; 5
     aa0:	8b b1       	in	r24, 0x0b	; 11
     aa2:	83 70       	andi	r24, 0x03	; 3
     aa4:	8b b9       	out	0x0b, r24	; 11
     aa6:	85 b1       	in	r24, 0x05	; 5
     aa8:	8c 7f       	andi	r24, 0xFC	; 252
     aaa:	85 b9       	out	0x05, r24	; 5
     aac:	8b b1       	in	r24, 0x0b	; 11
     aae:	8c 61       	ori	r24, 0x1C	; 28
     ab0:	8b b9       	out	0x0b, r24	; 11
     ab2:	85 b1       	in	r24, 0x05	; 5
     ab4:	85 b9       	out	0x05, r24	; 5
     ab6:	2c 9a       	sbi	0x05, 4	; 5
     ab8:	2a 9a       	sbi	0x05, 2	; 5
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     ac2:	2a 98       	cbi	0x05, 2	; 5
     ac4:	2b 9a       	sbi	0x05, 3	; 5
     ac6:	2d 9a       	sbi	0x05, 5	; 5
     ac8:	2c 98       	cbi	0x05, 4	; 5
     aca:	8b b1       	in	r24, 0x0b	; 11
     acc:	83 70       	andi	r24, 0x03	; 3
     ace:	8b b9       	out	0x0b, r24	; 11
     ad0:	85 b1       	in	r24, 0x05	; 5
     ad2:	8c 7f       	andi	r24, 0xFC	; 252
     ad4:	85 b9       	out	0x05, r24	; 5
     ad6:	8b b1       	in	r24, 0x0b	; 11
     ad8:	8b b9       	out	0x0b, r24	; 11
     ada:	85 b1       	in	r24, 0x05	; 5
     adc:	85 b9       	out	0x05, r24	; 5
     ade:	2c 9a       	sbi	0x05, 4	; 5
     ae0:	2c 98       	cbi	0x05, 4	; 5
     ae2:	8b b1       	in	r24, 0x0b	; 11
     ae4:	83 70       	andi	r24, 0x03	; 3
     ae6:	8b b9       	out	0x0b, r24	; 11
     ae8:	85 b1       	in	r24, 0x05	; 5
     aea:	8c 7f       	andi	r24, 0xFC	; 252
     aec:	85 b9       	out	0x05, r24	; 5
     aee:	8b b1       	in	r24, 0x0b	; 11
     af0:	8b b9       	out	0x0b, r24	; 11
     af2:	85 b1       	in	r24, 0x05	; 5
     af4:	85 b9       	out	0x05, r24	; 5
     af6:	2c 9a       	sbi	0x05, 4	; 5
     af8:	2a 9a       	sbi	0x05, 2	; 5
     afa:	81 e2       	ldi	r24, 0x21	; 33
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     b02:	2a 98       	cbi	0x05, 2	; 5
     b04:	2b 9a       	sbi	0x05, 3	; 5
     b06:	2d 9a       	sbi	0x05, 5	; 5
     b08:	2c 98       	cbi	0x05, 4	; 5
     b0a:	8b b1       	in	r24, 0x0b	; 11
     b0c:	83 70       	andi	r24, 0x03	; 3
     b0e:	8b b9       	out	0x0b, r24	; 11
     b10:	85 b1       	in	r24, 0x05	; 5
     b12:	8c 7f       	andi	r24, 0xFC	; 252
     b14:	85 b9       	out	0x05, r24	; 5
     b16:	8b b1       	in	r24, 0x0b	; 11
     b18:	8b b9       	out	0x0b, r24	; 11
     b1a:	85 b1       	in	r24, 0x05	; 5
     b1c:	85 b9       	out	0x05, r24	; 5
     b1e:	2c 9a       	sbi	0x05, 4	; 5
     b20:	2c 98       	cbi	0x05, 4	; 5
     b22:	8b b1       	in	r24, 0x0b	; 11
     b24:	83 70       	andi	r24, 0x03	; 3
     b26:	8b b9       	out	0x0b, r24	; 11
     b28:	85 b1       	in	r24, 0x05	; 5
     b2a:	8c 7f       	andi	r24, 0xFC	; 252
     b2c:	85 b9       	out	0x05, r24	; 5
     b2e:	8b b1       	in	r24, 0x0b	; 11
     b30:	8b b9       	out	0x0b, r24	; 11
     b32:	85 b1       	in	r24, 0x05	; 5
     b34:	85 b9       	out	0x05, r24	; 5
     b36:	2c 9a       	sbi	0x05, 4	; 5
     b38:	2a 9a       	sbi	0x05, 2	; 5
     b3a:	80 e5       	ldi	r24, 0x50	; 80
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     b42:	2a 98       	cbi	0x05, 2	; 5
     b44:	2b 9a       	sbi	0x05, 3	; 5
     b46:	2d 9a       	sbi	0x05, 5	; 5
     b48:	2c 98       	cbi	0x05, 4	; 5
     b4a:	8b b1       	in	r24, 0x0b	; 11
     b4c:	83 70       	andi	r24, 0x03	; 3
     b4e:	8b b9       	out	0x0b, r24	; 11
     b50:	85 b1       	in	r24, 0x05	; 5
     b52:	8c 7f       	andi	r24, 0xFC	; 252
     b54:	85 b9       	out	0x05, r24	; 5
     b56:	8b b1       	in	r24, 0x0b	; 11
     b58:	8b b9       	out	0x0b, r24	; 11
     b5a:	85 b1       	in	r24, 0x05	; 5
     b5c:	85 b9       	out	0x05, r24	; 5
     b5e:	2c 9a       	sbi	0x05, 4	; 5
     b60:	2c 98       	cbi	0x05, 4	; 5
     b62:	8b b1       	in	r24, 0x0b	; 11
     b64:	83 70       	andi	r24, 0x03	; 3
     b66:	8b b9       	out	0x0b, r24	; 11
     b68:	85 b1       	in	r24, 0x05	; 5
     b6a:	8c 7f       	andi	r24, 0xFC	; 252
     b6c:	85 b9       	out	0x05, r24	; 5
     b6e:	8b b1       	in	r24, 0x0b	; 11
     b70:	8b b9       	out	0x0b, r24	; 11
     b72:	85 b1       	in	r24, 0x05	; 5
     b74:	85 b9       	out	0x05, r24	; 5
     b76:	2c 9a       	sbi	0x05, 4	; 5
     b78:	2a 9a       	sbi	0x05, 2	; 5
     b7a:	2a 98       	cbi	0x05, 2	; 5
     b7c:	2b 98       	cbi	0x05, 3	; 5
     b7e:	2d 9a       	sbi	0x05, 5	; 5
     b80:	2c 9a       	sbi	0x05, 4	; 5
     b82:	2c 98       	cbi	0x05, 4	; 5
     b84:	8b b1       	in	r24, 0x0b	; 11
     b86:	83 70       	andi	r24, 0x03	; 3
     b88:	8b b9       	out	0x0b, r24	; 11
     b8a:	85 b1       	in	r24, 0x05	; 5
     b8c:	8c 7f       	andi	r24, 0xFC	; 252
     b8e:	85 b9       	out	0x05, r24	; 5
     b90:	8b b1       	in	r24, 0x0b	; 11
     b92:	8b b9       	out	0x0b, r24	; 11
     b94:	85 b1       	in	r24, 0x05	; 5
     b96:	85 b9       	out	0x05, r24	; 5
     b98:	2c 9a       	sbi	0x05, 4	; 5
     b9a:	2c 98       	cbi	0x05, 4	; 5
     b9c:	8b b1       	in	r24, 0x0b	; 11
     b9e:	83 70       	andi	r24, 0x03	; 3
     ba0:	8b b9       	out	0x0b, r24	; 11
     ba2:	85 b1       	in	r24, 0x05	; 5
     ba4:	8c 7f       	andi	r24, 0xFC	; 252
     ba6:	85 b9       	out	0x05, r24	; 5
     ba8:	8b b1       	in	r24, 0x0b	; 11
     baa:	84 64       	ori	r24, 0x44	; 68
     bac:	8b b9       	out	0x0b, r24	; 11
     bae:	28 9a       	sbi	0x05, 0	; 5
     bb0:	2c 9a       	sbi	0x05, 4	; 5
     bb2:	2a 9a       	sbi	0x05, 2	; 5
     bb4:	2a 98       	cbi	0x05, 2	; 5
     bb6:	2b 9a       	sbi	0x05, 3	; 5
     bb8:	2d 9a       	sbi	0x05, 5	; 5
     bba:	2c 98       	cbi	0x05, 4	; 5
     bbc:	8b b1       	in	r24, 0x0b	; 11
     bbe:	83 70       	andi	r24, 0x03	; 3
     bc0:	8b b9       	out	0x0b, r24	; 11
     bc2:	85 b1       	in	r24, 0x05	; 5
     bc4:	8c 7f       	andi	r24, 0xFC	; 252
     bc6:	85 b9       	out	0x05, r24	; 5
     bc8:	8b b1       	in	r24, 0x0b	; 11
     bca:	8b b9       	out	0x0b, r24	; 11
     bcc:	85 b1       	in	r24, 0x05	; 5
     bce:	85 b9       	out	0x05, r24	; 5
     bd0:	2c 9a       	sbi	0x05, 4	; 5
     bd2:	2c 98       	cbi	0x05, 4	; 5
     bd4:	8b b1       	in	r24, 0x0b	; 11
     bd6:	83 70       	andi	r24, 0x03	; 3
     bd8:	8b b9       	out	0x0b, r24	; 11
     bda:	85 b1       	in	r24, 0x05	; 5
     bdc:	8c 7f       	andi	r24, 0xFC	; 252
     bde:	85 b9       	out	0x05, r24	; 5
     be0:	8b b1       	in	r24, 0x0b	; 11
     be2:	8c 6b       	ori	r24, 0xBC	; 188
     be4:	8b b9       	out	0x0b, r24	; 11
     be6:	85 b1       	in	r24, 0x05	; 5
     be8:	83 60       	ori	r24, 0x03	; 3
     bea:	85 b9       	out	0x05, r24	; 5
     bec:	2c 9a       	sbi	0x05, 4	; 5
     bee:	2a 9a       	sbi	0x05, 2	; 5
     bf0:	82 e5       	ldi	r24, 0x52	; 82
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     bf8:	2a 98       	cbi	0x05, 2	; 5
     bfa:	2b 9a       	sbi	0x05, 3	; 5
     bfc:	2d 9a       	sbi	0x05, 5	; 5
     bfe:	2c 98       	cbi	0x05, 4	; 5
     c00:	8b b1       	in	r24, 0x0b	; 11
     c02:	83 70       	andi	r24, 0x03	; 3
     c04:	8b b9       	out	0x0b, r24	; 11
     c06:	85 b1       	in	r24, 0x05	; 5
     c08:	8c 7f       	andi	r24, 0xFC	; 252
     c0a:	85 b9       	out	0x05, r24	; 5
     c0c:	8b b1       	in	r24, 0x0b	; 11
     c0e:	8b b9       	out	0x0b, r24	; 11
     c10:	85 b1       	in	r24, 0x05	; 5
     c12:	85 b9       	out	0x05, r24	; 5
     c14:	2c 9a       	sbi	0x05, 4	; 5
     c16:	2c 98       	cbi	0x05, 4	; 5
     c18:	8b b1       	in	r24, 0x0b	; 11
     c1a:	83 70       	andi	r24, 0x03	; 3
     c1c:	8b b9       	out	0x0b, r24	; 11
     c1e:	85 b1       	in	r24, 0x05	; 5
     c20:	8c 7f       	andi	r24, 0xFC	; 252
     c22:	85 b9       	out	0x05, r24	; 5
     c24:	8b b1       	in	r24, 0x0b	; 11
     c26:	8b b9       	out	0x0b, r24	; 11
     c28:	85 b1       	in	r24, 0x05	; 5
     c2a:	85 b9       	out	0x05, r24	; 5
     c2c:	2c 9a       	sbi	0x05, 4	; 5
     c2e:	2a 9a       	sbi	0x05, 2	; 5
     c30:	83 e5       	ldi	r24, 0x53	; 83
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     c38:	2a 98       	cbi	0x05, 2	; 5
     c3a:	2b 9a       	sbi	0x05, 3	; 5
     c3c:	2d 9a       	sbi	0x05, 5	; 5
     c3e:	2c 98       	cbi	0x05, 4	; 5
     c40:	8b b1       	in	r24, 0x0b	; 11
     c42:	83 70       	andi	r24, 0x03	; 3
     c44:	8b b9       	out	0x0b, r24	; 11
     c46:	85 b1       	in	r24, 0x05	; 5
     c48:	8c 7f       	andi	r24, 0xFC	; 252
     c4a:	85 b9       	out	0x05, r24	; 5
     c4c:	5a 9a       	sbi	0x0b, 2	; 11
     c4e:	85 b1       	in	r24, 0x05	; 5
     c50:	85 b9       	out	0x05, r24	; 5
     c52:	2c 9a       	sbi	0x05, 4	; 5
     c54:	2c 98       	cbi	0x05, 4	; 5
     c56:	8b b1       	in	r24, 0x0b	; 11
     c58:	83 70       	andi	r24, 0x03	; 3
     c5a:	8b b9       	out	0x0b, r24	; 11
     c5c:	85 b1       	in	r24, 0x05	; 5
     c5e:	8c 7f       	andi	r24, 0xFC	; 252
     c60:	85 b9       	out	0x05, r24	; 5
     c62:	8b b1       	in	r24, 0x0b	; 11
     c64:	8c 6f       	ori	r24, 0xFC	; 252
     c66:	8b b9       	out	0x0b, r24	; 11
     c68:	85 b1       	in	r24, 0x05	; 5
     c6a:	85 b9       	out	0x05, r24	; 5
     c6c:	2c 9a       	sbi	0x05, 4	; 5
     c6e:	2a 9a       	sbi	0x05, 2	; 5
     c70:	2f ef       	ldi	r18, 0xFF	; 255
     c72:	81 ee       	ldi	r24, 0xE1	; 225
     c74:	94 e0       	ldi	r25, 0x04	; 4
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	80 40       	sbci	r24, 0x00	; 0
     c7a:	90 40       	sbci	r25, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <__stack+0x377>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <__stack+0x381>
     c80:	00 00       	nop
     c82:	80 e6       	ldi	r24, 0x60	; 96
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     c8a:	2a 98       	cbi	0x05, 2	; 5
     c8c:	2b 9a       	sbi	0x05, 3	; 5
     c8e:	2d 9a       	sbi	0x05, 5	; 5
     c90:	2c 98       	cbi	0x05, 4	; 5
     c92:	8b b1       	in	r24, 0x0b	; 11
     c94:	83 70       	andi	r24, 0x03	; 3
     c96:	8b b9       	out	0x0b, r24	; 11
     c98:	85 b1       	in	r24, 0x05	; 5
     c9a:	8c 7f       	andi	r24, 0xFC	; 252
     c9c:	85 b9       	out	0x05, r24	; 5
     c9e:	8b b1       	in	r24, 0x0b	; 11
     ca0:	8c 69       	ori	r24, 0x9C	; 156
     ca2:	8b b9       	out	0x0b, r24	; 11
     ca4:	29 9a       	sbi	0x05, 1	; 5
     ca6:	2c 9a       	sbi	0x05, 4	; 5
     ca8:	2c 98       	cbi	0x05, 4	; 5
     caa:	8b b1       	in	r24, 0x0b	; 11
     cac:	83 70       	andi	r24, 0x03	; 3
     cae:	8b b9       	out	0x0b, r24	; 11
     cb0:	85 b1       	in	r24, 0x05	; 5
     cb2:	8c 7f       	andi	r24, 0xFC	; 252
     cb4:	85 b9       	out	0x05, r24	; 5
     cb6:	8b b1       	in	r24, 0x0b	; 11
     cb8:	8b b9       	out	0x0b, r24	; 11
     cba:	85 b1       	in	r24, 0x05	; 5
     cbc:	85 b9       	out	0x05, r24	; 5
     cbe:	2c 9a       	sbi	0x05, 4	; 5
     cc0:	2a 9a       	sbi	0x05, 2	; 5
     cc2:	81 e6       	ldi	r24, 0x61	; 97
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     cca:	2a 98       	cbi	0x05, 2	; 5
     ccc:	2b 9a       	sbi	0x05, 3	; 5
     cce:	2d 9a       	sbi	0x05, 5	; 5
     cd0:	2c 98       	cbi	0x05, 4	; 5
     cd2:	8b b1       	in	r24, 0x0b	; 11
     cd4:	83 70       	andi	r24, 0x03	; 3
     cd6:	8b b9       	out	0x0b, r24	; 11
     cd8:	85 b1       	in	r24, 0x05	; 5
     cda:	8c 7f       	andi	r24, 0xFC	; 252
     cdc:	85 b9       	out	0x05, r24	; 5
     cde:	8b b1       	in	r24, 0x0b	; 11
     ce0:	8b b9       	out	0x0b, r24	; 11
     ce2:	85 b1       	in	r24, 0x05	; 5
     ce4:	85 b9       	out	0x05, r24	; 5
     ce6:	2c 9a       	sbi	0x05, 4	; 5
     ce8:	2c 98       	cbi	0x05, 4	; 5
     cea:	8b b1       	in	r24, 0x0b	; 11
     cec:	83 70       	andi	r24, 0x03	; 3
     cee:	8b b9       	out	0x0b, r24	; 11
     cf0:	85 b1       	in	r24, 0x05	; 5
     cf2:	8c 7f       	andi	r24, 0xFC	; 252
     cf4:	85 b9       	out	0x05, r24	; 5
     cf6:	5a 9a       	sbi	0x0b, 2	; 11
     cf8:	85 b1       	in	r24, 0x05	; 5
     cfa:	85 b9       	out	0x05, r24	; 5
     cfc:	2c 9a       	sbi	0x05, 4	; 5
     cfe:	2a 9a       	sbi	0x05, 2	; 5
     d00:	80 e9       	ldi	r24, 0x90	; 144
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     d08:	2a 98       	cbi	0x05, 2	; 5
     d0a:	2b 9a       	sbi	0x05, 3	; 5
     d0c:	2d 9a       	sbi	0x05, 5	; 5
     d0e:	2c 98       	cbi	0x05, 4	; 5
     d10:	8b b1       	in	r24, 0x0b	; 11
     d12:	83 70       	andi	r24, 0x03	; 3
     d14:	8b b9       	out	0x0b, r24	; 11
     d16:	85 b1       	in	r24, 0x05	; 5
     d18:	8c 7f       	andi	r24, 0xFC	; 252
     d1a:	85 b9       	out	0x05, r24	; 5
     d1c:	8b b1       	in	r24, 0x0b	; 11
     d1e:	8b b9       	out	0x0b, r24	; 11
     d20:	85 b1       	in	r24, 0x05	; 5
     d22:	85 b9       	out	0x05, r24	; 5
     d24:	2c 9a       	sbi	0x05, 4	; 5
     d26:	2c 98       	cbi	0x05, 4	; 5
     d28:	8b b1       	in	r24, 0x0b	; 11
     d2a:	83 70       	andi	r24, 0x03	; 3
     d2c:	8b b9       	out	0x0b, r24	; 11
     d2e:	85 b1       	in	r24, 0x05	; 5
     d30:	8c 7f       	andi	r24, 0xFC	; 252
     d32:	85 b9       	out	0x05, r24	; 5
     d34:	8b b1       	in	r24, 0x0b	; 11
     d36:	88 6e       	ori	r24, 0xE8	; 232
     d38:	8b b9       	out	0x0b, r24	; 11
     d3a:	85 b1       	in	r24, 0x05	; 5
     d3c:	85 b9       	out	0x05, r24	; 5
     d3e:	2c 9a       	sbi	0x05, 4	; 5
     d40:	2a 9a       	sbi	0x05, 2	; 5
     d42:	85 e9       	ldi	r24, 0x95	; 149
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     d4a:	2a 98       	cbi	0x05, 2	; 5
     d4c:	2b 9a       	sbi	0x05, 3	; 5
     d4e:	2d 9a       	sbi	0x05, 5	; 5
     d50:	2c 98       	cbi	0x05, 4	; 5
     d52:	8b b1       	in	r24, 0x0b	; 11
     d54:	83 70       	andi	r24, 0x03	; 3
     d56:	8b b9       	out	0x0b, r24	; 11
     d58:	85 b1       	in	r24, 0x05	; 5
     d5a:	8c 7f       	andi	r24, 0xFC	; 252
     d5c:	85 b9       	out	0x05, r24	; 5
     d5e:	5b 9a       	sbi	0x0b, 3	; 11
     d60:	85 b1       	in	r24, 0x05	; 5
     d62:	85 b9       	out	0x05, r24	; 5
     d64:	2c 9a       	sbi	0x05, 4	; 5
     d66:	2c 98       	cbi	0x05, 4	; 5
     d68:	8b b1       	in	r24, 0x0b	; 11
     d6a:	83 70       	andi	r24, 0x03	; 3
     d6c:	8b b9       	out	0x0b, r24	; 11
     d6e:	85 b1       	in	r24, 0x05	; 5
     d70:	8c 7f       	andi	r24, 0xFC	; 252
     d72:	85 b9       	out	0x05, r24	; 5
     d74:	8b b1       	in	r24, 0x0b	; 11
     d76:	88 67       	ori	r24, 0x78	; 120
     d78:	8b b9       	out	0x0b, r24	; 11
     d7a:	85 b1       	in	r24, 0x05	; 5
     d7c:	85 b9       	out	0x05, r24	; 5
     d7e:	2c 9a       	sbi	0x05, 4	; 5
     d80:	2a 9a       	sbi	0x05, 2	; 5
     d82:	80 e8       	ldi	r24, 0x80	; 128
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     d8a:	2a 98       	cbi	0x05, 2	; 5
     d8c:	2b 9a       	sbi	0x05, 3	; 5
     d8e:	2d 9a       	sbi	0x05, 5	; 5
     d90:	2c 98       	cbi	0x05, 4	; 5
     d92:	8b b1       	in	r24, 0x0b	; 11
     d94:	83 70       	andi	r24, 0x03	; 3
     d96:	8b b9       	out	0x0b, r24	; 11
     d98:	85 b1       	in	r24, 0x05	; 5
     d9a:	8c 7f       	andi	r24, 0xFC	; 252
     d9c:	85 b9       	out	0x05, r24	; 5
     d9e:	8b b1       	in	r24, 0x0b	; 11
     da0:	8b b9       	out	0x0b, r24	; 11
     da2:	85 b1       	in	r24, 0x05	; 5
     da4:	85 b9       	out	0x05, r24	; 5
     da6:	2c 9a       	sbi	0x05, 4	; 5
     da8:	2c 98       	cbi	0x05, 4	; 5
     daa:	8b b1       	in	r24, 0x0b	; 11
     dac:	83 70       	andi	r24, 0x03	; 3
     dae:	8b b9       	out	0x0b, r24	; 11
     db0:	85 b1       	in	r24, 0x05	; 5
     db2:	8c 7f       	andi	r24, 0xFC	; 252
     db4:	85 b9       	out	0x05, r24	; 5
     db6:	8b b1       	in	r24, 0x0b	; 11
     db8:	8b b9       	out	0x0b, r24	; 11
     dba:	85 b1       	in	r24, 0x05	; 5
     dbc:	85 b9       	out	0x05, r24	; 5
     dbe:	2c 9a       	sbi	0x05, 4	; 5
     dc0:	2a 9a       	sbi	0x05, 2	; 5
     dc2:	81 e8       	ldi	r24, 0x81	; 129
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     dca:	2a 98       	cbi	0x05, 2	; 5
     dcc:	2b 9a       	sbi	0x05, 3	; 5
     dce:	2d 9a       	sbi	0x05, 5	; 5
     dd0:	2c 98       	cbi	0x05, 4	; 5
     dd2:	8b b1       	in	r24, 0x0b	; 11
     dd4:	83 70       	andi	r24, 0x03	; 3
     dd6:	8b b9       	out	0x0b, r24	; 11
     dd8:	85 b1       	in	r24, 0x05	; 5
     dda:	8c 7f       	andi	r24, 0xFC	; 252
     ddc:	85 b9       	out	0x05, r24	; 5
     dde:	8b b1       	in	r24, 0x0b	; 11
     de0:	8b b9       	out	0x0b, r24	; 11
     de2:	85 b1       	in	r24, 0x05	; 5
     de4:	85 b9       	out	0x05, r24	; 5
     de6:	2c 9a       	sbi	0x05, 4	; 5
     de8:	2c 98       	cbi	0x05, 4	; 5
     dea:	8b b1       	in	r24, 0x0b	; 11
     dec:	83 70       	andi	r24, 0x03	; 3
     dee:	8b b9       	out	0x0b, r24	; 11
     df0:	85 b1       	in	r24, 0x05	; 5
     df2:	8c 7f       	andi	r24, 0xFC	; 252
     df4:	85 b9       	out	0x05, r24	; 5
     df6:	8b b1       	in	r24, 0x0b	; 11
     df8:	8b b9       	out	0x0b, r24	; 11
     dfa:	85 b1       	in	r24, 0x05	; 5
     dfc:	85 b9       	out	0x05, r24	; 5
     dfe:	2c 9a       	sbi	0x05, 4	; 5
     e00:	2a 9a       	sbi	0x05, 2	; 5
     e02:	82 e8       	ldi	r24, 0x82	; 130
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     e0a:	2a 98       	cbi	0x05, 2	; 5
     e0c:	2b 9a       	sbi	0x05, 3	; 5
     e0e:	2d 9a       	sbi	0x05, 5	; 5
     e10:	2c 98       	cbi	0x05, 4	; 5
     e12:	8b b1       	in	r24, 0x0b	; 11
     e14:	83 70       	andi	r24, 0x03	; 3
     e16:	8b b9       	out	0x0b, r24	; 11
     e18:	85 b1       	in	r24, 0x05	; 5
     e1a:	8c 7f       	andi	r24, 0xFC	; 252
     e1c:	85 b9       	out	0x05, r24	; 5
     e1e:	8b b1       	in	r24, 0x0b	; 11
     e20:	8b b9       	out	0x0b, r24	; 11
     e22:	85 b1       	in	r24, 0x05	; 5
     e24:	85 b9       	out	0x05, r24	; 5
     e26:	2c 9a       	sbi	0x05, 4	; 5
     e28:	2c 98       	cbi	0x05, 4	; 5
     e2a:	8b b1       	in	r24, 0x0b	; 11
     e2c:	83 70       	andi	r24, 0x03	; 3
     e2e:	8b b9       	out	0x0b, r24	; 11
     e30:	85 b1       	in	r24, 0x05	; 5
     e32:	8c 7f       	andi	r24, 0xFC	; 252
     e34:	85 b9       	out	0x05, r24	; 5
     e36:	8b b1       	in	r24, 0x0b	; 11
     e38:	8b b9       	out	0x0b, r24	; 11
     e3a:	85 b1       	in	r24, 0x05	; 5
     e3c:	85 b9       	out	0x05, r24	; 5
     e3e:	2c 9a       	sbi	0x05, 4	; 5
     e40:	2a 9a       	sbi	0x05, 2	; 5
     e42:	83 e8       	ldi	r24, 0x83	; 131
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     e4a:	2a 98       	cbi	0x05, 2	; 5
     e4c:	2b 9a       	sbi	0x05, 3	; 5
     e4e:	2d 9a       	sbi	0x05, 5	; 5
     e50:	2c 98       	cbi	0x05, 4	; 5
     e52:	8b b1       	in	r24, 0x0b	; 11
     e54:	83 70       	andi	r24, 0x03	; 3
     e56:	8b b9       	out	0x0b, r24	; 11
     e58:	85 b1       	in	r24, 0x05	; 5
     e5a:	8c 7f       	andi	r24, 0xFC	; 252
     e5c:	85 b9       	out	0x05, r24	; 5
     e5e:	8b b1       	in	r24, 0x0b	; 11
     e60:	8b b9       	out	0x0b, r24	; 11
     e62:	85 b1       	in	r24, 0x05	; 5
     e64:	85 b9       	out	0x05, r24	; 5
     e66:	2c 9a       	sbi	0x05, 4	; 5
     e68:	2c 98       	cbi	0x05, 4	; 5
     e6a:	8b b1       	in	r24, 0x0b	; 11
     e6c:	83 70       	andi	r24, 0x03	; 3
     e6e:	8b b9       	out	0x0b, r24	; 11
     e70:	85 b1       	in	r24, 0x05	; 5
     e72:	8c 7f       	andi	r24, 0xFC	; 252
     e74:	85 b9       	out	0x05, r24	; 5
     e76:	8b b1       	in	r24, 0x0b	; 11
     e78:	8b b9       	out	0x0b, r24	; 11
     e7a:	85 b1       	in	r24, 0x05	; 5
     e7c:	85 b9       	out	0x05, r24	; 5
     e7e:	2c 9a       	sbi	0x05, 4	; 5
     e80:	2a 9a       	sbi	0x05, 2	; 5
     e82:	2a 98       	cbi	0x05, 2	; 5
     e84:	2b 98       	cbi	0x05, 3	; 5
     e86:	2d 9a       	sbi	0x05, 5	; 5
     e88:	2c 9a       	sbi	0x05, 4	; 5
     e8a:	2c 98       	cbi	0x05, 4	; 5
     e8c:	8b b1       	in	r24, 0x0b	; 11
     e8e:	83 70       	andi	r24, 0x03	; 3
     e90:	8b b9       	out	0x0b, r24	; 11
     e92:	85 b1       	in	r24, 0x05	; 5
     e94:	8c 7f       	andi	r24, 0xFC	; 252
     e96:	85 b9       	out	0x05, r24	; 5
     e98:	8b b1       	in	r24, 0x0b	; 11
     e9a:	8b b9       	out	0x0b, r24	; 11
     e9c:	85 b1       	in	r24, 0x05	; 5
     e9e:	85 b9       	out	0x05, r24	; 5
     ea0:	2c 9a       	sbi	0x05, 4	; 5
     ea2:	2c 98       	cbi	0x05, 4	; 5
     ea4:	8b b1       	in	r24, 0x0b	; 11
     ea6:	83 70       	andi	r24, 0x03	; 3
     ea8:	8b b9       	out	0x0b, r24	; 11
     eaa:	85 b1       	in	r24, 0x05	; 5
     eac:	8c 7f       	andi	r24, 0xFC	; 252
     eae:	85 b9       	out	0x05, r24	; 5
     eb0:	5c 9a       	sbi	0x0b, 4	; 11
     eb2:	29 9a       	sbi	0x05, 1	; 5
     eb4:	2c 9a       	sbi	0x05, 4	; 5
     eb6:	2a 9a       	sbi	0x05, 2	; 5
     eb8:	2a 98       	cbi	0x05, 2	; 5
     eba:	2b 9a       	sbi	0x05, 3	; 5
     ebc:	2d 9a       	sbi	0x05, 5	; 5
     ebe:	2c 98       	cbi	0x05, 4	; 5
     ec0:	8b b1       	in	r24, 0x0b	; 11
     ec2:	83 70       	andi	r24, 0x03	; 3
     ec4:	8b b9       	out	0x0b, r24	; 11
     ec6:	85 b1       	in	r24, 0x05	; 5
     ec8:	8c 7f       	andi	r24, 0xFC	; 252
     eca:	85 b9       	out	0x05, r24	; 5
     ecc:	8b b1       	in	r24, 0x0b	; 11
     ece:	8b b9       	out	0x0b, r24	; 11
     ed0:	85 b1       	in	r24, 0x05	; 5
     ed2:	85 b9       	out	0x05, r24	; 5
     ed4:	2c 9a       	sbi	0x05, 4	; 5
     ed6:	2c 98       	cbi	0x05, 4	; 5
     ed8:	8b b1       	in	r24, 0x0b	; 11
     eda:	83 70       	andi	r24, 0x03	; 3
     edc:	8b b9       	out	0x0b, r24	; 11
     ede:	85 b1       	in	r24, 0x05	; 5
     ee0:	8c 7f       	andi	r24, 0xFC	; 252
     ee2:	85 b9       	out	0x05, r24	; 5
     ee4:	8b b1       	in	r24, 0x0b	; 11
     ee6:	8b b9       	out	0x0b, r24	; 11
     ee8:	85 b1       	in	r24, 0x05	; 5
     eea:	85 b9       	out	0x05, r24	; 5
     eec:	2c 9a       	sbi	0x05, 4	; 5
     eee:	2a 9a       	sbi	0x05, 2	; 5
     ef0:	85 e8       	ldi	r24, 0x85	; 133
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
     ef8:	2a 98       	cbi	0x05, 2	; 5
     efa:	2b 9a       	sbi	0x05, 3	; 5
     efc:	2d 9a       	sbi	0x05, 5	; 5
     efe:	2c 98       	cbi	0x05, 4	; 5
     f00:	8b b1       	in	r24, 0x0b	; 11
     f02:	83 70       	andi	r24, 0x03	; 3
     f04:	8b b9       	out	0x0b, r24	; 11
     f06:	85 b1       	in	r24, 0x05	; 5
     f08:	8c 7f       	andi	r24, 0xFC	; 252
     f0a:	85 b9       	out	0x05, r24	; 5
     f0c:	8b b1       	in	r24, 0x0b	; 11
     f0e:	8b b9       	out	0x0b, r24	; 11
     f10:	85 b1       	in	r24, 0x05	; 5
     f12:	85 b9       	out	0x05, r24	; 5
     f14:	2c 9a       	sbi	0x05, 4	; 5
     f16:	2c 98       	cbi	0x05, 4	; 5
     f18:	8b b1       	in	r24, 0x0b	; 11
     f1a:	83 70       	andi	r24, 0x03	; 3
     f1c:	8b b9       	out	0x0b, r24	; 11
     f1e:	85 b1       	in	r24, 0x05	; 5
     f20:	8c 7f       	andi	r24, 0xFC	; 252
     f22:	85 b9       	out	0x05, r24	; 5
     f24:	8b b1       	in	r24, 0x0b	; 11
     f26:	8b b9       	out	0x0b, r24	; 11
     f28:	85 b1       	in	r24, 0x05	; 5
     f2a:	85 b9       	out	0x05, r24	; 5
     f2c:	2c 9a       	sbi	0x05, 4	; 5
     f2e:	2a 9a       	sbi	0x05, 2	; 5
     f30:	2a 98       	cbi	0x05, 2	; 5
     f32:	2b 98       	cbi	0x05, 3	; 5
     f34:	2d 9a       	sbi	0x05, 5	; 5
     f36:	2c 9a       	sbi	0x05, 4	; 5
     f38:	2c 98       	cbi	0x05, 4	; 5
     f3a:	8b b1       	in	r24, 0x0b	; 11
     f3c:	83 70       	andi	r24, 0x03	; 3
     f3e:	8b b9       	out	0x0b, r24	; 11
     f40:	85 b1       	in	r24, 0x05	; 5
     f42:	8c 7f       	andi	r24, 0xFC	; 252
     f44:	85 b9       	out	0x05, r24	; 5
     f46:	8b b1       	in	r24, 0x0b	; 11
     f48:	8b b9       	out	0x0b, r24	; 11
     f4a:	85 b1       	in	r24, 0x05	; 5
     f4c:	85 b9       	out	0x05, r24	; 5
     f4e:	2c 9a       	sbi	0x05, 4	; 5
     f50:	2c 98       	cbi	0x05, 4	; 5
     f52:	8b b1       	in	r24, 0x0b	; 11
     f54:	83 70       	andi	r24, 0x03	; 3
     f56:	8b b9       	out	0x0b, r24	; 11
     f58:	85 b1       	in	r24, 0x05	; 5
     f5a:	8c 7f       	andi	r24, 0xFC	; 252
     f5c:	85 b9       	out	0x05, r24	; 5
     f5e:	8b b1       	in	r24, 0x0b	; 11
     f60:	8c 6f       	ori	r24, 0xFC	; 252
     f62:	8b b9       	out	0x0b, r24	; 11
     f64:	85 b1       	in	r24, 0x05	; 5
     f66:	83 60       	ori	r24, 0x03	; 3
     f68:	85 b9       	out	0x05, r24	; 5
     f6a:	2c 9a       	sbi	0x05, 4	; 5
     f6c:	2a 9a       	sbi	0x05, 2	; 5
     f6e:	2a 98       	cbi	0x05, 2	; 5
     f70:	2b 9a       	sbi	0x05, 3	; 5
     f72:	2d 9a       	sbi	0x05, 5	; 5
     f74:	2c 98       	cbi	0x05, 4	; 5
     f76:	8b b1       	in	r24, 0x0b	; 11
     f78:	83 70       	andi	r24, 0x03	; 3
     f7a:	8b b9       	out	0x0b, r24	; 11
     f7c:	85 b1       	in	r24, 0x05	; 5
     f7e:	8c 7f       	andi	r24, 0xFC	; 252
     f80:	85 b9       	out	0x05, r24	; 5
     f82:	8b b1       	in	r24, 0x0b	; 11
     f84:	8b b9       	out	0x0b, r24	; 11
     f86:	85 b1       	in	r24, 0x05	; 5
     f88:	85 b9       	out	0x05, r24	; 5
     f8a:	2c 9a       	sbi	0x05, 4	; 5
     f8c:	2c 98       	cbi	0x05, 4	; 5
     f8e:	8b b1       	in	r24, 0x0b	; 11
     f90:	83 70       	andi	r24, 0x03	; 3
     f92:	8b b9       	out	0x0b, r24	; 11
     f94:	85 b1       	in	r24, 0x05	; 5
     f96:	8c 7f       	andi	r24, 0xFC	; 252
     f98:	85 b9       	out	0x05, r24	; 5
     f9a:	5a 9a       	sbi	0x0b, 2	; 11
     f9c:	85 b1       	in	r24, 0x05	; 5
     f9e:	85 b9       	out	0x05, r24	; 5
     fa0:	2c 9a       	sbi	0x05, 4	; 5
     fa2:	2a 9a       	sbi	0x05, 2	; 5
     fa4:	2a 98       	cbi	0x05, 2	; 5
     fa6:	2b 98       	cbi	0x05, 3	; 5
     fa8:	2d 9a       	sbi	0x05, 5	; 5
     faa:	2c 9a       	sbi	0x05, 4	; 5
     fac:	2c 98       	cbi	0x05, 4	; 5
     fae:	8b b1       	in	r24, 0x0b	; 11
     fb0:	83 70       	andi	r24, 0x03	; 3
     fb2:	8b b9       	out	0x0b, r24	; 11
     fb4:	85 b1       	in	r24, 0x05	; 5
     fb6:	8c 7f       	andi	r24, 0xFC	; 252
     fb8:	85 b9       	out	0x05, r24	; 5
     fba:	8b b1       	in	r24, 0x0b	; 11
     fbc:	8b b9       	out	0x0b, r24	; 11
     fbe:	85 b1       	in	r24, 0x05	; 5
     fc0:	85 b9       	out	0x05, r24	; 5
     fc2:	2c 9a       	sbi	0x05, 4	; 5
     fc4:	2c 98       	cbi	0x05, 4	; 5
     fc6:	8b b1       	in	r24, 0x0b	; 11
     fc8:	83 70       	andi	r24, 0x03	; 3
     fca:	8b b9       	out	0x0b, r24	; 11
     fcc:	85 b1       	in	r24, 0x05	; 5
     fce:	8c 7f       	andi	r24, 0xFC	; 252
     fd0:	85 b9       	out	0x05, r24	; 5
     fd2:	8b b1       	in	r24, 0x0b	; 11
     fd4:	80 6c       	ori	r24, 0xC0	; 192
     fd6:	8b b9       	out	0x0b, r24	; 11
     fd8:	29 9a       	sbi	0x05, 1	; 5
     fda:	2c 9a       	sbi	0x05, 4	; 5
     fdc:	2a 9a       	sbi	0x05, 2	; 5
     fde:	2a 98       	cbi	0x05, 2	; 5
     fe0:	2b 9a       	sbi	0x05, 3	; 5
     fe2:	2d 9a       	sbi	0x05, 5	; 5
     fe4:	2c 98       	cbi	0x05, 4	; 5
     fe6:	8b b1       	in	r24, 0x0b	; 11
     fe8:	83 70       	andi	r24, 0x03	; 3
     fea:	8b b9       	out	0x0b, r24	; 11
     fec:	85 b1       	in	r24, 0x05	; 5
     fee:	8c 7f       	andi	r24, 0xFC	; 252
     ff0:	85 b9       	out	0x05, r24	; 5
     ff2:	8b b1       	in	r24, 0x0b	; 11
     ff4:	80 65       	ori	r24, 0x50	; 80
     ff6:	8b b9       	out	0x0b, r24	; 11
     ff8:	85 b1       	in	r24, 0x05	; 5
     ffa:	85 b9       	out	0x05, r24	; 5
     ffc:	2c 9a       	sbi	0x05, 4	; 5
     ffe:	2c 98       	cbi	0x05, 4	; 5
    1000:	8b b1       	in	r24, 0x0b	; 11
    1002:	83 70       	andi	r24, 0x03	; 3
    1004:	8b b9       	out	0x0b, r24	; 11
    1006:	85 b1       	in	r24, 0x05	; 5
    1008:	8c 7f       	andi	r24, 0xFC	; 252
    100a:	85 b9       	out	0x05, r24	; 5
    100c:	8b b1       	in	r24, 0x0b	; 11
    100e:	84 63       	ori	r24, 0x34	; 52
    1010:	8b b9       	out	0x0b, r24	; 11
    1012:	85 b1       	in	r24, 0x05	; 5
    1014:	85 b9       	out	0x05, r24	; 5
    1016:	2c 9a       	sbi	0x05, 4	; 5
    1018:	2a 9a       	sbi	0x05, 2	; 5
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
    1022:	2a 98       	cbi	0x05, 2	; 5
    1024:	2b 9a       	sbi	0x05, 3	; 5
    1026:	2d 9a       	sbi	0x05, 5	; 5
    1028:	2c 98       	cbi	0x05, 4	; 5
    102a:	8b b1       	in	r24, 0x0b	; 11
    102c:	83 70       	andi	r24, 0x03	; 3
    102e:	8b b9       	out	0x0b, r24	; 11
    1030:	85 b1       	in	r24, 0x05	; 5
    1032:	8c 7f       	andi	r24, 0xFC	; 252
    1034:	85 b9       	out	0x05, r24	; 5
    1036:	8b b1       	in	r24, 0x0b	; 11
    1038:	8b b9       	out	0x0b, r24	; 11
    103a:	85 b1       	in	r24, 0x05	; 5
    103c:	85 b9       	out	0x05, r24	; 5
    103e:	2c 9a       	sbi	0x05, 4	; 5
    1040:	2c 98       	cbi	0x05, 4	; 5
    1042:	8b b1       	in	r24, 0x0b	; 11
    1044:	83 70       	andi	r24, 0x03	; 3
    1046:	8b b9       	out	0x0b, r24	; 11
    1048:	85 b1       	in	r24, 0x05	; 5
    104a:	8c 7f       	andi	r24, 0xFC	; 252
    104c:	85 b9       	out	0x05, r24	; 5
    104e:	8b b1       	in	r24, 0x0b	; 11
    1050:	8b b9       	out	0x0b, r24	; 11
    1052:	85 b1       	in	r24, 0x05	; 5
    1054:	85 b9       	out	0x05, r24	; 5
    1056:	2c 9a       	sbi	0x05, 4	; 5
    1058:	2a 9a       	sbi	0x05, 2	; 5
    105a:	2f ef       	ldi	r18, 0xFF	; 255
    105c:	81 ee       	ldi	r24, 0xE1	; 225
    105e:	94 e0       	ldi	r25, 0x04	; 4
    1060:	21 50       	subi	r18, 0x01	; 1
    1062:	80 40       	sbci	r24, 0x00	; 0
    1064:	90 40       	sbci	r25, 0x00	; 0
    1066:	e1 f7       	brne	.-8      	; 0x1060 <__stack+0x761>
    1068:	00 c0       	rjmp	.+0      	; 0x106a <__stack+0x76b>
    106a:	00 00       	nop
    106c:	2a 98       	cbi	0x05, 2	; 5
    106e:	2b 98       	cbi	0x05, 3	; 5
    1070:	2d 9a       	sbi	0x05, 5	; 5
    1072:	2c 9a       	sbi	0x05, 4	; 5
    1074:	2c 98       	cbi	0x05, 4	; 5
    1076:	8b b1       	in	r24, 0x0b	; 11
    1078:	83 70       	andi	r24, 0x03	; 3
    107a:	8b b9       	out	0x0b, r24	; 11
    107c:	85 b1       	in	r24, 0x05	; 5
    107e:	8c 7f       	andi	r24, 0xFC	; 252
    1080:	85 b9       	out	0x05, r24	; 5
    1082:	8b b1       	in	r24, 0x0b	; 11
    1084:	8b b9       	out	0x0b, r24	; 11
    1086:	85 b1       	in	r24, 0x05	; 5
    1088:	85 b9       	out	0x05, r24	; 5
    108a:	2c 9a       	sbi	0x05, 4	; 5
    108c:	2c 98       	cbi	0x05, 4	; 5
    108e:	8b b1       	in	r24, 0x0b	; 11
    1090:	83 70       	andi	r24, 0x03	; 3
    1092:	8b b9       	out	0x0b, r24	; 11
    1094:	85 b1       	in	r24, 0x05	; 5
    1096:	8c 7f       	andi	r24, 0xFC	; 252
    1098:	85 b9       	out	0x05, r24	; 5
    109a:	8b b1       	in	r24, 0x0b	; 11
    109c:	8c 61       	ori	r24, 0x1C	; 28
    109e:	8b b9       	out	0x0b, r24	; 11
    10a0:	85 b1       	in	r24, 0x05	; 5
    10a2:	85 b9       	out	0x05, r24	; 5
    10a4:	2c 9a       	sbi	0x05, 4	; 5
    10a6:	2a 9a       	sbi	0x05, 2	; 5
    10a8:	2a 98       	cbi	0x05, 2	; 5
    10aa:	2b 9a       	sbi	0x05, 3	; 5
    10ac:	2d 9a       	sbi	0x05, 5	; 5
    10ae:	2c 98       	cbi	0x05, 4	; 5
    10b0:	8b b1       	in	r24, 0x0b	; 11
    10b2:	83 70       	andi	r24, 0x03	; 3
    10b4:	8b b9       	out	0x0b, r24	; 11
    10b6:	85 b1       	in	r24, 0x05	; 5
    10b8:	8c 7f       	andi	r24, 0xFC	; 252
    10ba:	85 b9       	out	0x05, r24	; 5
    10bc:	5a 9a       	sbi	0x0b, 2	; 11
    10be:	85 b1       	in	r24, 0x05	; 5
    10c0:	85 b9       	out	0x05, r24	; 5
    10c2:	2c 9a       	sbi	0x05, 4	; 5
    10c4:	2c 98       	cbi	0x05, 4	; 5
    10c6:	8b b1       	in	r24, 0x0b	; 11
    10c8:	83 70       	andi	r24, 0x03	; 3
    10ca:	8b b9       	out	0x0b, r24	; 11
    10cc:	85 b1       	in	r24, 0x05	; 5
    10ce:	8c 7f       	andi	r24, 0xFC	; 252
    10d0:	85 b9       	out	0x05, r24	; 5
    10d2:	8b b1       	in	r24, 0x0b	; 11
    10d4:	8c 6c       	ori	r24, 0xCC	; 204
    10d6:	8b b9       	out	0x0b, r24	; 11
    10d8:	85 b1       	in	r24, 0x05	; 5
    10da:	85 b9       	out	0x05, r24	; 5
    10dc:	2c 9a       	sbi	0x05, 4	; 5
    10de:	2a 9a       	sbi	0x05, 2	; 5
    10e0:	2f ef       	ldi	r18, 0xFF	; 255
    10e2:	80 e7       	ldi	r24, 0x70	; 112
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	21 50       	subi	r18, 0x01	; 1
    10e8:	80 40       	sbci	r24, 0x00	; 0
    10ea:	90 40       	sbci	r25, 0x00	; 0
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <__stack+0x7e7>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <__stack+0x7f1>
    10f0:	00 00       	nop
    10f2:	2a 98       	cbi	0x05, 2	; 5
    10f4:	2b 98       	cbi	0x05, 3	; 5
    10f6:	2d 9a       	sbi	0x05, 5	; 5
    10f8:	2c 9a       	sbi	0x05, 4	; 5
    10fa:	2c 98       	cbi	0x05, 4	; 5
    10fc:	8b b1       	in	r24, 0x0b	; 11
    10fe:	83 70       	andi	r24, 0x03	; 3
    1100:	8b b9       	out	0x0b, r24	; 11
    1102:	85 b1       	in	r24, 0x05	; 5
    1104:	8c 7f       	andi	r24, 0xFC	; 252
    1106:	85 b9       	out	0x05, r24	; 5
    1108:	8b b1       	in	r24, 0x0b	; 11
    110a:	8b b9       	out	0x0b, r24	; 11
    110c:	85 b1       	in	r24, 0x05	; 5
    110e:	85 b9       	out	0x05, r24	; 5
    1110:	2c 9a       	sbi	0x05, 4	; 5
    1112:	2c 98       	cbi	0x05, 4	; 5
    1114:	8b b1       	in	r24, 0x0b	; 11
    1116:	83 70       	andi	r24, 0x03	; 3
    1118:	8b b9       	out	0x0b, r24	; 11
    111a:	85 b1       	in	r24, 0x05	; 5
    111c:	8c 7f       	andi	r24, 0xFC	; 252
    111e:	85 b9       	out	0x05, r24	; 5
    1120:	5e 9a       	sbi	0x0b, 6	; 11
    1122:	85 b1       	in	r24, 0x05	; 5
    1124:	85 b9       	out	0x05, r24	; 5
    1126:	2c 9a       	sbi	0x05, 4	; 5
    1128:	2a 9a       	sbi	0x05, 2	; 5
    112a:	2a 98       	cbi	0x05, 2	; 5
    112c:	2b 9a       	sbi	0x05, 3	; 5
    112e:	2d 9a       	sbi	0x05, 5	; 5
    1130:	2c 98       	cbi	0x05, 4	; 5
    1132:	8b b1       	in	r24, 0x0b	; 11
    1134:	83 70       	andi	r24, 0x03	; 3
    1136:	8b b9       	out	0x0b, r24	; 11
    1138:	85 b1       	in	r24, 0x05	; 5
    113a:	8c 7f       	andi	r24, 0xFC	; 252
    113c:	85 b9       	out	0x05, r24	; 5
    113e:	8b b1       	in	r24, 0x0b	; 11
    1140:	80 65       	ori	r24, 0x50	; 80
    1142:	8b b9       	out	0x0b, r24	; 11
    1144:	85 b1       	in	r24, 0x05	; 5
    1146:	85 b9       	out	0x05, r24	; 5
    1148:	2c 9a       	sbi	0x05, 4	; 5
    114a:	2c 98       	cbi	0x05, 4	; 5
    114c:	8b b1       	in	r24, 0x0b	; 11
    114e:	83 70       	andi	r24, 0x03	; 3
    1150:	8b b9       	out	0x0b, r24	; 11
    1152:	85 b1       	in	r24, 0x05	; 5
    1154:	8c 7f       	andi	r24, 0xFC	; 252
    1156:	85 b9       	out	0x05, r24	; 5
    1158:	5f 9a       	sbi	0x0b, 7	; 11
    115a:	85 b1       	in	r24, 0x05	; 5
    115c:	83 60       	ori	r24, 0x03	; 3
    115e:	85 b9       	out	0x05, r24	; 5
    1160:	2c 9a       	sbi	0x05, 4	; 5
    1162:	2a 9a       	sbi	0x05, 2	; 5
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	81 ee       	ldi	r24, 0xE1	; 225
    1168:	94 e0       	ldi	r25, 0x04	; 4
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	80 40       	sbci	r24, 0x00	; 0
    116e:	90 40       	sbci	r25, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <__stack+0x86b>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <__stack+0x875>
    1174:	00 00       	nop
    1176:	87 e0       	ldi	r24, 0x07	; 7
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z12send_commandj>
    117e:	2a 98       	cbi	0x05, 2	; 5
    1180:	2b 9a       	sbi	0x05, 3	; 5
    1182:	2d 9a       	sbi	0x05, 5	; 5
    1184:	2c 98       	cbi	0x05, 4	; 5
    1186:	8b b1       	in	r24, 0x0b	; 11
    1188:	83 70       	andi	r24, 0x03	; 3
    118a:	8b b9       	out	0x0b, r24	; 11
    118c:	85 b1       	in	r24, 0x05	; 5
    118e:	8c 7f       	andi	r24, 0xFC	; 252
    1190:	85 b9       	out	0x05, r24	; 5
    1192:	5a 9a       	sbi	0x0b, 2	; 11
    1194:	85 b1       	in	r24, 0x05	; 5
    1196:	85 b9       	out	0x05, r24	; 5
    1198:	2c 9a       	sbi	0x05, 4	; 5
    119a:	2c 98       	cbi	0x05, 4	; 5
    119c:	8b b1       	in	r24, 0x0b	; 11
    119e:	83 70       	andi	r24, 0x03	; 3
    11a0:	8b b9       	out	0x0b, r24	; 11
    11a2:	85 b1       	in	r24, 0x05	; 5
    11a4:	8c 7f       	andi	r24, 0xFC	; 252
    11a6:	85 b9       	out	0x05, r24	; 5
    11a8:	8b b1       	in	r24, 0x0b	; 11
    11aa:	8c 6c       	ori	r24, 0xCC	; 204
    11ac:	8b b9       	out	0x0b, r24	; 11
    11ae:	85 b1       	in	r24, 0x05	; 5
    11b0:	85 b9       	out	0x05, r24	; 5
    11b2:	2c 9a       	sbi	0x05, 4	; 5
    11b4:	2a 9a       	sbi	0x05, 2	; 5
    11b6:	2a 98       	cbi	0x05, 2	; 5
    11b8:	2b 98       	cbi	0x05, 3	; 5
    11ba:	2d 9a       	sbi	0x05, 5	; 5
    11bc:	2c 9a       	sbi	0x05, 4	; 5
    11be:	2c 98       	cbi	0x05, 4	; 5
    11c0:	8b b1       	in	r24, 0x0b	; 11
    11c2:	83 70       	andi	r24, 0x03	; 3
    11c4:	8b b9       	out	0x0b, r24	; 11
    11c6:	85 b1       	in	r24, 0x05	; 5
    11c8:	8c 7f       	andi	r24, 0xFC	; 252
    11ca:	85 b9       	out	0x05, r24	; 5
    11cc:	8b b1       	in	r24, 0x0b	; 11
    11ce:	8b b9       	out	0x0b, r24	; 11
    11d0:	85 b1       	in	r24, 0x05	; 5
    11d2:	85 b9       	out	0x05, r24	; 5
    11d4:	2c 9a       	sbi	0x05, 4	; 5
    11d6:	2c 98       	cbi	0x05, 4	; 5
    11d8:	8b b1       	in	r24, 0x0b	; 11
    11da:	83 70       	andi	r24, 0x03	; 3
    11dc:	8b b9       	out	0x0b, r24	; 11
    11de:	85 b1       	in	r24, 0x05	; 5
    11e0:	8c 7f       	andi	r24, 0xFC	; 252
    11e2:	85 b9       	out	0x05, r24	; 5
    11e4:	8b b1       	in	r24, 0x0b	; 11
    11e6:	88 68       	ori	r24, 0x88	; 136
    11e8:	8b b9       	out	0x0b, r24	; 11
    11ea:	85 b1       	in	r24, 0x05	; 5
    11ec:	85 b9       	out	0x05, r24	; 5
    11ee:	2c 9a       	sbi	0x05, 4	; 5
    11f0:	2a 9a       	sbi	0x05, 2	; 5
    11f2:	0e 94 96 02 	call	0x52c	; 0x52c <_Z22LCD_paint_screen_blackv>
    11f6:	08 95       	ret

000011f8 <_Z19LCD_set_orientationj>:
    11f8:	2a 98       	cbi	0x05, 2	; 5
    11fa:	2b 98       	cbi	0x05, 3	; 5
    11fc:	2d 9a       	sbi	0x05, 5	; 5
    11fe:	2c 9a       	sbi	0x05, 4	; 5
    1200:	2c 98       	cbi	0x05, 4	; 5
    1202:	2b b1       	in	r18, 0x0b	; 11
    1204:	23 70       	andi	r18, 0x03	; 3
    1206:	2b b9       	out	0x0b, r18	; 11
    1208:	25 b1       	in	r18, 0x05	; 5
    120a:	2c 7f       	andi	r18, 0xFC	; 252
    120c:	25 b9       	out	0x05, r18	; 5
    120e:	2b b1       	in	r18, 0x0b	; 11
    1210:	2b b9       	out	0x0b, r18	; 11
    1212:	25 b1       	in	r18, 0x05	; 5
    1214:	25 b9       	out	0x05, r18	; 5
    1216:	2c 9a       	sbi	0x05, 4	; 5
    1218:	2c 98       	cbi	0x05, 4	; 5
    121a:	2b b1       	in	r18, 0x0b	; 11
    121c:	23 70       	andi	r18, 0x03	; 3
    121e:	2b b9       	out	0x0b, r18	; 11
    1220:	25 b1       	in	r18, 0x05	; 5
    1222:	2c 7f       	andi	r18, 0xFC	; 252
    1224:	25 b9       	out	0x05, r18	; 5
    1226:	2b b1       	in	r18, 0x0b	; 11
    1228:	2c 60       	ori	r18, 0x0C	; 12
    122a:	2b b9       	out	0x0b, r18	; 11
    122c:	25 b1       	in	r18, 0x05	; 5
    122e:	25 b9       	out	0x05, r18	; 5
    1230:	2c 9a       	sbi	0x05, 4	; 5
    1232:	2a 9a       	sbi	0x05, 2	; 5
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	e1 f4       	brne	.+56     	; 0x1270 <_Z19LCD_set_orientationj+0x78>
    1238:	2a 98       	cbi	0x05, 2	; 5
    123a:	2b 9a       	sbi	0x05, 3	; 5
    123c:	2d 9a       	sbi	0x05, 5	; 5
    123e:	2c 98       	cbi	0x05, 4	; 5
    1240:	8b b1       	in	r24, 0x0b	; 11
    1242:	83 70       	andi	r24, 0x03	; 3
    1244:	8b b9       	out	0x0b, r24	; 11
    1246:	85 b1       	in	r24, 0x05	; 5
    1248:	8c 7f       	andi	r24, 0xFC	; 252
    124a:	85 b9       	out	0x05, r24	; 5
    124c:	5e 9a       	sbi	0x0b, 6	; 11
    124e:	28 9a       	sbi	0x05, 0	; 5
    1250:	2c 9a       	sbi	0x05, 4	; 5
    1252:	2c 98       	cbi	0x05, 4	; 5
    1254:	8b b1       	in	r24, 0x0b	; 11
    1256:	83 70       	andi	r24, 0x03	; 3
    1258:	8b b9       	out	0x0b, r24	; 11
    125a:	85 b1       	in	r24, 0x05	; 5
    125c:	8c 7f       	andi	r24, 0xFC	; 252
    125e:	85 b9       	out	0x05, r24	; 5
    1260:	8b b1       	in	r24, 0x0b	; 11
    1262:	80 6e       	ori	r24, 0xE0	; 224
    1264:	8b b9       	out	0x0b, r24	; 11
    1266:	85 b1       	in	r24, 0x05	; 5
    1268:	85 b9       	out	0x05, r24	; 5
    126a:	2c 9a       	sbi	0x05, 4	; 5
    126c:	2a 9a       	sbi	0x05, 2	; 5
    126e:	1b c0       	rjmp	.+54     	; 0x12a6 <_Z19LCD_set_orientationj+0xae>
    1270:	2a 98       	cbi	0x05, 2	; 5
    1272:	2b 9a       	sbi	0x05, 3	; 5
    1274:	2d 9a       	sbi	0x05, 5	; 5
    1276:	2c 98       	cbi	0x05, 4	; 5
    1278:	8b b1       	in	r24, 0x0b	; 11
    127a:	83 70       	andi	r24, 0x03	; 3
    127c:	8b b9       	out	0x0b, r24	; 11
    127e:	85 b1       	in	r24, 0x05	; 5
    1280:	8c 7f       	andi	r24, 0xFC	; 252
    1282:	85 b9       	out	0x05, r24	; 5
    1284:	5e 9a       	sbi	0x0b, 6	; 11
    1286:	28 9a       	sbi	0x05, 0	; 5
    1288:	2c 9a       	sbi	0x05, 4	; 5
    128a:	2c 98       	cbi	0x05, 4	; 5
    128c:	8b b1       	in	r24, 0x0b	; 11
    128e:	83 70       	andi	r24, 0x03	; 3
    1290:	8b b9       	out	0x0b, r24	; 11
    1292:	85 b1       	in	r24, 0x05	; 5
    1294:	8c 7f       	andi	r24, 0xFC	; 252
    1296:	85 b9       	out	0x05, r24	; 5
    1298:	8b b1       	in	r24, 0x0b	; 11
    129a:	80 6c       	ori	r24, 0xC0	; 192
    129c:	8b b9       	out	0x0b, r24	; 11
    129e:	85 b1       	in	r24, 0x05	; 5
    12a0:	85 b9       	out	0x05, r24	; 5
    12a2:	2c 9a       	sbi	0x05, 4	; 5
    12a4:	2a 9a       	sbi	0x05, 2	; 5
    12a6:	2a 98       	cbi	0x05, 2	; 5
    12a8:	2b 98       	cbi	0x05, 3	; 5
    12aa:	2d 9a       	sbi	0x05, 5	; 5
    12ac:	2c 9a       	sbi	0x05, 4	; 5
    12ae:	2c 98       	cbi	0x05, 4	; 5
    12b0:	8b b1       	in	r24, 0x0b	; 11
    12b2:	83 70       	andi	r24, 0x03	; 3
    12b4:	8b b9       	out	0x0b, r24	; 11
    12b6:	85 b1       	in	r24, 0x05	; 5
    12b8:	8c 7f       	andi	r24, 0xFC	; 252
    12ba:	85 b9       	out	0x05, r24	; 5
    12bc:	8b b1       	in	r24, 0x0b	; 11
    12be:	8b b9       	out	0x0b, r24	; 11
    12c0:	85 b1       	in	r24, 0x05	; 5
    12c2:	85 b9       	out	0x05, r24	; 5
    12c4:	2c 9a       	sbi	0x05, 4	; 5
    12c6:	2c 98       	cbi	0x05, 4	; 5
    12c8:	8b b1       	in	r24, 0x0b	; 11
    12ca:	83 70       	andi	r24, 0x03	; 3
    12cc:	8b b9       	out	0x0b, r24	; 11
    12ce:	85 b1       	in	r24, 0x05	; 5
    12d0:	8c 7f       	andi	r24, 0xFC	; 252
    12d2:	85 b9       	out	0x05, r24	; 5
    12d4:	8b b1       	in	r24, 0x0b	; 11
    12d6:	88 68       	ori	r24, 0x88	; 136
    12d8:	8b b9       	out	0x0b, r24	; 11
    12da:	85 b1       	in	r24, 0x05	; 5
    12dc:	85 b9       	out	0x05, r24	; 5
    12de:	2c 9a       	sbi	0x05, 4	; 5
    12e0:	2a 9a       	sbi	0x05, 2	; 5
    12e2:	08 95       	ret

000012e4 <_Z9LCD_setXYjj>:
	 return data;
 }

 inline void send_command(uint16_t index)
 {
	 CS_LOW;
    12e4:	2a 98       	cbi	0x05, 2	; 5
	 RS_LOW;
    12e6:	2b 98       	cbi	0x05, 3	; 5
	 RD_HIGH;
    12e8:	2d 9a       	sbi	0x05, 5	; 5
	 WR_HIGH;
    12ea:	2c 9a       	sbi	0x05, 4	; 5

	 WR_LOW;
    12ec:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    12ee:	2b b1       	in	r18, 0x0b	; 11
    12f0:	23 70       	andi	r18, 0x03	; 3
    12f2:	2b b9       	out	0x0b, r18	; 11
	 PORTB &=~ 0x03;
    12f4:	25 b1       	in	r18, 0x05	; 5
    12f6:	2c 7f       	andi	r18, 0xFC	; 252
    12f8:	25 b9       	out	0x05, r18	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    12fa:	2b b1       	in	r18, 0x0b	; 11
    12fc:	2b b9       	out	0x0b, r18	; 11
	 PORTB |= (data>>6);
    12fe:	25 b1       	in	r18, 0x05	; 5
    1300:	25 b9       	out	0x05, r18	; 5
	 RD_HIGH;
	 WR_HIGH;

	 WR_LOW;
	 push_data(0);
	 WR_HIGH;
    1302:	2c 9a       	sbi	0x05, 4	; 5
	 WR_LOW;
    1304:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    1306:	2b b1       	in	r18, 0x0b	; 11
    1308:	23 70       	andi	r18, 0x03	; 3
    130a:	2b b9       	out	0x0b, r18	; 11
	 PORTB &=~ 0x03;
    130c:	25 b1       	in	r18, 0x05	; 5
    130e:	2c 7f       	andi	r18, 0xFC	; 252
    1310:	25 b9       	out	0x05, r18	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    1312:	5f 9a       	sbi	0x0b, 7	; 11
	 PORTB |= (data>>6);
    1314:	25 b1       	in	r18, 0x05	; 5
    1316:	25 b9       	out	0x05, r18	; 5
	 WR_LOW;
	 push_data(0);
	 WR_HIGH;
	 WR_LOW;
	 push_data(index&0xff);
	 WR_HIGH;
    1318:	2c 9a       	sbi	0x05, 4	; 5

	 CS_HIGH;
    131a:	2a 9a       	sbi	0x05, 2	; 5
 }

 inline void send_data(uint16_t data)
 {
	 CS_LOW;
    131c:	2a 98       	cbi	0x05, 2	; 5
	 RS_HIGH;
    131e:	2b 9a       	sbi	0x05, 3	; 5
	 RD_HIGH;
    1320:	2d 9a       	sbi	0x05, 5	; 5

	 WR_LOW;
    1322:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    1324:	2b b1       	in	r18, 0x0b	; 11
    1326:	23 70       	andi	r18, 0x03	; 3
    1328:	2b b9       	out	0x0b, r18	; 11
	 PORTB &=~ 0x03;
    132a:	25 b1       	in	r18, 0x05	; 5
    132c:	2c 7f       	andi	r18, 0xFC	; 252
    132e:	25 b9       	out	0x05, r18	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    1330:	eb b1       	in	r30, 0x0b	; 11
	 CS_LOW;
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
    1332:	29 2f       	mov	r18, r25
    1334:	33 27       	eor	r19, r19


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    1336:	a9 01       	movw	r20, r18
    1338:	44 0f       	add	r20, r20
    133a:	55 1f       	adc	r21, r21
    133c:	44 0f       	add	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	4e 2b       	or	r20, r30
    1342:	4b b9       	out	0x0b, r20	; 11
	 PORTB |= (data>>6);
    1344:	45 b1       	in	r20, 0x05	; 5
    1346:	02 2e       	mov	r0, r18
    1348:	23 2f       	mov	r18, r19
    134a:	00 0c       	add	r0, r0
    134c:	22 1f       	adc	r18, r18
    134e:	33 0b       	sbc	r19, r19
    1350:	00 0c       	add	r0, r0
    1352:	22 1f       	adc	r18, r18
    1354:	33 1f       	adc	r19, r19
    1356:	24 2b       	or	r18, r20
    1358:	25 b9       	out	0x05, r18	; 5
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
	 WR_HIGH;
    135a:	2c 9a       	sbi	0x05, 4	; 5

	 WR_LOW;
    135c:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    135e:	2b b1       	in	r18, 0x0b	; 11
    1360:	23 70       	andi	r18, 0x03	; 3
    1362:	2b b9       	out	0x0b, r18	; 11
	 PORTB &=~ 0x03;
    1364:	25 b1       	in	r18, 0x05	; 5
    1366:	2c 7f       	andi	r18, 0xFC	; 252
    1368:	25 b9       	out	0x05, r18	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    136a:	4b b1       	in	r20, 0x0b	; 11
    136c:	99 27       	eor	r25, r25
    136e:	9c 01       	movw	r18, r24
    1370:	22 0f       	add	r18, r18
    1372:	33 1f       	adc	r19, r19
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	24 2b       	or	r18, r20
    137a:	2b b9       	out	0x0b, r18	; 11
	 PORTB |= (data>>6);
    137c:	25 b1       	in	r18, 0x05	; 5
    137e:	08 2e       	mov	r0, r24
    1380:	89 2f       	mov	r24, r25
    1382:	00 0c       	add	r0, r0
    1384:	88 1f       	adc	r24, r24
    1386:	99 0b       	sbc	r25, r25
    1388:	00 0c       	add	r0, r0
    138a:	88 1f       	adc	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	82 2b       	or	r24, r18
    1390:	85 b9       	out	0x05, r24	; 5
	 push_data((data&0xff00)>>8);
	 WR_HIGH;

	 WR_LOW;
	 push_data(data&0xff);
	 WR_HIGH;
    1392:	2c 9a       	sbi	0x05, 4	; 5

	 CS_HIGH;
    1394:	2a 9a       	sbi	0x05, 2	; 5
	 return data;
 }

 inline void send_command(uint16_t index)
 {
	 CS_LOW;
    1396:	2a 98       	cbi	0x05, 2	; 5
	 RS_LOW;
    1398:	2b 98       	cbi	0x05, 3	; 5
	 RD_HIGH;
    139a:	2d 9a       	sbi	0x05, 5	; 5
	 WR_HIGH;
    139c:	2c 9a       	sbi	0x05, 4	; 5

	 WR_LOW;
    139e:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    13a0:	8b b1       	in	r24, 0x0b	; 11
    13a2:	83 70       	andi	r24, 0x03	; 3
    13a4:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    13a6:	85 b1       	in	r24, 0x05	; 5
    13a8:	8c 7f       	andi	r24, 0xFC	; 252
    13aa:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    13ac:	8b b1       	in	r24, 0x0b	; 11
    13ae:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    13b0:	85 b1       	in	r24, 0x05	; 5
    13b2:	85 b9       	out	0x05, r24	; 5
	 RD_HIGH;
	 WR_HIGH;

	 WR_LOW;
	 push_data(0);
	 WR_HIGH;
    13b4:	2c 9a       	sbi	0x05, 4	; 5
	 WR_LOW;
    13b6:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    13b8:	8b b1       	in	r24, 0x0b	; 11
    13ba:	83 70       	andi	r24, 0x03	; 3
    13bc:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    13be:	85 b1       	in	r24, 0x05	; 5
    13c0:	8c 7f       	andi	r24, 0xFC	; 252
    13c2:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    13c4:	8b b1       	in	r24, 0x0b	; 11
    13c6:	84 68       	ori	r24, 0x84	; 132
    13c8:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    13ca:	85 b1       	in	r24, 0x05	; 5
    13cc:	85 b9       	out	0x05, r24	; 5
	 WR_LOW;
	 push_data(0);
	 WR_HIGH;
	 WR_LOW;
	 push_data(index&0xff);
	 WR_HIGH;
    13ce:	2c 9a       	sbi	0x05, 4	; 5

	 CS_HIGH;
    13d0:	2a 9a       	sbi	0x05, 2	; 5
 }

 inline void send_data(uint16_t data)
 {
	 CS_LOW;
    13d2:	2a 98       	cbi	0x05, 2	; 5
	 RS_HIGH;
    13d4:	2b 9a       	sbi	0x05, 3	; 5
	 RD_HIGH;
    13d6:	2d 9a       	sbi	0x05, 5	; 5

	 WR_LOW;
    13d8:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    13da:	8b b1       	in	r24, 0x0b	; 11
    13dc:	83 70       	andi	r24, 0x03	; 3
    13de:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    13e0:	85 b1       	in	r24, 0x05	; 5
    13e2:	8c 7f       	andi	r24, 0xFC	; 252
    13e4:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    13e6:	4b b1       	in	r20, 0x0b	; 11
	 CS_LOW;
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
    13e8:	87 2f       	mov	r24, r23
    13ea:	99 27       	eor	r25, r25


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    13ec:	9c 01       	movw	r18, r24
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	24 2b       	or	r18, r20
    13f8:	2b b9       	out	0x0b, r18	; 11
	 PORTB |= (data>>6);
    13fa:	25 b1       	in	r18, 0x05	; 5
    13fc:	08 2e       	mov	r0, r24
    13fe:	89 2f       	mov	r24, r25
    1400:	00 0c       	add	r0, r0
    1402:	88 1f       	adc	r24, r24
    1404:	99 0b       	sbc	r25, r25
    1406:	00 0c       	add	r0, r0
    1408:	88 1f       	adc	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	82 2b       	or	r24, r18
    140e:	85 b9       	out	0x05, r24	; 5
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
	 WR_HIGH;
    1410:	2c 9a       	sbi	0x05, 4	; 5

	 WR_LOW;
    1412:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    1414:	8b b1       	in	r24, 0x0b	; 11
    1416:	83 70       	andi	r24, 0x03	; 3
    1418:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    141a:	85 b1       	in	r24, 0x05	; 5
    141c:	8c 7f       	andi	r24, 0xFC	; 252
    141e:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    1420:	2b b1       	in	r18, 0x0b	; 11
    1422:	77 27       	eor	r23, r23
    1424:	cb 01       	movw	r24, r22
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	82 2b       	or	r24, r18
    1430:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    1432:	85 b1       	in	r24, 0x05	; 5
    1434:	06 2e       	mov	r0, r22
    1436:	67 2f       	mov	r22, r23
    1438:	00 0c       	add	r0, r0
    143a:	66 1f       	adc	r22, r22
    143c:	77 0b       	sbc	r23, r23
    143e:	00 0c       	add	r0, r0
    1440:	66 1f       	adc	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	68 2b       	or	r22, r24
    1446:	65 b9       	out	0x05, r22	; 5
	 push_data((data&0xff00)>>8);
	 WR_HIGH;

	 WR_LOW;
	 push_data(data&0xff);
	 WR_HIGH;
    1448:	2c 9a       	sbi	0x05, 4	; 5

	 CS_HIGH;
    144a:	2a 9a       	sbi	0x05, 2	; 5
	 return data;
 }

 inline void send_command(uint16_t index)
 {
	 CS_LOW;
    144c:	2a 98       	cbi	0x05, 2	; 5
	 RS_LOW;
    144e:	2b 98       	cbi	0x05, 3	; 5
	 RD_HIGH;
    1450:	2d 9a       	sbi	0x05, 5	; 5
	 WR_HIGH;
    1452:	2c 9a       	sbi	0x05, 4	; 5

	 WR_LOW;
    1454:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    1456:	8b b1       	in	r24, 0x0b	; 11
    1458:	83 70       	andi	r24, 0x03	; 3
    145a:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    145c:	85 b1       	in	r24, 0x05	; 5
    145e:	8c 7f       	andi	r24, 0xFC	; 252
    1460:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    1462:	8b b1       	in	r24, 0x0b	; 11
    1464:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    1466:	85 b1       	in	r24, 0x05	; 5
    1468:	85 b9       	out	0x05, r24	; 5
	 RD_HIGH;
	 WR_HIGH;

	 WR_LOW;
	 push_data(0);
	 WR_HIGH;
    146a:	2c 9a       	sbi	0x05, 4	; 5
	 WR_LOW;
    146c:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    146e:	8b b1       	in	r24, 0x0b	; 11
    1470:	83 70       	andi	r24, 0x03	; 3
    1472:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    1474:	85 b1       	in	r24, 0x05	; 5
    1476:	8c 7f       	andi	r24, 0xFC	; 252
    1478:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    147a:	8b b1       	in	r24, 0x0b	; 11
    147c:	88 68       	ori	r24, 0x88	; 136
    147e:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    1480:	85 b1       	in	r24, 0x05	; 5
    1482:	85 b9       	out	0x05, r24	; 5
	 WR_LOW;
	 push_data(0);
	 WR_HIGH;
	 WR_LOW;
	 push_data(index&0xff);
	 WR_HIGH;
    1484:	2c 9a       	sbi	0x05, 4	; 5

	 CS_HIGH;
    1486:	2a 9a       	sbi	0x05, 2	; 5
    1488:	08 95       	ret

0000148a <_Z12LCD_setPixeljjj>:
	 send_data(poY);
	 send_command(0x0022);//Start to write to display RAM
 }

 void LCD_setPixel(uint16_t poX, uint16_t poY, uint16_t color)
 {
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	ea 01       	movw	r28, r20
	 LCD_setXY(poX,poY);
    1490:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z9LCD_setXYjj>
	 CS_HIGH;
 }

 inline void send_data(uint16_t data)
 {
	 CS_LOW;
    1494:	2a 98       	cbi	0x05, 2	; 5
	 RS_HIGH;
    1496:	2b 9a       	sbi	0x05, 3	; 5
	 RD_HIGH;
    1498:	2d 9a       	sbi	0x05, 5	; 5

	 WR_LOW;
    149a:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    149c:	8b b1       	in	r24, 0x0b	; 11
    149e:	83 70       	andi	r24, 0x03	; 3
    14a0:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    14a2:	85 b1       	in	r24, 0x05	; 5
    14a4:	8c 7f       	andi	r24, 0xFC	; 252
    14a6:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    14a8:	4b b1       	in	r20, 0x0b	; 11
	 CS_LOW;
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
    14aa:	8d 2f       	mov	r24, r29
    14ac:	99 27       	eor	r25, r25


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    14ae:	9c 01       	movw	r18, r24
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	24 2b       	or	r18, r20
    14ba:	2b b9       	out	0x0b, r18	; 11
	 PORTB |= (data>>6);
    14bc:	25 b1       	in	r18, 0x05	; 5
    14be:	08 2e       	mov	r0, r24
    14c0:	89 2f       	mov	r24, r25
    14c2:	00 0c       	add	r0, r0
    14c4:	88 1f       	adc	r24, r24
    14c6:	99 0b       	sbc	r25, r25
    14c8:	00 0c       	add	r0, r0
    14ca:	88 1f       	adc	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	82 2b       	or	r24, r18
    14d0:	85 b9       	out	0x05, r24	; 5
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
	 WR_HIGH;
    14d2:	2c 9a       	sbi	0x05, 4	; 5

	 WR_LOW;
    14d4:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    14d6:	8b b1       	in	r24, 0x0b	; 11
    14d8:	83 70       	andi	r24, 0x03	; 3
    14da:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    14dc:	85 b1       	in	r24, 0x05	; 5
    14de:	8c 7f       	andi	r24, 0xFC	; 252
    14e0:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    14e2:	2b b1       	in	r18, 0x0b	; 11
    14e4:	dd 27       	eor	r29, r29
    14e6:	ce 01       	movw	r24, r28
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	82 2b       	or	r24, r18
    14f2:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    14f4:	85 b1       	in	r24, 0x05	; 5
    14f6:	0c 2e       	mov	r0, r28
    14f8:	cd 2f       	mov	r28, r29
    14fa:	00 0c       	add	r0, r0
    14fc:	cc 1f       	adc	r28, r28
    14fe:	dd 0b       	sbc	r29, r29
    1500:	00 0c       	add	r0, r0
    1502:	cc 1f       	adc	r28, r28
    1504:	dd 1f       	adc	r29, r29
    1506:	c8 2b       	or	r28, r24
    1508:	c5 b9       	out	0x05, r28	; 5
	 push_data((data&0xff00)>>8);
	 WR_HIGH;

	 WR_LOW;
	 push_data(data&0xff);
	 WR_HIGH;
    150a:	2c 9a       	sbi	0x05, 4	; 5

	 CS_HIGH;
    150c:	2a 9a       	sbi	0x05, 2	; 5

 void LCD_setPixel(uint16_t poX, uint16_t poY, uint16_t color)
 {
	 LCD_setXY(poX,poY);
	 send_data(color);
 }
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <_Z14LCD_drawCircleiiij>:

 void LCD_drawCircle(int16_t poX, int16_t poY, int16_t r, uint16_t color)
 {
    1514:	2f 92       	push	r2
    1516:	3f 92       	push	r3
    1518:	4f 92       	push	r4
    151a:	5f 92       	push	r5
    151c:	6f 92       	push	r6
    151e:	7f 92       	push	r7
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	4c 01       	movw	r8, r24
    153a:	5b 01       	movw	r10, r22
    153c:	19 01       	movw	r2, r18
	 int16_t x = -r, y = 0, err = 2-2*r, e2;
    153e:	00 27       	eor	r16, r16
    1540:	11 27       	eor	r17, r17
    1542:	04 1b       	sub	r16, r20
    1544:	15 0b       	sbc	r17, r21
    1546:	e8 01       	movw	r28, r16
    1548:	cc 0f       	add	r28, r28
    154a:	dd 1f       	adc	r29, r29
    154c:	22 96       	adiw	r28, 0x02	; 2
    154e:	e1 2c       	mov	r14, r1
    1550:	f1 2c       	mov	r15, r1
	 do {
		 LCD_setPixel(poX-x, poY+y,color);
    1552:	a1 01       	movw	r20, r2
    1554:	65 01       	movw	r12, r10
    1556:	ce 0c       	add	r12, r14
    1558:	df 1c       	adc	r13, r15
    155a:	b6 01       	movw	r22, r12
    155c:	24 01       	movw	r4, r8
    155e:	40 1a       	sub	r4, r16
    1560:	51 0a       	sbc	r5, r17
    1562:	c2 01       	movw	r24, r4
    1564:	0e 94 45 0a 	call	0x148a	; 0x148a <_Z12LCD_setPixeljjj>
		 LCD_setPixel(poX+x, poY+y,color);
    1568:	a1 01       	movw	r20, r2
    156a:	b6 01       	movw	r22, r12
    156c:	64 01       	movw	r12, r8
    156e:	c0 0e       	add	r12, r16
    1570:	d1 1e       	adc	r13, r17
    1572:	c6 01       	movw	r24, r12
    1574:	0e 94 45 0a 	call	0x148a	; 0x148a <_Z12LCD_setPixeljjj>
		 LCD_setPixel(poX+x, poY-y,color);
    1578:	a1 01       	movw	r20, r2
    157a:	35 01       	movw	r6, r10
    157c:	6e 18       	sub	r6, r14
    157e:	7f 08       	sbc	r7, r15
    1580:	b3 01       	movw	r22, r6
    1582:	c6 01       	movw	r24, r12
    1584:	0e 94 45 0a 	call	0x148a	; 0x148a <_Z12LCD_setPixeljjj>
		 LCD_setPixel(poX-x, poY-y,color);
    1588:	a1 01       	movw	r20, r2
    158a:	b3 01       	movw	r22, r6
    158c:	c2 01       	movw	r24, r4
    158e:	0e 94 45 0a 	call	0x148a	; 0x148a <_Z12LCD_setPixeljjj>
		 e2 = err;
		 if (e2 <= y) {
    1592:	ec 16       	cp	r14, r28
    1594:	fd 06       	cpc	r15, r29
    1596:	c4 f0       	brlt	.+48     	; 0x15c8 <_Z14LCD_drawCircleiiij+0xb4>
			 err += ++y*2+1;
    1598:	2f ef       	ldi	r18, 0xFF	; 255
    159a:	e2 1a       	sub	r14, r18
    159c:	f2 0a       	sbc	r15, r18
    159e:	c7 01       	movw	r24, r14
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	8c 0f       	add	r24, r28
    15a8:	9d 1f       	adc	r25, r29
			 if (-x == y && e2 <= x) e2 = 0;
    15aa:	22 27       	eor	r18, r18
    15ac:	33 27       	eor	r19, r19
    15ae:	20 1b       	sub	r18, r16
    15b0:	31 0b       	sbc	r19, r17
    15b2:	2e 15       	cp	r18, r14
    15b4:	3f 05       	cpc	r19, r15
    15b6:	49 f4       	brne	.+18     	; 0x15ca <_Z14LCD_drawCircleiiij+0xb6>
    15b8:	0c 17       	cp	r16, r28
    15ba:	1d 07       	cpc	r17, r29
    15bc:	54 f0       	brlt	.+20     	; 0x15d2 <_Z14LCD_drawCircleiiij+0xbe>
		 LCD_setPixel(poX+x, poY+y,color);
		 LCD_setPixel(poX+x, poY-y,color);
		 LCD_setPixel(poX-x, poY-y,color);
		 e2 = err;
		 if (e2 <= y) {
			 err += ++y*2+1;
    15be:	79 01       	movw	r14, r18
			 if (-x == y && e2 <= x) e2 = 0;
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	c2 2f       	mov	r28, r18
    15c4:	d2 2f       	mov	r29, r18
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <_Z14LCD_drawCircleiiij+0xb6>
    15c8:	ce 01       	movw	r24, r28
		 }
		 if (e2 > x) err += ++x*2+1;
    15ca:	0c 17       	cp	r16, r28
    15cc:	1d 07       	cpc	r17, r29
    15ce:	5c f4       	brge	.+22     	; 0x15e6 <_Z14LCD_drawCircleiiij+0xd2>
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <_Z14LCD_drawCircleiiij+0xc0>
		 LCD_setPixel(poX+x, poY+y,color);
		 LCD_setPixel(poX+x, poY-y,color);
		 LCD_setPixel(poX-x, poY-y,color);
		 e2 = err;
		 if (e2 <= y) {
			 err += ++y*2+1;
    15d2:	79 01       	movw	r14, r18
			 if (-x == y && e2 <= x) e2 = 0;
		 }
		 if (e2 > x) err += ++x*2+1;
    15d4:	0f 5f       	subi	r16, 0xFF	; 255
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	e8 01       	movw	r28, r16
    15da:	cc 0f       	add	r28, r28
    15dc:	dd 1f       	adc	r29, r29
    15de:	21 96       	adiw	r28, 0x01	; 1
    15e0:	c8 0f       	add	r28, r24
    15e2:	d9 1f       	adc	r29, r25
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <_Z14LCD_drawCircleiiij+0xd4>
    15e6:	ec 01       	movw	r28, r24
 }

 void LCD_drawCircle(int16_t poX, int16_t poY, int16_t r, uint16_t color)
 {
	 int16_t x = -r, y = 0, err = 2-2*r, e2;
	 do {
    15e8:	10 16       	cp	r1, r16
    15ea:	11 06       	cpc	r1, r17
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <_Z14LCD_drawCircleiiij+0xdc>
    15ee:	b1 cf       	rjmp	.-158    	; 0x1552 <_Z14LCD_drawCircleiiij+0x3e>
			 err += ++y*2+1;
			 if (-x == y && e2 <= x) e2 = 0;
		 }
		 if (e2 > x) err += ++x*2+1;
	 } while (x <= 0);
 }
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	bf 90       	pop	r11
    1602:	af 90       	pop	r10
    1604:	9f 90       	pop	r9
    1606:	8f 90       	pop	r8
    1608:	7f 90       	pop	r7
    160a:	6f 90       	pop	r6
    160c:	5f 90       	pop	r5
    160e:	4f 90       	pop	r4
    1610:	3f 90       	pop	r3
    1612:	2f 90       	pop	r2
    1614:	08 95       	ret

00001616 <_Z12LCD_drawLinejjjjj>:

 }


 void LCD_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
 {
    1616:	2f 92       	push	r2
    1618:	3f 92       	push	r3
    161a:	4f 92       	push	r4
    161c:	5f 92       	push	r5
    161e:	6f 92       	push	r6
    1620:	7f 92       	push	r7
    1622:	8f 92       	push	r8
    1624:	9f 92       	push	r9
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	00 d0       	rcall	.+0      	; 0x163c <_Z12LCD_drawLinejjjjj+0x26>
    163c:	00 d0       	rcall	.+0      	; 0x163e <_Z12LCD_drawLinejjjjj+0x28>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <_Z12LCD_drawLinejjjjj+0x2a>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	7b 01       	movw	r14, r22
    164a:	3a 01       	movw	r6, r20
    164c:	29 01       	movw	r4, r18
    164e:	1a 83       	std	Y+2, r17	; 0x02
    1650:	09 83       	std	Y+1, r16	; 0x01
	 int x = x1-x0;
	 int y = y1-y0;
    1652:	c9 01       	movw	r24, r18
    1654:	86 1b       	sub	r24, r22
    1656:	97 0b       	sbc	r25, r23
 }


 void LCD_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
 {
	 int x = x1-x0;
    1658:	9a 01       	movw	r18, r20
    165a:	4d 81       	ldd	r20, Y+5	; 0x05
    165c:	5e 81       	ldd	r21, Y+6	; 0x06
    165e:	24 1b       	sub	r18, r20
    1660:	35 0b       	sbc	r19, r21
	 int y = y1-y0;
	 int dx = abs(x), sx = x0<x1 ? 1 : -1;
    1662:	89 01       	movw	r16, r18
    1664:	22 f4       	brpl	.+8      	; 0x166e <_Z12LCD_drawLinejjjjj+0x58>
    1666:	00 27       	eor	r16, r16
    1668:	11 27       	eor	r17, r17
    166a:	02 1b       	sub	r16, r18
    166c:	13 0b       	sbc	r17, r19
    166e:	ed 81       	ldd	r30, Y+5	; 0x05
    1670:	fe 81       	ldd	r31, Y+6	; 0x06
    1672:	e6 15       	cp	r30, r6
    1674:	f7 05       	cpc	r31, r7
    1676:	20 f0       	brcs	.+8      	; 0x1680 <_Z12LCD_drawLinejjjjj+0x6a>
    1678:	aa 24       	eor	r10, r10
    167a:	aa 94       	dec	r10
    167c:	ba 2c       	mov	r11, r10
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <_Z12LCD_drawLinejjjjj+0x70>
    1680:	aa 24       	eor	r10, r10
    1682:	a3 94       	inc	r10
    1684:	b1 2c       	mov	r11, r1
	 int dy = -abs(y), sy = y0<y1 ? 1 : -1;
    1686:	6c 01       	movw	r12, r24
    1688:	99 23       	and	r25, r25
    168a:	24 f4       	brge	.+8      	; 0x1694 <_Z12LCD_drawLinejjjjj+0x7e>
    168c:	cc 24       	eor	r12, r12
    168e:	dd 24       	eor	r13, r13
    1690:	c8 1a       	sub	r12, r24
    1692:	d9 0a       	sbc	r13, r25
    1694:	dc 82       	std	Y+4, r13	; 0x04
    1696:	cb 82       	std	Y+3, r12	; 0x03
    1698:	d1 94       	neg	r13
    169a:	c1 94       	neg	r12
    169c:	d1 08       	sbc	r13, r1
    169e:	e4 14       	cp	r14, r4
    16a0:	f5 04       	cpc	r15, r5
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <_Z12LCD_drawLinejjjjj+0x96>
    16a4:	88 24       	eor	r8, r8
    16a6:	8a 94       	dec	r8
    16a8:	98 2c       	mov	r9, r8
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <_Z12LCD_drawLinejjjjj+0x9c>
    16ac:	88 24       	eor	r8, r8
    16ae:	83 94       	inc	r8
    16b0:	91 2c       	mov	r9, r1
	 int err = dx+dy, e2; /* error value e_xy */
    16b2:	18 01       	movw	r2, r16
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	3c 81       	ldd	r19, Y+4	; 0x04
    16b8:	22 1a       	sub	r2, r18
    16ba:	33 0a       	sbc	r3, r19
	 for (;;){ /* loop */
		 LCD_setPixel(x0,y0,color);
    16bc:	49 81       	ldd	r20, Y+1	; 0x01
    16be:	5a 81       	ldd	r21, Y+2	; 0x02
    16c0:	b7 01       	movw	r22, r14
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	0e 94 45 0a 	call	0x148a	; 0x148a <_Z12LCD_setPixeljjj>
		 e2 = 2*err;
    16ca:	c1 01       	movw	r24, r2
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
		 if (e2 >= dy) { /* e_xy+e_x > 0 */
    16d0:	8c 15       	cp	r24, r12
    16d2:	9d 05       	cpc	r25, r13
    16d4:	6c f0       	brlt	.+26     	; 0x16f0 <_Z12LCD_drawLinejjjjj+0xda>
			 if (x0 == x1) break;
    16d6:	4d 81       	ldd	r20, Y+5	; 0x05
    16d8:	5e 81       	ldd	r21, Y+6	; 0x06
    16da:	46 15       	cp	r20, r6
    16dc:	57 05       	cpc	r21, r7
    16de:	99 f0       	breq	.+38     	; 0x1706 <_Z12LCD_drawLinejjjjj+0xf0>
			 err += dy; x0 += sx;
    16e0:	eb 81       	ldd	r30, Y+3	; 0x03
    16e2:	fc 81       	ldd	r31, Y+4	; 0x04
    16e4:	2e 1a       	sub	r2, r30
    16e6:	3f 0a       	sbc	r3, r31
    16e8:	4a 0d       	add	r20, r10
    16ea:	5b 1d       	adc	r21, r11
    16ec:	5e 83       	std	Y+6, r21	; 0x06
    16ee:	4d 83       	std	Y+5, r20	; 0x05
		 }
		 if (e2 <= dx) { /* e_xy+e_y < 0 */
    16f0:	08 17       	cp	r16, r24
    16f2:	19 07       	cpc	r17, r25
    16f4:	1c f3       	brlt	.-58     	; 0x16bc <_Z12LCD_drawLinejjjjj+0xa6>
			 if (y0 == y1) break;
    16f6:	e4 14       	cp	r14, r4
    16f8:	f5 04       	cpc	r15, r5
    16fa:	29 f0       	breq	.+10     	; 0x1706 <_Z12LCD_drawLinejjjjj+0xf0>
			 err += dx; y0 += sy;
    16fc:	20 0e       	add	r2, r16
    16fe:	31 1e       	adc	r3, r17
    1700:	e8 0c       	add	r14, r8
    1702:	f9 1c       	adc	r15, r9
    1704:	db cf       	rjmp	.-74     	; 0x16bc <_Z12LCD_drawLinejjjjj+0xa6>
		 }
	 }
 }
    1706:	26 96       	adiw	r28, 0x06	; 6
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	7f 90       	pop	r7
    172c:	6f 90       	pop	r6
    172e:	5f 90       	pop	r5
    1730:	4f 90       	pop	r4
    1732:	3f 90       	pop	r3
    1734:	2f 90       	pop	r2
    1736:	08 95       	ret

00001738 <_Z22LCD_drawHorizontalLinejjjj>:


 void LCD_drawHorizontalLine(uint16_t poX, uint16_t poY, uint16_t length, uint16_t color)
 {
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	7c 01       	movw	r14, r24
    1746:	ea 01       	movw	r28, r20
    1748:	89 01       	movw	r16, r18
	 LCD_setXY(poX,poY);
    174a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z9LCD_setXYjj>
	 LCD_set_orientation(0);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_Z19LCD_set_orientationj>
	 if(length+poX>MAX_X)
    1756:	c7 01       	movw	r24, r14
    1758:	8c 0f       	add	r24, r28
    175a:	9d 1f       	adc	r25, r29
    175c:	81 3f       	cpi	r24, 0xF1	; 241
    175e:	91 05       	cpc	r25, r1
    1760:	20 f0       	brcs	.+8      	; 0x176a <_Z22LCD_drawHorizontalLinejjjj+0x32>
	 {
		 length=MAX_X-poX;
    1762:	c0 ef       	ldi	r28, 0xF0	; 240
    1764:	d0 e0       	ldi	r29, 0x00	; 0
    1766:	ce 19       	sub	r28, r14
    1768:	df 09       	sbc	r29, r15
	 }
	 for(unsigned int i=0;i<length;i++)
    176a:	20 97       	sbiw	r28, 0x00	; 0
    176c:	09 f4       	brne	.+2      	; 0x1770 <_Z22LCD_drawHorizontalLinejjjj+0x38>
    176e:	41 c0       	rjmp	.+130    	; 0x17f2 <_Z22LCD_drawHorizontalLinejjjj+0xba>
	 CS_LOW;
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
    1770:	81 2f       	mov	r24, r17
    1772:	99 27       	eor	r25, r25


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    1774:	28 2f       	mov	r18, r24
    1776:	22 0f       	add	r18, r18
    1778:	22 0f       	add	r18, r18
	 PORTB |= (data>>6);
    177a:	08 2e       	mov	r0, r24
    177c:	89 2f       	mov	r24, r25
    177e:	00 0c       	add	r0, r0
    1780:	88 1f       	adc	r24, r24
    1782:	99 0b       	sbc	r25, r25
    1784:	00 0c       	add	r0, r0
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	98 2f       	mov	r25, r24
    178c:	11 27       	eor	r17, r17


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    178e:	30 2f       	mov	r19, r16
    1790:	33 0f       	add	r19, r19
    1792:	33 0f       	add	r19, r19
	 PORTB |= (data>>6);
    1794:	00 2e       	mov	r0, r16
    1796:	01 2f       	mov	r16, r17
    1798:	00 0c       	add	r0, r0
    179a:	00 1f       	adc	r16, r16
    179c:	11 0b       	sbc	r17, r17
    179e:	00 0c       	add	r0, r0
    17a0:	00 1f       	adc	r16, r16
    17a2:	11 1f       	adc	r17, r17
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	50 e0       	ldi	r21, 0x00	; 0
	 CS_HIGH;
 }

 inline void send_data(uint16_t data)
 {
	 CS_LOW;
    17a8:	2a 98       	cbi	0x05, 2	; 5
	 RS_HIGH;
    17aa:	2b 9a       	sbi	0x05, 3	; 5
	 RD_HIGH;
    17ac:	2d 9a       	sbi	0x05, 5	; 5

	 WR_LOW;
    17ae:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    17b0:	8b b1       	in	r24, 0x0b	; 11
    17b2:	83 70       	andi	r24, 0x03	; 3
    17b4:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    17b6:	85 b1       	in	r24, 0x05	; 5
    17b8:	8c 7f       	andi	r24, 0xFC	; 252
    17ba:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    17bc:	8b b1       	in	r24, 0x0b	; 11
    17be:	82 2b       	or	r24, r18
    17c0:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    17c2:	85 b1       	in	r24, 0x05	; 5
    17c4:	89 2b       	or	r24, r25
    17c6:	85 b9       	out	0x05, r24	; 5
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
	 WR_HIGH;
    17c8:	2c 9a       	sbi	0x05, 4	; 5

	 WR_LOW;
    17ca:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    17cc:	8b b1       	in	r24, 0x0b	; 11
    17ce:	83 70       	andi	r24, 0x03	; 3
    17d0:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    17d2:	85 b1       	in	r24, 0x05	; 5
    17d4:	8c 7f       	andi	r24, 0xFC	; 252
    17d6:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    17d8:	8b b1       	in	r24, 0x0b	; 11
    17da:	83 2b       	or	r24, r19
    17dc:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    17de:	85 b1       	in	r24, 0x05	; 5
    17e0:	80 2b       	or	r24, r16
    17e2:	85 b9       	out	0x05, r24	; 5
	 push_data((data&0xff00)>>8);
	 WR_HIGH;

	 WR_LOW;
	 push_data(data&0xff);
	 WR_HIGH;
    17e4:	2c 9a       	sbi	0x05, 4	; 5

	 CS_HIGH;
    17e6:	2a 9a       	sbi	0x05, 2	; 5
	 LCD_set_orientation(0);
	 if(length+poX>MAX_X)
	 {
		 length=MAX_X-poX;
	 }
	 for(unsigned int i=0;i<length;i++)
    17e8:	4f 5f       	subi	r20, 0xFF	; 255
    17ea:	5f 4f       	sbci	r21, 0xFF	; 255
    17ec:	4c 17       	cp	r20, r28
    17ee:	5d 07       	cpc	r21, r29
    17f0:	d9 f6       	brne	.-74     	; 0x17a8 <_Z22LCD_drawHorizontalLinejjjj+0x70>
	 {
		 send_data(color);
	 }
 }
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	08 95       	ret

00001800 <_Z20LCD_drawVerticalLinejjjj>:


 void LCD_drawVerticalLine(uint16_t poX, uint16_t poY, uint16_t length, uint16_t color)
 {
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	7b 01       	movw	r14, r22
    180e:	ea 01       	movw	r28, r20
    1810:	89 01       	movw	r16, r18
	 LCD_setXY(poX,poY);
    1812:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z9LCD_setXYjj>
	 LCD_set_orientation(1);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_Z19LCD_set_orientationj>
	 if(length+poY>MAX_Y)
    181e:	c7 01       	movw	r24, r14
    1820:	8c 0f       	add	r24, r28
    1822:	9d 1f       	adc	r25, r29
    1824:	81 34       	cpi	r24, 0x41	; 65
    1826:	91 40       	sbci	r25, 0x01	; 1
    1828:	20 f0       	brcs	.+8      	; 0x1832 <_Z20LCD_drawVerticalLinejjjj+0x32>
	 {
		 length=MAX_Y-poY;
    182a:	c0 e4       	ldi	r28, 0x40	; 64
    182c:	d1 e0       	ldi	r29, 0x01	; 1
    182e:	ce 19       	sub	r28, r14
    1830:	df 09       	sbc	r29, r15
	 }

	 for(unsigned int i=0;i<length;i++)
    1832:	20 97       	sbiw	r28, 0x00	; 0
    1834:	09 f4       	brne	.+2      	; 0x1838 <_Z20LCD_drawVerticalLinejjjj+0x38>
    1836:	41 c0       	rjmp	.+130    	; 0x18ba <_Z20LCD_drawVerticalLinejjjj+0xba>
	 CS_LOW;
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
    1838:	81 2f       	mov	r24, r17
    183a:	99 27       	eor	r25, r25


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    183c:	28 2f       	mov	r18, r24
    183e:	22 0f       	add	r18, r18
    1840:	22 0f       	add	r18, r18
	 PORTB |= (data>>6);
    1842:	08 2e       	mov	r0, r24
    1844:	89 2f       	mov	r24, r25
    1846:	00 0c       	add	r0, r0
    1848:	88 1f       	adc	r24, r24
    184a:	99 0b       	sbc	r25, r25
    184c:	00 0c       	add	r0, r0
    184e:	88 1f       	adc	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	98 2f       	mov	r25, r24
    1854:	11 27       	eor	r17, r17


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    1856:	30 2f       	mov	r19, r16
    1858:	33 0f       	add	r19, r19
    185a:	33 0f       	add	r19, r19
	 PORTB |= (data>>6);
    185c:	00 2e       	mov	r0, r16
    185e:	01 2f       	mov	r16, r17
    1860:	00 0c       	add	r0, r0
    1862:	00 1f       	adc	r16, r16
    1864:	11 0b       	sbc	r17, r17
    1866:	00 0c       	add	r0, r0
    1868:	00 1f       	adc	r16, r16
    186a:	11 1f       	adc	r17, r17
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
	 CS_HIGH;
 }

 inline void send_data(uint16_t data)
 {
	 CS_LOW;
    1870:	2a 98       	cbi	0x05, 2	; 5
	 RS_HIGH;
    1872:	2b 9a       	sbi	0x05, 3	; 5
	 RD_HIGH;
    1874:	2d 9a       	sbi	0x05, 5	; 5

	 WR_LOW;
    1876:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    1878:	8b b1       	in	r24, 0x0b	; 11
    187a:	83 70       	andi	r24, 0x03	; 3
    187c:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    187e:	85 b1       	in	r24, 0x05	; 5
    1880:	8c 7f       	andi	r24, 0xFC	; 252
    1882:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    1884:	8b b1       	in	r24, 0x0b	; 11
    1886:	82 2b       	or	r24, r18
    1888:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    188a:	85 b1       	in	r24, 0x05	; 5
    188c:	89 2b       	or	r24, r25
    188e:	85 b9       	out	0x05, r24	; 5
	 RS_HIGH;
	 RD_HIGH;

	 WR_LOW;
	 push_data((data&0xff00)>>8);
	 WR_HIGH;
    1890:	2c 9a       	sbi	0x05, 4	; 5

	 WR_LOW;
    1892:	2c 98       	cbi	0x05, 4	; 5
	 return data;
 }

 inline void all_pin_low(void)
 {
	 PORTD &=~ 0xfc;
    1894:	8b b1       	in	r24, 0x0b	; 11
    1896:	83 70       	andi	r24, 0x03	; 3
    1898:	8b b9       	out	0x0b, r24	; 11
	 PORTB &=~ 0x03;
    189a:	85 b1       	in	r24, 0x05	; 5
    189c:	8c 7f       	andi	r24, 0xFC	; 252
    189e:	85 b9       	out	0x05, r24	; 5


 inline void push_data(uint8_t data)
 {
	 all_pin_low();
	 PORTD |= (data<<2);
    18a0:	8b b1       	in	r24, 0x0b	; 11
    18a2:	83 2b       	or	r24, r19
    18a4:	8b b9       	out	0x0b, r24	; 11
	 PORTB |= (data>>6);
    18a6:	85 b1       	in	r24, 0x05	; 5
    18a8:	80 2b       	or	r24, r16
    18aa:	85 b9       	out	0x05, r24	; 5
	 push_data((data&0xff00)>>8);
	 WR_HIGH;

	 WR_LOW;
	 push_data(data&0xff);
	 WR_HIGH;
    18ac:	2c 9a       	sbi	0x05, 4	; 5

	 CS_HIGH;
    18ae:	2a 9a       	sbi	0x05, 2	; 5
	 if(length+poY>MAX_Y)
	 {
		 length=MAX_Y-poY;
	 }

	 for(unsigned int i=0;i<length;i++)
    18b0:	4f 5f       	subi	r20, 0xFF	; 255
    18b2:	5f 4f       	sbci	r21, 0xFF	; 255
    18b4:	4c 17       	cp	r20, r28
    18b6:	5d 07       	cpc	r21, r29
    18b8:	d9 f6       	brne	.-74     	; 0x1870 <_Z20LCD_drawVerticalLinejjjj+0x70>
	 {
		 send_data(color);
	 }
 }
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	08 95       	ret

000018c8 <_Z14LCD_fillCircleiiij>:
		 if (e2 > x) err += ++x*2+1;
	 } while (x <= 0);
 }

 void LCD_fillCircle(int16_t poX, int16_t poY, int16_t r, uint16_t color)
 {
    18c8:	2f 92       	push	r2
    18ca:	3f 92       	push	r3
    18cc:	4f 92       	push	r4
    18ce:	5f 92       	push	r5
    18d0:	6f 92       	push	r6
    18d2:	7f 92       	push	r7
    18d4:	8f 92       	push	r8
    18d6:	9f 92       	push	r9
    18d8:	af 92       	push	r10
    18da:	bf 92       	push	r11
    18dc:	cf 92       	push	r12
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	5c 01       	movw	r10, r24
    18ee:	4b 01       	movw	r8, r22
    18f0:	29 01       	movw	r4, r18
	 int x = -r, y = 0, err = 2-2*r, e2;
    18f2:	00 27       	eor	r16, r16
    18f4:	11 27       	eor	r17, r17
    18f6:	04 1b       	sub	r16, r20
    18f8:	15 0b       	sbc	r17, r21
    18fa:	e8 01       	movw	r28, r16
    18fc:	cc 0f       	add	r28, r28
    18fe:	dd 1f       	adc	r29, r29
    1900:	22 96       	adiw	r28, 0x02	; 2
    1902:	c1 2c       	mov	r12, r1
    1904:	d1 2c       	mov	r13, r1
		 LCD_drawVerticalLine(poX+x,poY-y,2*y,color);

		 e2 = err;
		 if (e2 <= y) {
			 err += ++y*2+1;
			 if (-x == y && e2 <= x) e2 = 0;
    1906:	21 2c       	mov	r2, r1
    1908:	31 2c       	mov	r3, r1
 void LCD_fillCircle(int16_t poX, int16_t poY, int16_t r, uint16_t color)
 {
	 int x = -r, y = 0, err = 2-2*r, e2;
	 do {

		 LCD_drawVerticalLine(poX-x,poY-y,2*y,color);
    190a:	36 01       	movw	r6, r12
    190c:	66 0c       	add	r6, r6
    190e:	77 1c       	adc	r7, r7
    1910:	92 01       	movw	r18, r4
    1912:	a3 01       	movw	r20, r6
    1914:	74 01       	movw	r14, r8
    1916:	ec 18       	sub	r14, r12
    1918:	fd 08       	sbc	r15, r13
    191a:	b7 01       	movw	r22, r14
    191c:	c5 01       	movw	r24, r10
    191e:	80 1b       	sub	r24, r16
    1920:	91 0b       	sbc	r25, r17
    1922:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z20LCD_drawVerticalLinejjjj>
		 LCD_drawVerticalLine(poX+x,poY-y,2*y,color);
    1926:	92 01       	movw	r18, r4
    1928:	a3 01       	movw	r20, r6
    192a:	b7 01       	movw	r22, r14
    192c:	c5 01       	movw	r24, r10
    192e:	80 0f       	add	r24, r16
    1930:	91 1f       	adc	r25, r17
    1932:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z20LCD_drawVerticalLinejjjj>

		 e2 = err;
		 if (e2 <= y) {
    1936:	cc 16       	cp	r12, r28
    1938:	dd 06       	cpc	r13, r29
    193a:	b4 f0       	brlt	.+44     	; 0x1968 <_Z14LCD_fillCircleiiij+0xa0>
			 err += ++y*2+1;
    193c:	8f ef       	ldi	r24, 0xFF	; 255
    193e:	c8 1a       	sub	r12, r24
    1940:	d8 0a       	sbc	r13, r24
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	68 0e       	add	r6, r24
    1946:	71 1c       	adc	r7, r1
    1948:	6c 0e       	add	r6, r28
    194a:	7d 1e       	adc	r7, r29
			 if (-x == y && e2 <= x) e2 = 0;
    194c:	88 27       	eor	r24, r24
    194e:	99 27       	eor	r25, r25
    1950:	80 1b       	sub	r24, r16
    1952:	91 0b       	sbc	r25, r17
    1954:	8c 15       	cp	r24, r12
    1956:	9d 05       	cpc	r25, r13
    1958:	41 f4       	brne	.+16     	; 0x196a <_Z14LCD_fillCircleiiij+0xa2>
    195a:	0c 17       	cp	r16, r28
    195c:	1d 07       	cpc	r17, r29
    195e:	4c f0       	brlt	.+18     	; 0x1972 <_Z14LCD_fillCircleiiij+0xaa>
		 LCD_drawVerticalLine(poX-x,poY-y,2*y,color);
		 LCD_drawVerticalLine(poX+x,poY-y,2*y,color);

		 e2 = err;
		 if (e2 <= y) {
			 err += ++y*2+1;
    1960:	6c 01       	movw	r12, r24
			 if (-x == y && e2 <= x) e2 = 0;
    1962:	c2 2d       	mov	r28, r2
    1964:	d3 2d       	mov	r29, r3
    1966:	01 c0       	rjmp	.+2      	; 0x196a <_Z14LCD_fillCircleiiij+0xa2>
    1968:	3e 01       	movw	r6, r28
		 }
		 if (e2 > x) err += ++x*2+1;
    196a:	0c 17       	cp	r16, r28
    196c:	1d 07       	cpc	r17, r29
    196e:	5c f4       	brge	.+22     	; 0x1986 <_Z14LCD_fillCircleiiij+0xbe>
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <_Z14LCD_fillCircleiiij+0xac>
		 LCD_drawVerticalLine(poX-x,poY-y,2*y,color);
		 LCD_drawVerticalLine(poX+x,poY-y,2*y,color);

		 e2 = err;
		 if (e2 <= y) {
			 err += ++y*2+1;
    1972:	6c 01       	movw	r12, r24
			 if (-x == y && e2 <= x) e2 = 0;
		 }
		 if (e2 > x) err += ++x*2+1;
    1974:	0f 5f       	subi	r16, 0xFF	; 255
    1976:	1f 4f       	sbci	r17, 0xFF	; 255
    1978:	e8 01       	movw	r28, r16
    197a:	cc 0f       	add	r28, r28
    197c:	dd 1f       	adc	r29, r29
    197e:	21 96       	adiw	r28, 0x01	; 1
    1980:	c6 0d       	add	r28, r6
    1982:	d7 1d       	adc	r29, r7
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <_Z14LCD_fillCircleiiij+0xc0>
    1986:	e3 01       	movw	r28, r6
 }

 void LCD_fillCircle(int16_t poX, int16_t poY, int16_t r, uint16_t color)
 {
	 int x = -r, y = 0, err = 2-2*r, e2;
	 do {
    1988:	10 16       	cp	r1, r16
    198a:	11 06       	cpc	r1, r17
    198c:	0c f0       	brlt	.+2      	; 0x1990 <_Z14LCD_fillCircleiiij+0xc8>
    198e:	bd cf       	rjmp	.-134    	; 0x190a <_Z14LCD_fillCircleiiij+0x42>
			 if (-x == y && e2 <= x) e2 = 0;
		 }
		 if (e2 > x) err += ++x*2+1;
	 } while (x <= 0);

 }
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	bf 90       	pop	r11
    19a2:	af 90       	pop	r10
    19a4:	9f 90       	pop	r9
    19a6:	8f 90       	pop	r8
    19a8:	7f 90       	pop	r7
    19aa:	6f 90       	pop	r6
    19ac:	5f 90       	pop	r5
    19ae:	4f 90       	pop	r4
    19b0:	3f 90       	pop	r3
    19b2:	2f 90       	pop	r2
    19b4:	08 95       	ret

000019b6 <_Z17LCD_drawRectanglejjjjj>:
		 send_data(color);
	 }
 }

 void LCD_drawRectangle(uint16_t poX, uint16_t poY, uint16_t length, uint16_t width, uint16_t color)
 {
    19b6:	af 92       	push	r10
    19b8:	bf 92       	push	r11
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	ec 01       	movw	r28, r24
    19cc:	7b 01       	movw	r14, r22
    19ce:	6a 01       	movw	r12, r20
    19d0:	59 01       	movw	r10, r18
	 LCD_drawHorizontalLine(poX, poY, length, color);
    19d2:	98 01       	movw	r18, r16
    19d4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_Z22LCD_drawHorizontalLinejjjj>
	 LCD_drawHorizontalLine(poX, poY+width, length, color);
    19d8:	b7 01       	movw	r22, r14
    19da:	6a 0d       	add	r22, r10
    19dc:	7b 1d       	adc	r23, r11
    19de:	98 01       	movw	r18, r16
    19e0:	a6 01       	movw	r20, r12
    19e2:	ce 01       	movw	r24, r28
    19e4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_Z22LCD_drawHorizontalLinejjjj>

	 LCD_drawVerticalLine(poX, poY, width,color);
    19e8:	98 01       	movw	r18, r16
    19ea:	a5 01       	movw	r20, r10
    19ec:	b7 01       	movw	r22, r14
    19ee:	ce 01       	movw	r24, r28
    19f0:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z20LCD_drawVerticalLinejjjj>
	 LCD_drawVerticalLine(poX + length, poY, width,color);
    19f4:	98 01       	movw	r18, r16
    19f6:	a5 01       	movw	r20, r10
    19f8:	b7 01       	movw	r22, r14
    19fa:	ce 01       	movw	r24, r28
    19fc:	8c 0d       	add	r24, r12
    19fe:	9d 1d       	adc	r25, r13
    1a00:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z20LCD_drawVerticalLinejjjj>
 }
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	cf 90       	pop	r12
    1a14:	bf 90       	pop	r11
    1a16:	af 90       	pop	r10
    1a18:	08 95       	ret

00001a1a <_Z17LCD_fillRectanglejjjjj>:

 void LCD_fillRectangle(uint16_t poX, uint16_t poY, uint16_t length, uint16_t width, uint16_t color)
 {
    1a1a:	8f 92       	push	r8
    1a1c:	9f 92       	push	r9
    1a1e:	af 92       	push	r10
    1a20:	bf 92       	push	r11
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
	 for(unsigned int i=0;i<width;i++)
    1a32:	21 15       	cp	r18, r1
    1a34:	31 05       	cpc	r19, r1
    1a36:	c9 f1       	breq	.+114    	; 0x1aaa <_Z17LCD_fillRectanglejjjjj+0x90>
    1a38:	4a 01       	movw	r8, r20
    1a3a:	eb 01       	movw	r28, r22
    1a3c:	5c 01       	movw	r10, r24
    1a3e:	69 01       	movw	r12, r18
    1a40:	c6 0e       	add	r12, r22
    1a42:	d7 1e       	adc	r13, r23
    1a44:	7b 01       	movw	r14, r22
	 {
		 if(display_direct == LCD_DISPLAY_LEFT2RIGHT)
    1a46:	80 91 34 01 	lds	r24, 0x0134
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	07 c0       	rjmp	.+14     	; 0x1a5c <_Z17LCD_fillRectanglejjjjj+0x42>
		 LCD_drawHorizontalLine(poX, poY+i, length, color);
    1a4e:	98 01       	movw	r18, r16
    1a50:	a4 01       	movw	r20, r8
    1a52:	be 01       	movw	r22, r28
    1a54:	c5 01       	movw	r24, r10
    1a56:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_Z22LCD_drawHorizontalLinejjjj>
    1a5a:	20 c0       	rjmp	.+64     	; 0x1a9c <_Z17LCD_fillRectanglejjjjj+0x82>
		 else if (display_direct ==  LCD_DISPLAY_DOWN2UP)
    1a5c:	80 91 34 01 	lds	r24, 0x0134
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	39 f4       	brne	.+14     	; 0x1a72 <_Z17LCD_fillRectanglejjjjj+0x58>
		 LCD_drawHorizontalLine(poX, poY-i, length, color);
    1a64:	98 01       	movw	r18, r16
    1a66:	a4 01       	movw	r20, r8
    1a68:	b7 01       	movw	r22, r14
    1a6a:	c5 01       	movw	r24, r10
    1a6c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_Z22LCD_drawHorizontalLinejjjj>
    1a70:	15 c0       	rjmp	.+42     	; 0x1a9c <_Z17LCD_fillRectanglejjjjj+0x82>
		 else if(display_direct == LCD_DISPLAY_RIGHT2LEFT)
    1a72:	80 91 34 01 	lds	r24, 0x0134
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	39 f4       	brne	.+14     	; 0x1a88 <_Z17LCD_fillRectanglejjjjj+0x6e>
		 LCD_drawHorizontalLine(poX, poY-i, length, color);
    1a7a:	98 01       	movw	r18, r16
    1a7c:	a4 01       	movw	r20, r8
    1a7e:	b7 01       	movw	r22, r14
    1a80:	c5 01       	movw	r24, r10
    1a82:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_Z22LCD_drawHorizontalLinejjjj>
    1a86:	0a c0       	rjmp	.+20     	; 0x1a9c <_Z17LCD_fillRectanglejjjjj+0x82>
		 else if(display_direct == LCD_DISPLAY_UP2DOWN)
    1a88:	80 91 34 01 	lds	r24, 0x0134
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	31 f4       	brne	.+12     	; 0x1a9c <_Z17LCD_fillRectanglejjjjj+0x82>
		 LCD_drawHorizontalLine(poX, poY+i, length, color);
    1a90:	98 01       	movw	r18, r16
    1a92:	a4 01       	movw	r20, r8
    1a94:	be 01       	movw	r22, r28
    1a96:	c5 01       	movw	r24, r10
    1a98:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_Z22LCD_drawHorizontalLinejjjj>
    1a9c:	21 96       	adiw	r28, 0x01	; 1
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	e8 1a       	sub	r14, r24
    1aa2:	f1 08       	sbc	r15, r1
	 LCD_drawVerticalLine(poX + length, poY, width,color);
 }

 void LCD_fillRectangle(uint16_t poX, uint16_t poY, uint16_t length, uint16_t width, uint16_t color)
 {
	 for(unsigned int i=0;i<width;i++)
    1aa4:	cc 15       	cp	r28, r12
    1aa6:	dd 05       	cpc	r29, r13
    1aa8:	71 f6       	brne	.-100    	; 0x1a46 <_Z17LCD_fillRectanglejjjjj+0x2c>
		 else if(display_direct == LCD_DISPLAY_RIGHT2LEFT)
		 LCD_drawHorizontalLine(poX, poY-i, length, color);
		 else if(display_direct == LCD_DISPLAY_UP2DOWN)
		 LCD_drawHorizontalLine(poX, poY+i, length, color);
	 }
 }
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	bf 90       	pop	r11
    1abc:	af 90       	pop	r10
    1abe:	9f 90       	pop	r9
    1ac0:	8f 90       	pop	r8
    1ac2:	08 95       	ret

00001ac4 <_Z12LCD_drawCharcjjjj>:

 void LCD_drawChar(char ascii, uint16_t poX, uint16_t poY, uint16_t size, uint16_t fgcolor)
 {
    1ac4:	2f 92       	push	r2
    1ac6:	3f 92       	push	r3
    1ac8:	4f 92       	push	r4
    1aca:	5f 92       	push	r5
    1acc:	6f 92       	push	r6
    1ace:	7f 92       	push	r7
    1ad0:	8f 92       	push	r8
    1ad2:	9f 92       	push	r9
    1ad4:	af 92       	push	r10
    1ad6:	bf 92       	push	r11
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	2f 97       	sbiw	r28, 0x0f	; 15
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	d8 2e       	mov	r13, r24
    1afa:	5b 01       	movw	r10, r22
    1afc:	7a 01       	movw	r14, r20
    1afe:	29 01       	movw	r4, r18
    1b00:	1d 83       	std	Y+5, r17	; 0x05
    1b02:	0c 83       	std	Y+4, r16	; 0x04
	 
	 LCD_setXY(poX,poY);
    1b04:	ba 01       	movw	r22, r20
    1b06:	c5 01       	movw	r24, r10
    1b08:	0e 94 72 09 	call	0x12e4	; 0x12e4 <_Z9LCD_setXYjj>
	 
	 if((ascii < 0x20)||(ascii > 0x7e))//Unsupported char.
    1b0c:	80 ee       	ldi	r24, 0xE0	; 224
    1b0e:	8d 0d       	add	r24, r13
    1b10:	8f 35       	cpi	r24, 0x5F	; 95
    1b12:	20 f0       	brcs	.+8      	; 0x1b1c <_Z12LCD_drawCharcjjjj+0x58>
	 {
		 ascii = '?';
    1b14:	0f 2e       	mov	r0, r31
    1b16:	ff e3       	ldi	r31, 0x3F	; 63
    1b18:	df 2e       	mov	r13, r31
    1b1a:	f0 2d       	mov	r31, r0
    1b1c:	8d 2d       	mov	r24, r13
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	20 57       	subi	r18, 0x70	; 112
    1b30:	30 40       	sbci	r19, 0x00	; 0
    1b32:	3b 83       	std	Y+3, r19	; 0x03
    1b34:	2a 83       	std	Y+2, r18	; 0x02
    1b36:	37 01       	movw	r6, r14
    1b38:	17 01       	movw	r2, r14
    1b3a:	38 e0       	ldi	r19, 0x08	; 8
    1b3c:	39 83       	std	Y+1, r19	; 0x01
    1b3e:	c5 01       	movw	r24, r10
    1b40:	8e 19       	sub	r24, r14
    1b42:	9f 09       	sbc	r25, r15
    1b44:	9f 83       	std	Y+7, r25	; 0x07
    1b46:	8e 83       	std	Y+6, r24	; 0x06
	 }
	 for(unsigned char i=0;i<8;i++)
	 {
		 unsigned char temp = pgm_read_byte(&simpleFont[ascii-0x20][i]);
    1b48:	a8 86       	std	Y+8, r10	; 0x08
    1b4a:	b9 86       	std	Y+9, r11	; 0x09
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	ea 19       	sub	r30, r10
    1b50:	fb 09       	sbc	r31, r11
    1b52:	fb 87       	std	Y+11, r31	; 0x0b
    1b54:	ea 87       	std	Y+10, r30	; 0x0a
    1b56:	ea 81       	ldd	r30, Y+2	; 0x02
    1b58:	fb 81       	ldd	r31, Y+3	; 0x03
    1b5a:	a4 90       	lpm	r10, Z
    1b5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b60:	22 0d       	add	r18, r2
    1b62:	33 1d       	adc	r19, r3
    1b64:	3d 87       	std	Y+13, r19	; 0x0d
    1b66:	2c 87       	std	Y+12, r18	; 0x0c
    1b68:	8e 80       	ldd	r8, Y+6	; 0x06
    1b6a:	9f 80       	ldd	r9, Y+7	; 0x07
    1b6c:	86 0c       	add	r8, r6
    1b6e:	97 1c       	adc	r9, r7
    1b70:	c8 84       	ldd	r12, Y+8	; 0x08
    1b72:	d9 84       	ldd	r13, Y+9	; 0x09
    1b74:	ec 2c       	mov	r14, r12
    1b76:	fd 2c       	mov	r15, r13
    1b78:	00 e0       	ldi	r16, 0x00	; 0
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
		 for(unsigned char f=0;f<8;f++)
		 {
			 if((temp>>f)&0x01)
    1b7c:	b1 2c       	mov	r11, r1
    1b7e:	1f 87       	std	Y+15, r17	; 0x0f
    1b80:	0e 87       	std	Y+14, r16	; 0x0e
    1b82:	c5 01       	movw	r24, r10
    1b84:	0e 84       	ldd	r0, Y+14	; 0x0e
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <_Z12LCD_drawCharcjjjj+0xc8>
    1b88:	95 95       	asr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <_Z12LCD_drawCharcjjjj+0xc4>
    1b90:	80 ff       	sbrs	r24, 0
    1b92:	3a c0       	rjmp	.+116    	; 0x1c08 <_Z12LCD_drawCharcjjjj+0x144>
			 {
				 if(display_direct == LCD_DISPLAY_LEFT2RIGHT)
    1b94:	80 91 34 01 	lds	r24, 0x0134
    1b98:	81 11       	cpse	r24, r1
    1b9a:	0c c0       	rjmp	.+24     	; 0x1bb4 <_Z12LCD_drawCharcjjjj+0xf0>
				 LCD_fillRectangle(poX+i*size, poY+f*size, size, size, fgcolor);
    1b9c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b9e:	1d 81       	ldd	r17, Y+5	; 0x05
    1ba0:	92 01       	movw	r18, r4
    1ba2:	a2 01       	movw	r20, r4
    1ba4:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ba6:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ba8:	6e 0d       	add	r22, r14
    1baa:	7f 1d       	adc	r23, r15
    1bac:	c4 01       	movw	r24, r8
    1bae:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_Z17LCD_fillRectanglejjjjj>
    1bb2:	2a c0       	rjmp	.+84     	; 0x1c08 <_Z12LCD_drawCharcjjjj+0x144>
				 else if(display_direct == LCD_DISPLAY_DOWN2UP)
    1bb4:	80 91 34 01 	lds	r24, 0x0134
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	49 f4       	brne	.+18     	; 0x1bce <_Z12LCD_drawCharcjjjj+0x10a>
				 LCD_fillRectangle(poX+f*size, poY-i*size, size, size, fgcolor);
    1bbc:	0c 81       	ldd	r16, Y+4	; 0x04
    1bbe:	1d 81       	ldd	r17, Y+5	; 0x05
    1bc0:	92 01       	movw	r18, r4
    1bc2:	a2 01       	movw	r20, r4
    1bc4:	b1 01       	movw	r22, r2
    1bc6:	c7 01       	movw	r24, r14
    1bc8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_Z17LCD_fillRectanglejjjjj>
    1bcc:	1d c0       	rjmp	.+58     	; 0x1c08 <_Z12LCD_drawCharcjjjj+0x144>
				 else if(display_direct == LCD_DISPLAY_RIGHT2LEFT)
    1bce:	80 91 34 01 	lds	r24, 0x0134
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	69 f4       	brne	.+26     	; 0x1bf0 <_Z12LCD_drawCharcjjjj+0x12c>
				 LCD_fillRectangle(poX-i*size, poY-f*size, size, size, fgcolor);
    1bd6:	0c 81       	ldd	r16, Y+4	; 0x04
    1bd8:	1d 81       	ldd	r17, Y+5	; 0x05
    1bda:	92 01       	movw	r18, r4
    1bdc:	a2 01       	movw	r20, r4
    1bde:	6a 85       	ldd	r22, Y+10	; 0x0a
    1be0:	7b 85       	ldd	r23, Y+11	; 0x0b
    1be2:	6c 0d       	add	r22, r12
    1be4:	7d 1d       	adc	r23, r13
    1be6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1be8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bea:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_Z17LCD_fillRectanglejjjjj>
    1bee:	0c c0       	rjmp	.+24     	; 0x1c08 <_Z12LCD_drawCharcjjjj+0x144>
				 else if(display_direct ==LCD_DISPLAY_UP2DOWN)
    1bf0:	80 91 34 01 	lds	r24, 0x0134
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	41 f4       	brne	.+16     	; 0x1c08 <_Z12LCD_drawCharcjjjj+0x144>
				 LCD_fillRectangle(poX-f*size, poY+i*size, size, size, fgcolor);
    1bf8:	0c 81       	ldd	r16, Y+4	; 0x04
    1bfa:	1d 81       	ldd	r17, Y+5	; 0x05
    1bfc:	92 01       	movw	r18, r4
    1bfe:	a2 01       	movw	r20, r4
    1c00:	b3 01       	movw	r22, r6
    1c02:	c6 01       	movw	r24, r12
    1c04:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_Z17LCD_fillRectanglejjjjj>
    1c08:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	9f 87       	std	Y+15, r25	; 0x0f
    1c10:	8e 87       	std	Y+14, r24	; 0x0e
    1c12:	e4 0c       	add	r14, r4
    1c14:	f5 1c       	adc	r15, r5
    1c16:	c4 18       	sub	r12, r4
    1c18:	d5 08       	sbc	r13, r5
		 ascii = '?';
	 }
	 for(unsigned char i=0;i<8;i++)
	 {
		 unsigned char temp = pgm_read_byte(&simpleFont[ascii-0x20][i]);
		 for(unsigned char f=0;f<8;f++)
    1c1a:	08 97       	sbiw	r24, 0x08	; 8
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <_Z12LCD_drawCharcjjjj+0x15c>
    1c1e:	b1 cf       	rjmp	.-158    	; 0x1b82 <_Z12LCD_drawCharcjjjj+0xbe>
    1c20:	99 81       	ldd	r25, Y+1	; 0x01
    1c22:	91 50       	subi	r25, 0x01	; 1
    1c24:	99 83       	std	Y+1, r25	; 0x01
    1c26:	ea 81       	ldd	r30, Y+2	; 0x02
    1c28:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2a:	31 96       	adiw	r30, 0x01	; 1
    1c2c:	fb 83       	std	Y+3, r31	; 0x03
    1c2e:	ea 83       	std	Y+2, r30	; 0x02
    1c30:	24 18       	sub	r2, r4
    1c32:	35 08       	sbc	r3, r5
    1c34:	64 0c       	add	r6, r4
    1c36:	75 1c       	adc	r7, r5
	 
	 if((ascii < 0x20)||(ascii > 0x7e))//Unsupported char.
	 {
		 ascii = '?';
	 }
	 for(unsigned char i=0;i<8;i++)
    1c38:	91 11       	cpse	r25, r1
    1c3a:	8d cf       	rjmp	.-230    	; 0x1b56 <_Z12LCD_drawCharcjjjj+0x92>
				 LCD_fillRectangle(poX-f*size, poY+i*size, size, size, fgcolor);
			 }

		 }
	 }
 }
    1c3c:	2f 96       	adiw	r28, 0x0f	; 15
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	1f 91       	pop	r17
    1c4e:	0f 91       	pop	r16
    1c50:	ff 90       	pop	r15
    1c52:	ef 90       	pop	r14
    1c54:	df 90       	pop	r13
    1c56:	cf 90       	pop	r12
    1c58:	bf 90       	pop	r11
    1c5a:	af 90       	pop	r10
    1c5c:	9f 90       	pop	r9
    1c5e:	8f 90       	pop	r8
    1c60:	7f 90       	pop	r7
    1c62:	6f 90       	pop	r6
    1c64:	5f 90       	pop	r5
    1c66:	4f 90       	pop	r4
    1c68:	3f 90       	pop	r3
    1c6a:	2f 90       	pop	r2
    1c6c:	08 95       	ret

00001c6e <_Z14LCD_drawStringPKcjjjjPFhvE>:

 void LCD_drawString(const char *string, uint16_t poX, uint16_t poY, uint16_t size, uint16_t fgcolor, inputfunction RX_get_byte)
 {
    1c6e:	4f 92       	push	r4
    1c70:	5f 92       	push	r5
    1c72:	6f 92       	push	r6
    1c74:	7f 92       	push	r7
    1c76:	8f 92       	push	r8
    1c78:	9f 92       	push	r9
    1c7a:	af 92       	push	r10
    1c7c:	bf 92       	push	r11
    1c7e:	cf 92       	push	r12
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	ec 01       	movw	r28, r24
    1c90:	6b 01       	movw	r12, r22
    1c92:	5a 01       	movw	r10, r20
    1c94:	49 01       	movw	r8, r18
    1c96:	38 01       	movw	r6, r16
	 char x;

	 if(!string) {
    1c98:	89 2b       	or	r24, r25
    1c9a:	59 f0       	breq	.+22     	; 0x1cb2 <_Z14LCD_drawStringPKcjjjjPFhvE+0x44>
			 }
			 else if(display_direct == LCD_DISPLAY_DOWN2UP)
			 {
				 if(poY > 0)
				 {
					 poY-=8*size; // Move cursor right
    1c9c:	79 01       	movw	r14, r18
    1c9e:	ee 0c       	add	r14, r14
    1ca0:	ff 1c       	adc	r15, r15
    1ca2:	ee 0c       	add	r14, r14
    1ca4:	ff 1c       	adc	r15, r15
    1ca6:	ee 0c       	add	r14, r14
    1ca8:	ff 1c       	adc	r15, r15
    1caa:	68 94       	set
    1cac:	44 24       	eor	r4, r4
    1cae:	43 f8       	bld	r4, 3
    1cb0:	73 c0       	rjmp	.+230    	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
			 }
			 else if(display_direct == LCD_DISPLAY_DOWN2UP)
			 {
				 if(poY > 0)
				 {
					 poY-=8*size; // Move cursor right
    1cb2:	e9 01       	movw	r28, r18
    1cb4:	cc 0f       	add	r28, r28
    1cb6:	dd 1f       	adc	r29, r29
    1cb8:	cc 0f       	add	r28, r28
    1cba:	dd 1f       	adc	r29, r29
    1cbc:	cc 0f       	add	r28, r28
    1cbe:	dd 1f       	adc	r29, r29
    1cc0:	30 c0       	rjmp	.+96     	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
 {
	 char x;

	 if(!string) {
		 while((x = RX_get_byte())) {
			 LCD_drawChar(x, poX, poY, size, fgcolor);
    1cc2:	83 01       	movw	r16, r6
    1cc4:	94 01       	movw	r18, r8
    1cc6:	a5 01       	movw	r20, r10
    1cc8:	b6 01       	movw	r22, r12
    1cca:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_Z12LCD_drawCharcjjjj>

			 if(display_direct == LCD_DISPLAY_LEFT2RIGHT)
    1cce:	80 91 34 01 	lds	r24, 0x0134
    1cd2:	81 11       	cpse	r24, r1
    1cd4:	07 c0       	rjmp	.+14     	; 0x1ce4 <_Z14LCD_drawStringPKcjjjjPFhvE+0x76>
			 {
				 if(poX < MAX_X)
    1cd6:	80 ef       	ldi	r24, 0xF0	; 240
    1cd8:	c8 16       	cp	r12, r24
    1cda:	d1 04       	cpc	r13, r1
    1cdc:	10 f5       	brcc	.+68     	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
				 {
					 poX+=8*size; // Move cursor right
    1cde:	cc 0e       	add	r12, r28
    1ce0:	dd 1e       	adc	r13, r29
    1ce2:	1f c0       	rjmp	.+62     	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
				 }
			 }
			 else if(display_direct == LCD_DISPLAY_DOWN2UP)
    1ce4:	80 91 34 01 	lds	r24, 0x0134
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	31 f4       	brne	.+12     	; 0x1cf8 <_Z14LCD_drawStringPKcjjjjPFhvE+0x8a>
			 {
				 if(poY > 0)
    1cec:	a1 14       	cp	r10, r1
    1cee:	b1 04       	cpc	r11, r1
    1cf0:	c1 f0       	breq	.+48     	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
				 {
					 poY-=8*size; // Move cursor right
    1cf2:	ac 1a       	sub	r10, r28
    1cf4:	bd 0a       	sbc	r11, r29
    1cf6:	15 c0       	rjmp	.+42     	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
				 }
			 }
			 else if(display_direct == LCD_DISPLAY_RIGHT2LEFT)
    1cf8:	80 91 34 01 	lds	r24, 0x0134
    1cfc:	82 30       	cpi	r24, 0x02	; 2
    1cfe:	31 f4       	brne	.+12     	; 0x1d0c <_Z14LCD_drawStringPKcjjjjPFhvE+0x9e>
			 {
				 if(poX > 0)
    1d00:	c1 14       	cp	r12, r1
    1d02:	d1 04       	cpc	r13, r1
    1d04:	71 f0       	breq	.+28     	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
				 {
					 poX-=8*size; // Move cursor right
    1d06:	cc 1a       	sub	r12, r28
    1d08:	dd 0a       	sbc	r13, r29
    1d0a:	0b c0       	rjmp	.+22     	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
				 }
			 }
			 else if(display_direct == LCD_DISPLAY_UP2DOWN)
    1d0c:	80 91 34 01 	lds	r24, 0x0134
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	39 f4       	brne	.+14     	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
			 {
				 if(poY < MAX_Y)
    1d14:	e0 e4       	ldi	r30, 0x40	; 64
    1d16:	ae 16       	cp	r10, r30
    1d18:	e1 e0       	ldi	r30, 0x01	; 1
    1d1a:	be 06       	cpc	r11, r30
    1d1c:	10 f4       	brcc	.+4      	; 0x1d22 <_Z14LCD_drawStringPKcjjjjPFhvE+0xb4>
				 {
					 poY+=8*size; // Move cursor right
    1d1e:	ac 0e       	add	r10, r28
    1d20:	bd 1e       	adc	r11, r29
 void LCD_drawString(const char *string, uint16_t poX, uint16_t poY, uint16_t size, uint16_t fgcolor, inputfunction RX_get_byte)
 {
	 char x;

	 if(!string) {
		 while((x = RX_get_byte())) {
    1d22:	f7 01       	movw	r30, r14
    1d24:	09 95       	icall
    1d26:	81 11       	cpse	r24, r1
    1d28:	cc cf       	rjmp	.-104    	; 0x1cc2 <_Z14LCD_drawStringPKcjjjjPFhvE+0x54>
    1d2a:	39 c0       	rjmp	.+114    	; 0x1d9e <_Z14LCD_drawStringPKcjjjjPFhvE+0x130>
    1d2c:	54 2c       	mov	r5, r4
		 } else {
		 while(*string)
		 {
			 for(unsigned char i=0;i<8;i++)
			 {
				 LCD_drawChar(*string, poX, poY, size, fgcolor);
    1d2e:	83 01       	movw	r16, r6
    1d30:	94 01       	movw	r18, r8
    1d32:	a5 01       	movw	r20, r10
    1d34:	b6 01       	movw	r22, r12
    1d36:	88 81       	ld	r24, Y
    1d38:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_Z12LCD_drawCharcjjjj>
    1d3c:	5a 94       	dec	r5
			 }
		 }
		 } else {
		 while(*string)
		 {
			 for(unsigned char i=0;i<8;i++)
    1d3e:	51 10       	cpse	r5, r1
    1d40:	f6 cf       	rjmp	.-20     	; 0x1d2e <_Z14LCD_drawStringPKcjjjjPFhvE+0xc0>
			 {
				 LCD_drawChar(*string, poX, poY, size, fgcolor);
			 }
			 string++;
    1d42:	21 96       	adiw	r28, 0x01	; 1
			 if(display_direct == LCD_DISPLAY_LEFT2RIGHT)
    1d44:	80 91 34 01 	lds	r24, 0x0134
    1d48:	81 11       	cpse	r24, r1
    1d4a:	07 c0       	rjmp	.+14     	; 0x1d5a <_Z14LCD_drawStringPKcjjjjPFhvE+0xec>
			 {
				 if(poX < MAX_X)
    1d4c:	f0 ef       	ldi	r31, 0xF0	; 240
    1d4e:	cf 16       	cp	r12, r31
    1d50:	d1 04       	cpc	r13, r1
    1d52:	10 f5       	brcc	.+68     	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
				 {
					 poX+=8*size; // Move cursor right
    1d54:	ce 0c       	add	r12, r14
    1d56:	df 1c       	adc	r13, r15
    1d58:	1f c0       	rjmp	.+62     	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
				 }
			 }
			 else if(display_direct == LCD_DISPLAY_DOWN2UP)
    1d5a:	80 91 34 01 	lds	r24, 0x0134
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	31 f4       	brne	.+12     	; 0x1d6e <_Z14LCD_drawStringPKcjjjjPFhvE+0x100>
			 {
				 if(poY > 0)
    1d62:	a1 14       	cp	r10, r1
    1d64:	b1 04       	cpc	r11, r1
    1d66:	c1 f0       	breq	.+48     	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
				 {
					 poY-=8*size; // Move cursor right
    1d68:	ae 18       	sub	r10, r14
    1d6a:	bf 08       	sbc	r11, r15
    1d6c:	15 c0       	rjmp	.+42     	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
				 }
			 }
			 else if(display_direct == LCD_DISPLAY_RIGHT2LEFT)
    1d6e:	80 91 34 01 	lds	r24, 0x0134
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	31 f4       	brne	.+12     	; 0x1d82 <_Z14LCD_drawStringPKcjjjjPFhvE+0x114>
			 {
				 if(poX > 0)
    1d76:	c1 14       	cp	r12, r1
    1d78:	d1 04       	cpc	r13, r1
    1d7a:	71 f0       	breq	.+28     	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
				 {
					 poX-=8*size; // Move cursor right
    1d7c:	ce 18       	sub	r12, r14
    1d7e:	df 08       	sbc	r13, r15
    1d80:	0b c0       	rjmp	.+22     	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
				 }
			 }
			 else if(display_direct == LCD_DISPLAY_UP2DOWN)
    1d82:	80 91 34 01 	lds	r24, 0x0134
    1d86:	83 30       	cpi	r24, 0x03	; 3
    1d88:	39 f4       	brne	.+14     	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
			 {
				 if(poY < MAX_Y)
    1d8a:	80 e4       	ldi	r24, 0x40	; 64
    1d8c:	a8 16       	cp	r10, r24
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	b8 06       	cpc	r11, r24
    1d92:	10 f4       	brcc	.+4      	; 0x1d98 <_Z14LCD_drawStringPKcjjjjPFhvE+0x12a>
				 {
					 poY+=8*size; // Move cursor right
    1d94:	ae 0c       	add	r10, r14
    1d96:	bf 1c       	adc	r11, r15
					 poY+=8*size; // Move cursor right
				 }
			 }
		 }
		 } else {
		 while(*string)
    1d98:	88 81       	ld	r24, Y
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	c7 cf       	rjmp	.-114    	; 0x1d2c <_Z14LCD_drawStringPKcjjjjPFhvE+0xbe>
					 poY+=8*size; // Move cursor right
				 }
			 }
		 }
	 }
 }
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	ef 90       	pop	r14
    1daa:	df 90       	pop	r13
    1dac:	cf 90       	pop	r12
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	7f 90       	pop	r7
    1db8:	6f 90       	pop	r6
    1dba:	5f 90       	pop	r5
    1dbc:	4f 90       	pop	r4
    1dbe:	08 95       	ret

00001dc0 <main>:
#include "serial.h"
#include "touchscreen.h"
#include "eeprom.h"

int main(void)
{
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <main+0x6>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <main+0x8>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <main+0xa>
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	char x, y, z, temp, q, r;	//variables used for loops, buffering of command bytes, counters etc.
	uint16_t count, count2, color;		//counters for long stuff that may go over 256
	uint8_t pressureThreshhold = 10;

	TouchScreen_init();
    1dce:	0e 94 16 11 	call	0x222c	; 0x222c <_Z16TouchScreen_initv>

	USART_set_baud(6);
    1dd2:	86 e0       	ldi	r24, 0x06	; 6
    1dd4:	0e 94 49 10 	call	0x2092	; 0x2092 <_Z14USART_set_baudc>
	LCD_init();
    1dd8:	0e 94 bf 02 	call	0x57e	; 0x57e <_Z8LCD_initv>

	//flush any received chars
	USART_flush();
    1ddc:	0e 94 2f 10 	call	0x205e	; 0x205e <_Z11USART_flushv>

	LCD_drawString("Ready For Command", 0, 10, 1, WHITE, USART_recv);
    1de0:	0f 2e       	mov	r0, r31
    1de2:	fc eb       	ldi	r31, 0xBC	; 188
    1de4:	ef 2e       	mov	r14, r31
    1de6:	f0 e1       	ldi	r31, 0x10	; 16
    1de8:	ff 2e       	mov	r15, r31
    1dea:	f0 2d       	mov	r31, r0
    1dec:	0f ef       	ldi	r16, 0xFF	; 255
    1dee:	1f ef       	ldi	r17, 0xFF	; 255
    1df0:	21 e0       	ldi	r18, 0x01	; 1
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e0       	ldi	r20, 0x0A	; 10
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	91 e0       	ldi	r25, 0x01	; 1
    1e00:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z14LCD_drawStringPKcjjjjPFhvE>
		if(!RX_available()) {

			TSPoint p = TouchScreen_getPoint();

			if(p.z > pressureThreshhold) {
				USART_printf("X = %d\r\n", p.x);
    1e04:	0f 2e       	mov	r0, r31
    1e06:	f2 e1       	ldi	r31, 0x12	; 18
    1e08:	8f 2e       	mov	r8, r31
    1e0a:	f1 e0       	ldi	r31, 0x01	; 1
    1e0c:	9f 2e       	mov	r9, r31
    1e0e:	f0 2d       	mov	r31, r0
				USART_printf("Y = %d\r\n", p.y);
    1e10:	0f 2e       	mov	r0, r31
    1e12:	fb e1       	ldi	r31, 0x1B	; 27
    1e14:	af 2e       	mov	r10, r31
    1e16:	f1 e0       	ldi	r31, 0x01	; 1
    1e18:	bf 2e       	mov	r11, r31
    1e1a:	f0 2d       	mov	r31, r0
				USART_printf("Pressure = %d\r\n", p.z);
    1e1c:	0f 2e       	mov	r0, r31
    1e1e:	f4 e2       	ldi	r31, 0x24	; 36
    1e20:	cf 2e       	mov	r12, r31
    1e22:	f1 e0       	ldi	r31, 0x01	; 1
    1e24:	df 2e       	mov	r13, r31
    1e26:	f0 2d       	mov	r31, r0

	LCD_drawString("Ready For Command", 0, 10, 1, WHITE, USART_recv);

    /* Replace with your application code */
    while (1)  {
		if(!RX_available()) {
    1e28:	0e 94 2c 10 	call	0x2058	; 0x2058 <_Z12RX_availablev>
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	27 c0       	rjmp	.+78     	; 0x1e7e <main+0xbe>

			TSPoint p = TouchScreen_getPoint();
    1e30:	0e 94 27 11 	call	0x224e	; 0x224e <_Z20TouchScreen_getPointv>
    1e34:	29 83       	std	Y+1, r18	; 0x01
    1e36:	4b 83       	std	Y+3, r20	; 0x03
    1e38:	5c 83       	std	Y+4, r21	; 0x04
    1e3a:	6d 83       	std	Y+5, r22	; 0x05
    1e3c:	7e 83       	std	Y+6, r23	; 0x06
    1e3e:	0d 81       	ldd	r16, Y+5	; 0x05
    1e40:	1e 81       	ldd	r17, Y+6	; 0x06

			if(p.z > pressureThreshhold) {
    1e42:	0b 30       	cpi	r16, 0x0B	; 11
    1e44:	11 05       	cpc	r17, r1
    1e46:	84 f3       	brlt	.-32     	; 0x1e28 <main+0x68>
				USART_printf("X = %d\r\n", p.x);
    1e48:	3f 93       	push	r19
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	8f 93       	push	r24
    1e4e:	9f 92       	push	r9
    1e50:	8f 92       	push	r8
    1e52:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_Z12USART_printfPKcz>
				USART_printf("Y = %d\r\n", p.y);
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	8f 93       	push	r24
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	8f 93       	push	r24
    1e5e:	bf 92       	push	r11
    1e60:	af 92       	push	r10
    1e62:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_Z12USART_printfPKcz>
				USART_printf("Pressure = %d\r\n", p.z);
    1e66:	1f 93       	push	r17
    1e68:	0f 93       	push	r16
    1e6a:	df 92       	push	r13
    1e6c:	cf 92       	push	r12
    1e6e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_Z12USART_printfPKcz>
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	d5 cf       	rjmp	.-86     	; 0x1e28 <main+0x68>
			}

		} else {
			x = USART_recv();
    1e7e:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
			switch(x) {		//switch based on received character
    1e82:	8c 37       	cpi	r24, 0x7C	; 124
    1e84:	89 f6       	brne	.-94     	; 0x1e28 <main+0x68>

				//--------------------------------------------------------------------------------------------------------------------
				case 124:					//received character indicated a coming command
				y = USART_recv();
    1e86:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>

				switch(y) {				//switch to which command was sent
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	31 97       	sbiw	r30, 0x01	; 1
    1e90:	e4 31       	cpi	r30, 0x14	; 20
    1e92:	f1 05       	cpc	r31, r1
    1e94:	48 f6       	brcc	.-110    	; 0x1e28 <main+0x68>
    1e96:	ec 5c       	subi	r30, 0xCC	; 204
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__tablejump2__>
					case 1:	//clear screen
						LCD_paint_screen_black();
    1e9e:	0e 94 96 02 	call	0x52c	; 0x52c <_Z22LCD_paint_screen_blackv>
					break;
    1ea2:	c2 cf       	rjmp	.-124    	; 0x1e28 <main+0x68>
					//************************************************************************************************************
					case 3:	//draw circle
						//need 4 bytes, RX_read already pointing at the first
							//wait for byte (x coord of circle)
						y = USART_recv();	//get char from buffer
    1ea4:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1ea8:	78 2e       	mov	r7, r24
							//wait for byte (y coord of circle)
						z = USART_recv();	//get char from buffer
    1eaa:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1eae:	f8 2e       	mov	r15, r24
							//wait for byte (r of circle)
						r = USART_recv();	//store it and increment RX_read
    1eb0:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1eb4:	e8 2e       	mov	r14, r24
							//wait for byte (S_R of circle)

							// get integer color
						color = USART_recv();	//store it and increment RX_read
    1eb6:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1eba:	08 2f       	mov	r16, r24
    1ebc:	10 e0       	ldi	r17, 0x00	; 0
						color = color << 8;
    1ebe:	10 2f       	mov	r17, r16
    1ec0:	00 27       	eor	r16, r16
						color |= USART_recv();  
    1ec2:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1ec6:	98 01       	movw	r18, r16
    1ec8:	28 2b       	or	r18, r24

						LCD_drawCircle(y, z, r, color);
    1eca:	4e 2d       	mov	r20, r14
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	6f 2d       	mov	r22, r15
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	87 2d       	mov	r24, r7
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_Z14LCD_drawCircleiiij>
					break;
    1eda:	a6 cf       	rjmp	.-180    	; 0x1e28 <main+0x68>
					case 4:
						y = USART_recv();	//get char from buffer
    1edc:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1ee0:	78 2e       	mov	r7, r24
						//wait for byte (y coord of circle)
						z = USART_recv();	//get char from buffer
    1ee2:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1ee6:	f8 2e       	mov	r15, r24
						//wait for byte (r of circle)
						r = USART_recv();	//store it and increment RX_read
    1ee8:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1eec:	e8 2e       	mov	r14, r24
						//wait for byte (S_R of circle)

						// get integer color
						color = USART_recv();	//store it and increment RX_read
    1eee:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1ef2:	08 2f       	mov	r16, r24
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
						color = color << 8;
    1ef6:	10 2f       	mov	r17, r16
    1ef8:	00 27       	eor	r16, r16
						color |= USART_recv();
    1efa:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1efe:	98 01       	movw	r18, r16
    1f00:	28 2b       	or	r18, r24

						LCD_fillCircle(y, z, r, color);
    1f02:	4e 2d       	mov	r20, r14
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	6f 2d       	mov	r22, r15
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	87 2d       	mov	r24, r7
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <_Z14LCD_fillCircleiiij>
					break;
    1f12:	8a cf       	rjmp	.-236    	; 0x1e28 <main+0x68>
					//************************************************************************************************************
					case 12:	//line
						//need 5 bytes, RX_read already pointing at the first
					
							//wait for byte (x coord of start)
						y = USART_recv();	//store it and increment RX_read
    1f14:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f18:	e8 2e       	mov	r14, r24
 							//wrap if necessary
						
							//wait for byte (y coord of start)
						z = USART_recv();	//store it and increment RX_read
    1f1a:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f1e:	f8 2e       	mov	r15, r24
 							//wrap if necessary

							//wait for byte (x coord of end)
						temp = USART_recv();	//store it and increment RX_read
    1f20:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f24:	78 2e       	mov	r7, r24
 							//wrap if necessary

							//wait for byte (y coord of end)
						q = USART_recv();	//store it and increment RX_read
    1f26:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f2a:	68 2e       	mov	r6, r24
 							//wrap if necessary

						// get integer color
						color = USART_recv();	//store it and increment RX_read
    1f2c:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f30:	08 2f       	mov	r16, r24
    1f32:	10 e0       	ldi	r17, 0x00	; 0
						color = color << 8;
    1f34:	10 2f       	mov	r17, r16
    1f36:	00 27       	eor	r16, r16
						color |= USART_recv();
    1f38:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f3c:	08 2b       	or	r16, r24

						LCD_drawLine(y ,z , temp, q, color);
    1f3e:	26 2d       	mov	r18, r6
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	47 2d       	mov	r20, r7
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	6f 2d       	mov	r22, r15
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	8e 2d       	mov	r24, r14
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <_Z12LCD_drawLinejjjjj>
					break;
    1f52:	6a cf       	rjmp	.-300    	; 0x1e28 <main+0x68>
					//************************************************************************************************************
 					case 15:	//draw box
						//need 5 bytes, RX_read already pointing at the first
					
							//wait for byte (x coord of corner1)
						y = USART_recv();	//store it and increment RX_read
    1f54:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f58:	e8 2e       	mov	r14, r24
 							//wrap if necessary
						
							//wait for byte (y coord of corner1)
						z = USART_recv();	//store it and increment RX_read
    1f5a:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f5e:	f8 2e       	mov	r15, r24
 							//wrap if necessary

							//wait for byte (x coord of corner2)
						temp = USART_recv();	//store it and increment RX_read
    1f60:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f64:	78 2e       	mov	r7, r24
 							//wrap if necessary

							//wait for byte (y coord of corner2)
						q = USART_recv();	//store it and increment RX_read
    1f66:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f6a:	68 2e       	mov	r6, r24
 							//wrap if necessary

						// get integer color
						color = USART_recv();	//store it and increment RX_read
    1f6c:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f70:	08 2f       	mov	r16, r24
    1f72:	10 e0       	ldi	r17, 0x00	; 0
						color = color << 8;
    1f74:	10 2f       	mov	r17, r16
    1f76:	00 27       	eor	r16, r16
						color |= USART_recv();
    1f78:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f7c:	08 2b       	or	r16, r24

						LCD_drawRectangle(y ,z , temp, q, color);
    1f7e:	26 2d       	mov	r18, r6
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	47 2d       	mov	r20, r7
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	6f 2d       	mov	r22, r15
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	8e 2d       	mov	r24, r14
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_Z17LCD_drawRectanglejjjjj>
					break;
    1f92:	4a cf       	rjmp	.-364    	; 0x1e28 <main+0x68>
					//************************************************************************************************************
					case 16:		//set pixel
						//need 3 bytes, RX_read already pointing at the first
					
							//wait for byte (x coord of pixel)
						z = USART_recv();	//store it and increment RX_read
    1f94:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f98:	f8 2e       	mov	r15, r24
 							//wrap if necessary

							//wait for byte (y coord of pixel)d
						temp = USART_recv();
    1f9a:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1f9e:	e8 2e       	mov	r14, r24
 					

							//wait for byte (S_R of pixel)
						// get integer color
						color = USART_recv();	//store it and increment RX_read
    1fa0:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1fa4:	08 2f       	mov	r16, r24
    1fa6:	10 e0       	ldi	r17, 0x00	; 0
						color = color << 8;
    1fa8:	10 2f       	mov	r17, r16
    1faa:	00 27       	eor	r16, r16
						color |= USART_recv();
    1fac:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1fb0:	a8 01       	movw	r20, r16
    1fb2:	48 2b       	or	r20, r24
 					
					
						LCD_setPixel(z, temp, color);		//draw the pixel
    1fb4:	6e 2d       	mov	r22, r14
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	8f 2d       	mov	r24, r15
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 45 0a 	call	0x148a	; 0x148a <_Z12LCD_setPixeljjj>
					break;
    1fc0:	33 cf       	rjmp	.-410    	; 0x1e28 <main+0x68>
					// ASCII 17 is XON so we can't use it for a command
					case 18:	//draw filled box
						//need 5 bytes, RX_read already pointing at the first
					
							//wait for byte (x coord of corner1)
						y = USART_recv();	//store it and increment RX_read
    1fc2:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1fc6:	e8 2e       	mov	r14, r24
 							//wrap if necessary
						
							//wait for byte (y coord of corner1)
						z = USART_recv();	//store it and increment RX_read
    1fc8:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1fcc:	f8 2e       	mov	r15, r24
 							//wrap if necessary

							//wait for byte (x coord of corner2)
						temp = USART_recv();	//store it and increment RX_read
    1fce:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1fd2:	78 2e       	mov	r7, r24
 							//wrap if necessary

							//wait for byte (y coord of corner2)
						q = USART_recv();	//store it and increment RX_read
    1fd4:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1fd8:	68 2e       	mov	r6, r24
 							//wrap if necessary
					
							//wait for byte (fill)
						// get integer color
						color = USART_recv();	//store it and increment RX_read
    1fda:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1fde:	08 2f       	mov	r16, r24
    1fe0:	10 e0       	ldi	r17, 0x00	; 0
						color = color << 8;
    1fe2:	10 2f       	mov	r17, r16
    1fe4:	00 27       	eor	r16, r16
						color |= USART_recv();
    1fe6:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    1fea:	08 2b       	or	r16, r24
 							//wrap if necessary


						LCD_fillRectangle(y ,z , temp, q, color);
    1fec:	26 2d       	mov	r18, r6
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	47 2d       	mov	r20, r7
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	6f 2d       	mov	r22, r15
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	8e 2d       	mov	r24, r14
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_Z17LCD_fillRectanglejjjjj>
					break;
    2000:	13 cf       	rjmp	.-474    	; 0x1e28 <main+0x68>
					case 20: // draw text
						y = USART_recv();
    2002:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    2006:	f8 2e       	mov	r15, r24

						z = USART_recv();
    2008:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    200c:	e8 2e       	mov	r14, r24

						// size
						temp = USART_recv();
    200e:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    2012:	78 2e       	mov	r7, r24

						// get integer color
						color = USART_recv();	//store it and increment RX_read
    2014:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    2018:	08 2f       	mov	r16, r24
    201a:	10 e0       	ldi	r17, 0x00	; 0
						color = color << 8;
    201c:	10 2f       	mov	r17, r16
    201e:	00 27       	eor	r16, r16
						color |= USART_recv();
    2020:	0e 94 bc 10 	call	0x2178	; 0x2178 <_Z10USART_recvv>
    2024:	08 2b       	or	r16, r24

						// send string end with 0
						LCD_drawString(NULL, y, z, temp, color, USART_recv);
    2026:	27 2d       	mov	r18, r7
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4e 2d       	mov	r20, r14
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	6f 2d       	mov	r22, r15
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	0f 2e       	mov	r0, r31
    2034:	fc eb       	ldi	r31, 0xBC	; 188
    2036:	ef 2e       	mov	r14, r31
    2038:	f0 e1       	ldi	r31, 0x10	; 16
    203a:	ff 2e       	mov	r15, r31
    203c:	f0 2d       	mov	r31, r0
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_Z14LCD_drawStringPKcjjjjPFhvE>
					break;
    2046:	f0 ce       	rjmp	.-544    	; 0x1e28 <main+0x68>

00002048 <_ZN7TSPointC1Eiii>:

 TSPoint::TSPoint(void) {
	 x = y = 0;
 }

 TSPoint::TSPoint(int16_t x0, int16_t y0, int16_t z0) {
    2048:	fc 01       	movw	r30, r24
	 x = x0;
    204a:	71 83       	std	Z+1, r23	; 0x01
    204c:	60 83       	st	Z, r22
	 y = y0;
    204e:	53 83       	std	Z+3, r21	; 0x03
    2050:	42 83       	std	Z+2, r20	; 0x02
	 z = z0;
    2052:	35 83       	std	Z+5, r19	; 0x05
    2054:	24 83       	std	Z+4, r18	; 0x04
    2056:	08 95       	ret

00002058 <_Z12RX_availablev>:
	sei();//Enable Interrupts
}


uint8_t RX_available() {
	return RX_bytes;
    2058:	80 91 b7 01 	lds	r24, 0x01B7
}
    205c:	08 95       	ret

0000205e <_Z11USART_flushv>:

void USART_flush() {
	cli();
    205e:	f8 94       	cli
	RX_read=0;
    2060:	10 92 b9 01 	sts	0x01B9, r1
    2064:	10 92 b8 01 	sts	0x01B8, r1
	RX_in=0;
    2068:	10 92 ba 01 	sts	0x01BA, r1
	RX_bytes=0;
    206c:	10 92 b7 01 	sts	0x01B7, r1
	sei();
    2070:	78 94       	sei
    2072:	08 95       	ret

00002074 <_Z10USART_Initj>:
 char buf[MAX_STR_LEN + 1];

 void USART_Init( unsigned int ubrr)
 {
	 // Set baud rate
	 UBRR0H = (unsigned char)(ubrr>>8);
    2074:	90 93 c5 00 	sts	0x00C5, r25
	 UBRR0L = (unsigned char)ubrr;
    2078:	80 93 c4 00 	sts	0x00C4, r24
	 
	 // Enable receiver and transmitter
	 UCSR0A = (1<<U2X0);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	80 93 c0 00 	sts	0x00C0, r24
	 UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Enable Interrupts on receive character
    2082:	88 e9       	ldi	r24, 0x98	; 152
    2084:	80 93 c1 00 	sts	0x00C1, r24
	 
	 UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
    2088:	86 e0       	ldi	r24, 0x06	; 6
    208a:	80 93 c2 00 	sts	0x00C2, r24
	 sei();
    208e:	78 94       	sei
    2090:	08 95       	ret

00002092 <_Z14USART_set_baudc>:
	sei();

}
 void USART_set_baud(char b)
 {
	 if (b == 1) USART_Init( 1000000/2400-1);//4800
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	29 f4       	brne	.+10     	; 0x20a0 <_Z14USART_set_baudc+0xe>
    2096:	8f e9       	ldi	r24, 0x9F	; 159
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	0e 94 3a 10 	call	0x2074	; 0x2074 <_Z10USART_Initj>
    209e:	08 95       	ret
	 else if (b == 2) USART_Init( 1000000/4800-1);//9600
    20a0:	82 30       	cpi	r24, 0x02	; 2
    20a2:	29 f4       	brne	.+10     	; 0x20ae <_Z14USART_set_baudc+0x1c>
    20a4:	8f ec       	ldi	r24, 0xCF	; 207
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 3a 10 	call	0x2074	; 0x2074 <_Z10USART_Initj>
    20ac:	08 95       	ret
	 else if (b == 3) USART_Init( 1000000/9600-1);//19200
    20ae:	83 30       	cpi	r24, 0x03	; 3
    20b0:	29 f4       	brne	.+10     	; 0x20bc <_Z14USART_set_baudc+0x2a>
    20b2:	87 e6       	ldi	r24, 0x67	; 103
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 3a 10 	call	0x2074	; 0x2074 <_Z10USART_Initj>
    20ba:	08 95       	ret
	 else if (b == 4) USART_Init( 1000000/19200-1);//38400
    20bc:	84 30       	cpi	r24, 0x04	; 4
    20be:	29 f4       	brne	.+10     	; 0x20ca <_Z14USART_set_baudc+0x38>
    20c0:	83 e3       	ldi	r24, 0x33	; 51
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 94 3a 10 	call	0x2074	; 0x2074 <_Z10USART_Initj>
    20c8:	08 95       	ret
	 else if (b == 5) USART_Init( 1000000/28800-1);//57600
    20ca:	85 30       	cpi	r24, 0x05	; 5
    20cc:	29 f4       	brne	.+10     	; 0x20d8 <_Z14USART_set_baudc+0x46>
    20ce:	81 e2       	ldi	r24, 0x21	; 33
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 94 3a 10 	call	0x2074	; 0x2074 <_Z10USART_Initj>
    20d6:	08 95       	ret
	 else if (b == 6) USART_Init( 1000000/57600-1);//115200
    20d8:	86 30       	cpi	r24, 0x06	; 6
    20da:	21 f4       	brne	.+8      	; 0x20e4 <_Z14USART_set_baudc+0x52>
    20dc:	80 e1       	ldi	r24, 0x10	; 16
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 3a 10 	call	0x2074	; 0x2074 <_Z10USART_Initj>
    20e4:	08 95       	ret

000020e6 <_Z10USART_sendh>:
 }

 void USART_send(uint8_t byte)
 {
	 /* Wait for empty transmit buffer */
	 while ( !( UCSR0A & (1<<UDRE0)) );
    20e6:	e0 ec       	ldi	r30, 0xC0	; 192
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	90 81       	ld	r25, Z
    20ec:	95 ff       	sbrs	r25, 5
    20ee:	fd cf       	rjmp	.-6      	; 0x20ea <_Z10USART_sendh+0x4>
	 /* Put data into buffer, sends the data */
	 UDR0 = byte;
    20f0:	80 93 c6 00 	sts	0x00C6, r24
    20f4:	08 95       	ret

000020f6 <__vector_18>:
uint16_t RX_read = 0;
volatile uint8_t RX_bytes=0;	//keeps track of the # of bytes in the RX buffer
volatile uint8_t RX_pause=0;	//flags if RX has been suspended

ISR (USART_RX_vect)//USART Receive Interrupt
{
    20f6:	1f 92       	push	r1
    20f8:	0f 92       	push	r0
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	0f 92       	push	r0
    20fe:	11 24       	eor	r1, r1
    2100:	2f 93       	push	r18
    2102:	3f 93       	push	r19
    2104:	4f 93       	push	r20
    2106:	5f 93       	push	r21
    2108:	6f 93       	push	r22
    210a:	7f 93       	push	r23
    210c:	8f 93       	push	r24
    210e:	9f 93       	push	r25
    2110:	af 93       	push	r26
    2112:	bf 93       	push	r27
    2114:	ef 93       	push	r30
    2116:	ff 93       	push	r31
	cli();//Disable Interrupts
    2118:	f8 94       	cli

	RX_array[RX_in++] = UDR0;	//get recieved byte
    211a:	e0 91 ba 01 	lds	r30, 0x01BA
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	8e 0f       	add	r24, r30
    2122:	80 93 ba 01 	sts	0x01BA, r24
    2126:	80 91 c6 00 	lds	r24, 0x00C6
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	e5 54       	subi	r30, 0x45	; 69
    212e:	fe 4f       	sbci	r31, 0xFE	; 254
    2130:	80 83       	st	Z, r24
	if (RX_in >= RX_BUFFER_SIZE) RX_in = 0;	//wrap RX_in
    2132:	80 91 ba 01 	lds	r24, 0x01BA
	RX_bytes++;			//keep count of bytes recieved
    2136:	80 91 b7 01 	lds	r24, 0x01B7
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	80 93 b7 01 	sts	0x01B7, r24
	
	//test for buffer close to full
	if (RX_bytes > (unsigned char)(RX_BUFFER_SIZE *.75))
    2140:	80 91 b7 01 	lds	r24, 0x01B7
    2144:	81 3c       	cpi	r24, 0xC1	; 193
    2146:	30 f0       	brcs	.+12     	; 0x2154 <__vector_18+0x5e>
	{
		USART_send(XOFF);		//send XOFF
    2148:	83 e1       	ldi	r24, 0x13	; 19
    214a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_Z10USART_sendh>
		RX_pause=1;		//flag reception suspended
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	80 93 b6 01 	sts	0x01B6, r24
	}
	
	sei();//Enable Interrupts
    2154:	78 94       	sei
}
    2156:	ff 91       	pop	r31
    2158:	ef 91       	pop	r30
    215a:	bf 91       	pop	r27
    215c:	af 91       	pop	r26
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	7f 91       	pop	r23
    2164:	6f 91       	pop	r22
    2166:	5f 91       	pop	r21
    2168:	4f 91       	pop	r20
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <_Z10USART_recvv>:
	 /* Put data into buffer, sends the data */
	 UDR0 = byte;
 }

 uint8_t USART_recv(void)	//retrieves a character from the RX_buffer and does book-keeping
 {
    2178:	cf 93       	push	r28
	 uint8_t x;

	 while(RX_bytes==0);				//wait for data to be available
    217a:	80 91 b7 01 	lds	r24, 0x01B7
    217e:	88 23       	and	r24, r24
    2180:	e1 f3       	breq	.-8      	; 0x217a <_Z10USART_recvv+0x2>
	 x = RX_array[RX_read++];			//get char from buffer and increment read pointer
    2182:	80 91 b8 01 	lds	r24, 0x01B8
    2186:	90 91 b9 01 	lds	r25, 0x01B9
    218a:	9c 01       	movw	r18, r24
    218c:	2f 5f       	subi	r18, 0xFF	; 255
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	30 93 b9 01 	sts	0x01B9, r19
    2194:	20 93 b8 01 	sts	0x01B8, r18
    2198:	fc 01       	movw	r30, r24
    219a:	e5 54       	subi	r30, 0x45	; 69
    219c:	fe 4f       	sbci	r31, 0xFE	; 254
    219e:	c0 81       	ld	r28, Z
	 if(RX_read >= RX_BUFFER_SIZE) RX_read = 0;	//if the read pointer reaches the end of the buffer, wrap back to the beginning
    21a0:	2f 3f       	cpi	r18, 0xFF	; 255
    21a2:	31 05       	cpc	r19, r1
    21a4:	29 f0       	breq	.+10     	; 0x21b0 <_Z10USART_recvv+0x38>
    21a6:	20 f0       	brcs	.+8      	; 0x21b0 <_Z10USART_recvv+0x38>
    21a8:	10 92 b9 01 	sts	0x01B9, r1
    21ac:	10 92 b8 01 	sts	0x01B8, r1
	 cli();						//interrupts must be disabled when changing RX_bytes, since it can be chabged here and in the ISR
    21b0:	f8 94       	cli
	 RX_bytes--;
    21b2:	90 91 b7 01 	lds	r25, 0x01B7
    21b6:	91 50       	subi	r25, 0x01	; 1
    21b8:	90 93 b7 01 	sts	0x01B7, r25
	 sei();
    21bc:	78 94       	sei
	 
	 //check to see if we need to re-enable reception
	 if (RX_pause==1)		//if USART reception is suspended
    21be:	80 91 b6 01 	lds	r24, 0x01B6
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	49 f4       	brne	.+18     	; 0x21d8 <_Z10USART_recvv+0x60>
	 if (RX_bytes < (unsigned char)(RX_BUFFER_SIZE *.25) )		//if RX_buffer is suitably empty
    21c6:	80 91 b7 01 	lds	r24, 0x01B7
    21ca:	80 34       	cpi	r24, 0x40	; 64
    21cc:	28 f4       	brcc	.+10     	; 0x21d8 <_Z10USART_recvv+0x60>
	 {
		 USART_send(XON);	//resume reception
    21ce:	81 e1       	ldi	r24, 0x11	; 17
    21d0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_Z10USART_sendh>
		 RX_pause=0;	//flag it
    21d4:	10 92 b6 01 	sts	0x01B6, r1
	 }

	 return x;
 }
    21d8:	8c 2f       	mov	r24, r28
    21da:	cf 91       	pop	r28
    21dc:	08 95       	ret

000021de <_Z10USART_putsPKc>:
	 va_end(args);

	 USART_puts(buf);
 }

 void USART_puts(const char *str) {
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	ec 01       	movw	r28, r24
	 while(*str) {
    21e4:	88 81       	ld	r24, Y
    21e6:	88 23       	and	r24, r24
    21e8:	31 f0       	breq	.+12     	; 0x21f6 <_Z10USART_putsPKc+0x18>
    21ea:	21 96       	adiw	r28, 0x01	; 1
		 USART_send(*str++);
    21ec:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_Z10USART_sendh>

	 USART_puts(buf);
 }

 void USART_puts(const char *str) {
	 while(*str) {
    21f0:	89 91       	ld	r24, Y+
    21f2:	81 11       	cpse	r24, r1
    21f4:	fb cf       	rjmp	.-10     	; 0x21ec <_Z10USART_putsPKc+0xe>
		 USART_send(*str++);
	 }
 }
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <_Z12USART_printfPKcz>:
	 }

	 return x;
 }

 void USART_printf(const char *fmt, ...) {
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	9e 01       	movw	r18, r28
    2206:	2b 5f       	subi	r18, 0xFB	; 251
    2208:	3f 4f       	sbci	r19, 0xFF	; 255
    220a:	f9 01       	movw	r30, r18
    220c:	41 91       	ld	r20, Z+
    220e:	51 91       	ld	r21, Z+
    2210:	9f 01       	movw	r18, r30
	 va_list args;
	 va_start(args, fmt);
	 vsnprintf(buf, sizeof(buf), fmt, args);
    2212:	61 e8       	ldi	r22, 0x81	; 129
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	85 e3       	ldi	r24, 0x35	; 53
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	0e 94 c7 19 	call	0x338e	; 0x338e <vsnprintf>
	 va_end(args);

	 USART_puts(buf);
    221e:	85 e3       	ldi	r24, 0x35	; 53
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	0e 94 ef 10 	call	0x21de	; 0x21de <_Z10USART_putsPKc>
 }
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <_Z16TouchScreen_initv>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void TouchScreen_init() {
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    //16Mhz/128 = 125Khz the ADC reference clock
    222c:	ea e7       	ldi	r30, 0x7A	; 122
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	87 60       	ori	r24, 0x07	; 7
    2234:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);                //Voltage reference from Avcc (5v)
    2236:	ac e7       	ldi	r26, 0x7C	; 124
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	8c 91       	ld	r24, X
    223c:	80 64       	ori	r24, 0x40	; 64
    223e:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);                //Turn on ADC
    2240:	80 81       	ld	r24, Z
    2242:	80 68       	ori	r24, 0x80	; 128
    2244:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Do an initial conversion because this one is the slowest and to ensure that everything is up and running
    2246:	80 81       	ld	r24, Z
    2248:	80 64       	ori	r24, 0x40	; 64
    224a:	80 83       	st	Z, r24
    224c:	08 95       	ret

0000224e <_Z20TouchScreen_getPointv>:
}


#define NUMSAMPLES 2

TSPoint TouchScreen_getPoint(void) {
    224e:	8f 92       	push	r8
    2250:	9f 92       	push	r9
    2252:	af 92       	push	r10
    2254:	bf 92       	push	r11
    2256:	cf 92       	push	r12
    2258:	df 92       	push	r13
    225a:	ef 92       	push	r14
    225c:	ff 92       	push	r15
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	60 97       	sbiw	r28, 0x10	; 16
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, valid;
	uint16_t _rxplate = 300;

	valid = 1;

	YP_HIZ
    2276:	3a 98       	cbi	0x07, 2	; 7
    2278:	42 98       	cbi	0x08, 2	; 8
	YM_HIZ
    227a:	38 98       	cbi	0x07, 0	; 7
    227c:	40 98       	cbi	0x08, 0	; 8

	XP_OUTPUT
    227e:	3b 9a       	sbi	0x07, 3	; 7
	XP_HIGH
    2280:	43 9a       	sbi	0x08, 3	; 8

	XM_OUTPUT
    2282:	39 9a       	sbi	0x07, 1	; 7
	XM_LOW
    2284:	41 98       	cbi	0x08, 1	; 8
    2286:	ae 01       	movw	r20, r28
    2288:	43 5f       	subi	r20, 0xF3	; 243
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
    228c:	be 01       	movw	r22, r28
    228e:	6f 5e       	subi	r22, 0xEF	; 239
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	9a 01       	movw	r18, r20
}



inline uint16_t read_adc(uint8_t channel) {
	ADMUX &= 0xF0;                    //Clear the older channel that was read
    2294:	0f 2e       	mov	r0, r31
    2296:	fc e7       	ldi	r31, 0x7C	; 124
    2298:	ef 2e       	mov	r14, r31
    229a:	f1 2c       	mov	r15, r1
    229c:	f0 2d       	mov	r31, r0
	ADMUX |= channel;                //Defines the new ADC channel to be read
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
    229e:	ea e7       	ldi	r30, 0x7A	; 122
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
	return ADCW;                    //Returns the ADC value of the chosen channel
    22a2:	08 e7       	ldi	r16, 0x78	; 120
    22a4:	10 e0       	ldi	r17, 0x00	; 0
}



inline uint16_t read_adc(uint8_t channel) {
	ADMUX &= 0xF0;                    //Clear the older channel that was read
    22a6:	d7 01       	movw	r26, r14
    22a8:	8c 91       	ld	r24, X
    22aa:	80 7f       	andi	r24, 0xF0	; 240
    22ac:	8c 93       	st	X, r24
	ADMUX |= channel;                //Defines the new ADC channel to be read
    22ae:	8c 91       	ld	r24, X
    22b0:	82 60       	ori	r24, 0x02	; 2
    22b2:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
    22b4:	80 81       	ld	r24, Z
    22b6:	80 64       	ori	r24, 0x40	; 64
    22b8:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
    22ba:	80 81       	ld	r24, Z
    22bc:	86 fd       	sbrc	r24, 6
    22be:	fd cf       	rjmp	.-6      	; 0x22ba <_Z20TouchScreen_getPointv+0x6c>
	return ADCW;                    //Returns the ADC value of the chosen channel
    22c0:	d8 01       	movw	r26, r16
    22c2:	8d 91       	ld	r24, X+
    22c4:	9c 91       	ld	r25, X

	XM_OUTPUT
	XM_LOW

	for (i=0; i<NUMSAMPLES; i++) {
		samples[i] = read_adc(0x02);
    22c6:	d9 01       	movw	r26, r18
    22c8:	8d 93       	st	X+, r24
    22ca:	9d 93       	st	X+, r25
    22cc:	9d 01       	movw	r18, r26
	XP_HIGH

	XM_OUTPUT
	XM_LOW

	for (i=0; i<NUMSAMPLES; i++) {
    22ce:	a6 17       	cp	r26, r22
    22d0:	b7 07       	cpc	r27, r23
    22d2:	49 f7       	brne	.-46     	; 0x22a6 <_Z20TouchScreen_getPointv+0x58>
		samples[i] = read_adc(0x02);
	}

	#if NUMSAMPLES == 2
	if (samples[0] != samples[1]) { valid = 0; }
    22d4:	cd 84       	ldd	r12, Y+13	; 0x0d
    22d6:	de 84       	ldd	r13, Y+14	; 0x0e
    22d8:	ef 84       	ldd	r14, Y+15	; 0x0f
    22da:	f8 88       	ldd	r15, Y+16	; 0x10
	#endif

	x = (1023-samples[NUMSAMPLES/2]);
    22dc:	0f ef       	ldi	r16, 0xFF	; 255
    22de:	13 e0       	ldi	r17, 0x03	; 3
    22e0:	0e 19       	sub	r16, r14
    22e2:	1f 09       	sbc	r17, r15

	XP_HIZ
    22e4:	3b 98       	cbi	0x07, 3	; 7
    22e6:	43 98       	cbi	0x08, 3	; 8
	XM_HIZ
    22e8:	39 98       	cbi	0x07, 1	; 7
    22ea:	41 98       	cbi	0x08, 1	; 8
	
	YP_OUTPUT
    22ec:	3a 9a       	sbi	0x07, 2	; 7
	YP_HIGH
    22ee:	42 9a       	sbi	0x08, 2	; 8

	YM_OUTPUT
    22f0:	38 9a       	sbi	0x07, 0	; 7
	YM_LOW
    22f2:	40 98       	cbi	0x08, 0	; 8
}



inline uint16_t read_adc(uint8_t channel) {
	ADMUX &= 0xF0;                    //Clear the older channel that was read
    22f4:	0f 2e       	mov	r0, r31
    22f6:	fc e7       	ldi	r31, 0x7C	; 124
    22f8:	af 2e       	mov	r10, r31
    22fa:	b1 2c       	mov	r11, r1
    22fc:	f0 2d       	mov	r31, r0
	ADMUX |= channel;                //Defines the new ADC channel to be read
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
    22fe:	ea e7       	ldi	r30, 0x7A	; 122
    2300:	f0 e0       	ldi	r31, 0x00	; 0
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
	return ADCW;                    //Returns the ADC value of the chosen channel
    2302:	28 e7       	ldi	r18, 0x78	; 120
    2304:	30 e0       	ldi	r19, 0x00	; 0
}



inline uint16_t read_adc(uint8_t channel) {
	ADMUX &= 0xF0;                    //Clear the older channel that was read
    2306:	d5 01       	movw	r26, r10
    2308:	8c 91       	ld	r24, X
    230a:	80 7f       	andi	r24, 0xF0	; 240
    230c:	8c 93       	st	X, r24
	ADMUX |= channel;                //Defines the new ADC channel to be read
    230e:	8c 91       	ld	r24, X
    2310:	81 60       	ori	r24, 0x01	; 1
    2312:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
    2314:	80 81       	ld	r24, Z
    2316:	80 64       	ori	r24, 0x40	; 64
    2318:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
    231a:	80 81       	ld	r24, Z
    231c:	86 fd       	sbrc	r24, 6
    231e:	fd cf       	rjmp	.-6      	; 0x231a <_Z20TouchScreen_getPointv+0xcc>
	return ADCW;                    //Returns the ADC value of the chosen channel
    2320:	d9 01       	movw	r26, r18
    2322:	8d 91       	ld	r24, X+
    2324:	9c 91       	ld	r25, X

	YM_OUTPUT
	YM_LOW
	
	for (i=0; i<NUMSAMPLES; i++) {
		samples[i] = read_adc(0x01);
    2326:	da 01       	movw	r26, r20
    2328:	8d 93       	st	X+, r24
    232a:	9d 93       	st	X+, r25
    232c:	ad 01       	movw	r20, r26
	YP_HIGH

	YM_OUTPUT
	YM_LOW
	
	for (i=0; i<NUMSAMPLES; i++) {
    232e:	a6 17       	cp	r26, r22
    2330:	b7 07       	cpc	r27, r23
    2332:	49 f7       	brne	.-46     	; 0x2306 <_Z20TouchScreen_getPointv+0xb8>
		samples[i] = read_adc(0x01);
	}

	#if NUMSAMPLES == 2
	if (samples[0] != samples[1]) { valid = 0; }
    2334:	4f 85       	ldd	r20, Y+15	; 0x0f
    2336:	58 89       	ldd	r21, Y+16	; 0x10
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	84 17       	cp	r24, r20
    233e:	95 07       	cpc	r25, r21
    2340:	31 f4       	brne	.+12     	; 0x234e <_Z20TouchScreen_getPointv+0x100>
	for (i=0; i<NUMSAMPLES; i++) {
		samples[i] = read_adc(0x02);
	}

	#if NUMSAMPLES == 2
	if (samples[0] != samples[1]) { valid = 0; }
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	ce 14       	cp	r12, r14
    2346:	df 04       	cpc	r13, r15
    2348:	19 f0       	breq	.+6      	; 0x2350 <_Z20TouchScreen_getPointv+0x102>
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <_Z20TouchScreen_getPointv+0x102>
	for (i=0; i<NUMSAMPLES; i++) {
		samples[i] = read_adc(0x01);
	}

	#if NUMSAMPLES == 2
	if (samples[0] != samples[1]) { valid = 0; }
    234e:	90 e0       	ldi	r25, 0x00	; 0
	#endif

	y = (1023-samples[NUMSAMPLES/2]);
    2350:	2f ef       	ldi	r18, 0xFF	; 255
    2352:	33 e0       	ldi	r19, 0x03	; 3
    2354:	79 01       	movw	r14, r18
    2356:	e4 1a       	sub	r14, r20
    2358:	f5 0a       	sbc	r15, r21

	// Set X+ to ground
	XP_OUTPUT
    235a:	3b 9a       	sbi	0x07, 3	; 7
	XP_LOW
    235c:	43 98       	cbi	0x08, 3	; 8

	// Set Y- to VCC
	YM_HIGH
    235e:	40 9a       	sbi	0x08, 0	; 8
	
	// Hi-Z X- and Y+
	YP_HIZ
    2360:	3a 98       	cbi	0x07, 2	; 7
    2362:	42 98       	cbi	0x08, 2	; 8
}



inline uint16_t read_adc(uint8_t channel) {
	ADMUX &= 0xF0;                    //Clear the older channel that was read
    2364:	ec e7       	ldi	r30, 0x7C	; 124
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	80 7f       	andi	r24, 0xF0	; 240
    236c:	80 83       	st	Z, r24
	ADMUX |= channel;                //Defines the new ADC channel to be read
    236e:	80 81       	ld	r24, Z
    2370:	81 60       	ori	r24, 0x01	; 1
    2372:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
    2374:	ea e7       	ldi	r30, 0x7A	; 122
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	80 64       	ori	r24, 0x40	; 64
    237c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
    237e:	80 81       	ld	r24, Z
    2380:	86 fd       	sbrc	r24, 6
    2382:	fd cf       	rjmp	.-6      	; 0x237e <_Z20TouchScreen_getPointv+0x130>
	return ADCW;                    //Returns the ADC value of the chosen channel
    2384:	c0 90 78 00 	lds	r12, 0x0078
    2388:	d0 90 79 00 	lds	r13, 0x0079
}



inline uint16_t read_adc(uint8_t channel) {
	ADMUX &= 0xF0;                    //Clear the older channel that was read
    238c:	ec e7       	ldi	r30, 0x7C	; 124
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	80 7f       	andi	r24, 0xF0	; 240
    2394:	80 83       	st	Z, r24
	ADMUX |= channel;                //Defines the new ADC channel to be read
    2396:	80 81       	ld	r24, Z
    2398:	82 60       	ori	r24, 0x02	; 2
    239a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
    239c:	ea e7       	ldi	r30, 0x7A	; 122
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	80 64       	ori	r24, 0x40	; 64
    23a4:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
    23a6:	80 81       	ld	r24, Z
    23a8:	86 fd       	sbrc	r24, 6
    23aa:	fd cf       	rjmp	.-6      	; 0x23a6 <_Z20TouchScreen_getPointv+0x158>
	return ADCW;                    //Returns the ADC value of the chosen channel
    23ac:	60 91 78 00 	lds	r22, 0x0078
    23b0:	70 91 79 00 	lds	r23, 0x0079
		z = rtouch;
		} else {
		z = (1023-(z2-z1));
	}

	if (! valid) {
    23b4:	99 23       	and	r25, r25
    23b6:	b9 f1       	breq	.+110    	; 0x2426 <_Z20TouchScreen_getPointv+0x1d8>
	int z2 = read_adc(0x02);

	if (_rxplate != 0) {
		// now read the x
		float rtouch;
		rtouch = z2;
    23b8:	07 2e       	mov	r0, r23
    23ba:	00 0c       	add	r0, r0
    23bc:	88 0b       	sbc	r24, r24
    23be:	99 0b       	sbc	r25, r25
    23c0:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
    23c4:	4b 01       	movw	r8, r22
    23c6:	5c 01       	movw	r10, r24
		rtouch /= z1;
    23c8:	b6 01       	movw	r22, r12
    23ca:	dd 0c       	add	r13, r13
    23cc:	88 0b       	sbc	r24, r24
    23ce:	99 0b       	sbc	r25, r25
    23d0:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
    23d4:	9b 01       	movw	r18, r22
    23d6:	ac 01       	movw	r20, r24
    23d8:	c5 01       	movw	r24, r10
    23da:	b4 01       	movw	r22, r8
    23dc:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__divsf3>
		rtouch -= 1;
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 75 12 	call	0x24ea	; 0x24ea <__subsf3>
    23ec:	4b 01       	movw	r8, r22
    23ee:	5c 01       	movw	r10, r24
		rtouch *= x;
    23f0:	b8 01       	movw	r22, r16
    23f2:	01 2e       	mov	r0, r17
    23f4:	00 0c       	add	r0, r0
    23f6:	88 0b       	sbc	r24, r24
    23f8:	99 0b       	sbc	r25, r25
    23fa:	0e 94 8c 13 	call	0x2718	; 0x2718 <__floatsisf>
    23fe:	a5 01       	movw	r20, r10
    2400:	94 01       	movw	r18, r8
    2402:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
		rtouch *= _rxplate;
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	46 e9       	ldi	r20, 0x96	; 150
    240c:	53 e4       	ldi	r21, 0x43	; 67
    240e:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
		rtouch /= 1024;
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5a e3       	ldi	r21, 0x3A	; 58
    241a:	0e 94 18 14 	call	0x2830	; 0x2830 <__mulsf3>
		
		z = rtouch;
    241e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__fixsfsi>
    2422:	6b 01       	movw	r12, r22
    2424:	02 c0       	rjmp	.+4      	; 0x242a <_Z20TouchScreen_getPointv+0x1dc>
		} else {
		z = (1023-(z2-z1));
	}

	if (! valid) {
		z = 0;
    2426:	c1 2c       	mov	r12, r1
    2428:	d1 2c       	mov	r13, r1
	}

	return TSPoint(map(x, TS_MINX, TS_MAXX, 240, 0), map(y, TS_MINY, TS_MAXY, 320, 0), z);
    242a:	c7 01       	movw	r24, r14
    242c:	ff 0c       	add	r15, r15
    242e:	aa 0b       	sbc	r26, r26
    2430:	bb 0b       	sbc	r27, r27

inline uint16_t read_adc(uint8_t channel);

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2432:	9c 01       	movw	r18, r24
    2434:	ad 01       	movw	r20, r26
    2436:	28 57       	subi	r18, 0x78	; 120
    2438:	31 09       	sbc	r19, r1
    243a:	41 09       	sbc	r20, r1
    243c:	51 09       	sbc	r21, r1
    243e:	a0 ec       	ldi	r26, 0xC0	; 192
    2440:	be ef       	ldi	r27, 0xFE	; 254
    2442:	0e 94 34 18 	call	0x3068	; 0x3068 <__mulohisi3>
    2446:	24 e3       	ldi	r18, 0x34	; 52
    2448:	33 e0       	ldi	r19, 0x03	; 3
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	50 e0       	ldi	r21, 0x00	; 0
    244e:	0e 94 01 18 	call	0x3002	; 0x3002 <__divmodsi4>
    2452:	49 01       	movw	r8, r18
    2454:	5a 01       	movw	r10, r20
    2456:	b0 e4       	ldi	r27, 0x40	; 64
    2458:	8b 0e       	add	r8, r27
    245a:	b1 e0       	ldi	r27, 0x01	; 1
    245c:	9b 1e       	adc	r9, r27
    245e:	a1 1c       	adc	r10, r1
    2460:	b1 1c       	adc	r11, r1

	if (! valid) {
		z = 0;
	}

	return TSPoint(map(x, TS_MINX, TS_MAXX, 240, 0), map(y, TS_MINY, TS_MAXY, 320, 0), z);
    2462:	c8 01       	movw	r24, r16
    2464:	11 0f       	add	r17, r17
    2466:	aa 0b       	sbc	r26, r26
    2468:	bb 0b       	sbc	r27, r27

inline uint16_t read_adc(uint8_t channel);

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    246a:	9c 01       	movw	r18, r24
    246c:	ad 01       	movw	r20, r26
    246e:	2c 58       	subi	r18, 0x8C	; 140
    2470:	31 09       	sbc	r19, r1
    2472:	41 09       	sbc	r20, r1
    2474:	51 09       	sbc	r21, r1
    2476:	a0 e1       	ldi	r26, 0x10	; 16
    2478:	bf ef       	ldi	r27, 0xFF	; 255
    247a:	0e 94 34 18 	call	0x3068	; 0x3068 <__mulohisi3>
    247e:	28 ef       	ldi	r18, 0xF8	; 248
    2480:	32 e0       	ldi	r19, 0x02	; 2
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	0e 94 01 18 	call	0x3002	; 0x3002 <__divmodsi4>
    248a:	ca 01       	movw	r24, r20
    248c:	b9 01       	movw	r22, r18
    248e:	60 51       	subi	r22, 0x10	; 16
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	8f 4f       	sbci	r24, 0xFF	; 255
    2494:	9f 4f       	sbci	r25, 0xFF	; 255

	if (! valid) {
		z = 0;
	}

	return TSPoint(map(x, TS_MINX, TS_MAXX, 240, 0), map(y, TS_MINY, TS_MAXY, 320, 0), z);
    2496:	96 01       	movw	r18, r12
    2498:	a4 01       	movw	r20, r8
    249a:	ce 01       	movw	r24, r28
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN7TSPointC1Eiii>
    24a2:	86 e0       	ldi	r24, 0x06	; 6
    24a4:	fe 01       	movw	r30, r28
    24a6:	31 96       	adiw	r30, 0x01	; 1
    24a8:	de 01       	movw	r26, r28
    24aa:	17 96       	adiw	r26, 0x07	; 7
    24ac:	01 90       	ld	r0, Z+
    24ae:	0d 92       	st	X+, r0
    24b0:	8a 95       	dec	r24
    24b2:	e1 f7       	brne	.-8      	; 0x24ac <_Z20TouchScreen_getPointv+0x25e>
    24b4:	2f 81       	ldd	r18, Y+7	; 0x07
    24b6:	38 85       	ldd	r19, Y+8	; 0x08
    24b8:	49 85       	ldd	r20, Y+9	; 0x09
    24ba:	5a 85       	ldd	r21, Y+10	; 0x0a
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
}
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	60 96       	adiw	r28, 0x10	; 16
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
    24e0:	bf 90       	pop	r11
    24e2:	af 90       	pop	r10
    24e4:	9f 90       	pop	r9
    24e6:	8f 90       	pop	r8
    24e8:	08 95       	ret

000024ea <__subsf3>:
    24ea:	50 58       	subi	r21, 0x80	; 128

000024ec <__addsf3>:
    24ec:	bb 27       	eor	r27, r27
    24ee:	aa 27       	eor	r26, r26
    24f0:	0e 94 8d 12 	call	0x251a	; 0x251a <__addsf3x>
    24f4:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__fp_round>
    24f8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__fp_pscA>
    24fc:	38 f0       	brcs	.+14     	; 0x250c <__addsf3+0x20>
    24fe:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__fp_pscB>
    2502:	20 f0       	brcs	.+8      	; 0x250c <__addsf3+0x20>
    2504:	39 f4       	brne	.+14     	; 0x2514 <__addsf3+0x28>
    2506:	9f 3f       	cpi	r25, 0xFF	; 255
    2508:	19 f4       	brne	.+6      	; 0x2510 <__addsf3+0x24>
    250a:	26 f4       	brtc	.+8      	; 0x2514 <__addsf3+0x28>
    250c:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__fp_nan>
    2510:	0e f4       	brtc	.+2      	; 0x2514 <__addsf3+0x28>
    2512:	e0 95       	com	r30
    2514:	e7 fb       	bst	r30, 7
    2516:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__fp_inf>

0000251a <__addsf3x>:
    251a:	e9 2f       	mov	r30, r25
    251c:	0e 94 ef 13 	call	0x27de	; 0x27de <__fp_split3>
    2520:	58 f3       	brcs	.-42     	; 0x24f8 <__addsf3+0xc>
    2522:	ba 17       	cp	r27, r26
    2524:	62 07       	cpc	r22, r18
    2526:	73 07       	cpc	r23, r19
    2528:	84 07       	cpc	r24, r20
    252a:	95 07       	cpc	r25, r21
    252c:	20 f0       	brcs	.+8      	; 0x2536 <__addsf3x+0x1c>
    252e:	79 f4       	brne	.+30     	; 0x254e <__addsf3x+0x34>
    2530:	a6 f5       	brtc	.+104    	; 0x259a <__addsf3x+0x80>
    2532:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__fp_zero>
    2536:	0e f4       	brtc	.+2      	; 0x253a <__addsf3x+0x20>
    2538:	e0 95       	com	r30
    253a:	0b 2e       	mov	r0, r27
    253c:	ba 2f       	mov	r27, r26
    253e:	a0 2d       	mov	r26, r0
    2540:	0b 01       	movw	r0, r22
    2542:	b9 01       	movw	r22, r18
    2544:	90 01       	movw	r18, r0
    2546:	0c 01       	movw	r0, r24
    2548:	ca 01       	movw	r24, r20
    254a:	a0 01       	movw	r20, r0
    254c:	11 24       	eor	r1, r1
    254e:	ff 27       	eor	r31, r31
    2550:	59 1b       	sub	r21, r25
    2552:	99 f0       	breq	.+38     	; 0x257a <__addsf3x+0x60>
    2554:	59 3f       	cpi	r21, 0xF9	; 249
    2556:	50 f4       	brcc	.+20     	; 0x256c <__addsf3x+0x52>
    2558:	50 3e       	cpi	r21, 0xE0	; 224
    255a:	68 f1       	brcs	.+90     	; 0x25b6 <__addsf3x+0x9c>
    255c:	1a 16       	cp	r1, r26
    255e:	f0 40       	sbci	r31, 0x00	; 0
    2560:	a2 2f       	mov	r26, r18
    2562:	23 2f       	mov	r18, r19
    2564:	34 2f       	mov	r19, r20
    2566:	44 27       	eor	r20, r20
    2568:	58 5f       	subi	r21, 0xF8	; 248
    256a:	f3 cf       	rjmp	.-26     	; 0x2552 <__addsf3x+0x38>
    256c:	46 95       	lsr	r20
    256e:	37 95       	ror	r19
    2570:	27 95       	ror	r18
    2572:	a7 95       	ror	r26
    2574:	f0 40       	sbci	r31, 0x00	; 0
    2576:	53 95       	inc	r21
    2578:	c9 f7       	brne	.-14     	; 0x256c <__addsf3x+0x52>
    257a:	7e f4       	brtc	.+30     	; 0x259a <__addsf3x+0x80>
    257c:	1f 16       	cp	r1, r31
    257e:	ba 0b       	sbc	r27, r26
    2580:	62 0b       	sbc	r22, r18
    2582:	73 0b       	sbc	r23, r19
    2584:	84 0b       	sbc	r24, r20
    2586:	ba f0       	brmi	.+46     	; 0x25b6 <__addsf3x+0x9c>
    2588:	91 50       	subi	r25, 0x01	; 1
    258a:	a1 f0       	breq	.+40     	; 0x25b4 <__addsf3x+0x9a>
    258c:	ff 0f       	add	r31, r31
    258e:	bb 1f       	adc	r27, r27
    2590:	66 1f       	adc	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	88 1f       	adc	r24, r24
    2596:	c2 f7       	brpl	.-16     	; 0x2588 <__addsf3x+0x6e>
    2598:	0e c0       	rjmp	.+28     	; 0x25b6 <__addsf3x+0x9c>
    259a:	ba 0f       	add	r27, r26
    259c:	62 1f       	adc	r22, r18
    259e:	73 1f       	adc	r23, r19
    25a0:	84 1f       	adc	r24, r20
    25a2:	48 f4       	brcc	.+18     	; 0x25b6 <__addsf3x+0x9c>
    25a4:	87 95       	ror	r24
    25a6:	77 95       	ror	r23
    25a8:	67 95       	ror	r22
    25aa:	b7 95       	ror	r27
    25ac:	f7 95       	ror	r31
    25ae:	9e 3f       	cpi	r25, 0xFE	; 254
    25b0:	08 f0       	brcs	.+2      	; 0x25b4 <__addsf3x+0x9a>
    25b2:	b0 cf       	rjmp	.-160    	; 0x2514 <__addsf3+0x28>
    25b4:	93 95       	inc	r25
    25b6:	88 0f       	add	r24, r24
    25b8:	08 f0       	brcs	.+2      	; 0x25bc <__addsf3x+0xa2>
    25ba:	99 27       	eor	r25, r25
    25bc:	ee 0f       	add	r30, r30
    25be:	97 95       	ror	r25
    25c0:	87 95       	ror	r24
    25c2:	08 95       	ret

000025c4 <__divsf3>:
    25c4:	0e 94 f6 12 	call	0x25ec	; 0x25ec <__divsf3x>
    25c8:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__fp_round>
    25cc:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__fp_pscB>
    25d0:	58 f0       	brcs	.+22     	; 0x25e8 <__divsf3+0x24>
    25d2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__fp_pscA>
    25d6:	40 f0       	brcs	.+16     	; 0x25e8 <__divsf3+0x24>
    25d8:	29 f4       	brne	.+10     	; 0x25e4 <__divsf3+0x20>
    25da:	5f 3f       	cpi	r21, 0xFF	; 255
    25dc:	29 f0       	breq	.+10     	; 0x25e8 <__divsf3+0x24>
    25de:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__fp_inf>
    25e2:	51 11       	cpse	r21, r1
    25e4:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__fp_szero>
    25e8:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__fp_nan>

000025ec <__divsf3x>:
    25ec:	0e 94 ef 13 	call	0x27de	; 0x27de <__fp_split3>
    25f0:	68 f3       	brcs	.-38     	; 0x25cc <__divsf3+0x8>

000025f2 <__divsf3_pse>:
    25f2:	99 23       	and	r25, r25
    25f4:	b1 f3       	breq	.-20     	; 0x25e2 <__divsf3+0x1e>
    25f6:	55 23       	and	r21, r21
    25f8:	91 f3       	breq	.-28     	; 0x25de <__divsf3+0x1a>
    25fa:	95 1b       	sub	r25, r21
    25fc:	55 0b       	sbc	r21, r21
    25fe:	bb 27       	eor	r27, r27
    2600:	aa 27       	eor	r26, r26
    2602:	62 17       	cp	r22, r18
    2604:	73 07       	cpc	r23, r19
    2606:	84 07       	cpc	r24, r20
    2608:	38 f0       	brcs	.+14     	; 0x2618 <__divsf3_pse+0x26>
    260a:	9f 5f       	subi	r25, 0xFF	; 255
    260c:	5f 4f       	sbci	r21, 0xFF	; 255
    260e:	22 0f       	add	r18, r18
    2610:	33 1f       	adc	r19, r19
    2612:	44 1f       	adc	r20, r20
    2614:	aa 1f       	adc	r26, r26
    2616:	a9 f3       	breq	.-22     	; 0x2602 <__divsf3_pse+0x10>
    2618:	35 d0       	rcall	.+106    	; 0x2684 <__divsf3_pse+0x92>
    261a:	0e 2e       	mov	r0, r30
    261c:	3a f0       	brmi	.+14     	; 0x262c <__divsf3_pse+0x3a>
    261e:	e0 e8       	ldi	r30, 0x80	; 128
    2620:	32 d0       	rcall	.+100    	; 0x2686 <__divsf3_pse+0x94>
    2622:	91 50       	subi	r25, 0x01	; 1
    2624:	50 40       	sbci	r21, 0x00	; 0
    2626:	e6 95       	lsr	r30
    2628:	00 1c       	adc	r0, r0
    262a:	ca f7       	brpl	.-14     	; 0x261e <__divsf3_pse+0x2c>
    262c:	2b d0       	rcall	.+86     	; 0x2684 <__divsf3_pse+0x92>
    262e:	fe 2f       	mov	r31, r30
    2630:	29 d0       	rcall	.+82     	; 0x2684 <__divsf3_pse+0x92>
    2632:	66 0f       	add	r22, r22
    2634:	77 1f       	adc	r23, r23
    2636:	88 1f       	adc	r24, r24
    2638:	bb 1f       	adc	r27, r27
    263a:	26 17       	cp	r18, r22
    263c:	37 07       	cpc	r19, r23
    263e:	48 07       	cpc	r20, r24
    2640:	ab 07       	cpc	r26, r27
    2642:	b0 e8       	ldi	r27, 0x80	; 128
    2644:	09 f0       	breq	.+2      	; 0x2648 <__divsf3_pse+0x56>
    2646:	bb 0b       	sbc	r27, r27
    2648:	80 2d       	mov	r24, r0
    264a:	bf 01       	movw	r22, r30
    264c:	ff 27       	eor	r31, r31
    264e:	93 58       	subi	r25, 0x83	; 131
    2650:	5f 4f       	sbci	r21, 0xFF	; 255
    2652:	3a f0       	brmi	.+14     	; 0x2662 <__divsf3_pse+0x70>
    2654:	9e 3f       	cpi	r25, 0xFE	; 254
    2656:	51 05       	cpc	r21, r1
    2658:	78 f0       	brcs	.+30     	; 0x2678 <__divsf3_pse+0x86>
    265a:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__fp_inf>
    265e:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__fp_szero>
    2662:	5f 3f       	cpi	r21, 0xFF	; 255
    2664:	e4 f3       	brlt	.-8      	; 0x265e <__divsf3_pse+0x6c>
    2666:	98 3e       	cpi	r25, 0xE8	; 232
    2668:	d4 f3       	brlt	.-12     	; 0x265e <__divsf3_pse+0x6c>
    266a:	86 95       	lsr	r24
    266c:	77 95       	ror	r23
    266e:	67 95       	ror	r22
    2670:	b7 95       	ror	r27
    2672:	f7 95       	ror	r31
    2674:	9f 5f       	subi	r25, 0xFF	; 255
    2676:	c9 f7       	brne	.-14     	; 0x266a <__divsf3_pse+0x78>
    2678:	88 0f       	add	r24, r24
    267a:	91 1d       	adc	r25, r1
    267c:	96 95       	lsr	r25
    267e:	87 95       	ror	r24
    2680:	97 f9       	bld	r25, 7
    2682:	08 95       	ret
    2684:	e1 e0       	ldi	r30, 0x01	; 1
    2686:	66 0f       	add	r22, r22
    2688:	77 1f       	adc	r23, r23
    268a:	88 1f       	adc	r24, r24
    268c:	bb 1f       	adc	r27, r27
    268e:	62 17       	cp	r22, r18
    2690:	73 07       	cpc	r23, r19
    2692:	84 07       	cpc	r24, r20
    2694:	ba 07       	cpc	r27, r26
    2696:	20 f0       	brcs	.+8      	; 0x26a0 <__divsf3_pse+0xae>
    2698:	62 1b       	sub	r22, r18
    269a:	73 0b       	sbc	r23, r19
    269c:	84 0b       	sbc	r24, r20
    269e:	ba 0b       	sbc	r27, r26
    26a0:	ee 1f       	adc	r30, r30
    26a2:	88 f7       	brcc	.-30     	; 0x2686 <__divsf3_pse+0x94>
    26a4:	e0 95       	com	r30
    26a6:	08 95       	ret

000026a8 <__fixsfsi>:
    26a8:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fixunssfsi>
    26ac:	68 94       	set
    26ae:	b1 11       	cpse	r27, r1
    26b0:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__fp_szero>
    26b4:	08 95       	ret

000026b6 <__fixunssfsi>:
    26b6:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__fp_splitA>
    26ba:	88 f0       	brcs	.+34     	; 0x26de <__fixunssfsi+0x28>
    26bc:	9f 57       	subi	r25, 0x7F	; 127
    26be:	98 f0       	brcs	.+38     	; 0x26e6 <__fixunssfsi+0x30>
    26c0:	b9 2f       	mov	r27, r25
    26c2:	99 27       	eor	r25, r25
    26c4:	b7 51       	subi	r27, 0x17	; 23
    26c6:	b0 f0       	brcs	.+44     	; 0x26f4 <__fixunssfsi+0x3e>
    26c8:	e1 f0       	breq	.+56     	; 0x2702 <__fixunssfsi+0x4c>
    26ca:	66 0f       	add	r22, r22
    26cc:	77 1f       	adc	r23, r23
    26ce:	88 1f       	adc	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	1a f0       	brmi	.+6      	; 0x26da <__fixunssfsi+0x24>
    26d4:	ba 95       	dec	r27
    26d6:	c9 f7       	brne	.-14     	; 0x26ca <__fixunssfsi+0x14>
    26d8:	14 c0       	rjmp	.+40     	; 0x2702 <__fixunssfsi+0x4c>
    26da:	b1 30       	cpi	r27, 0x01	; 1
    26dc:	91 f0       	breq	.+36     	; 0x2702 <__fixunssfsi+0x4c>
    26de:	0e 94 11 14 	call	0x2822	; 0x2822 <__fp_zero>
    26e2:	b1 e0       	ldi	r27, 0x01	; 1
    26e4:	08 95       	ret
    26e6:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__fp_zero>
    26ea:	67 2f       	mov	r22, r23
    26ec:	78 2f       	mov	r23, r24
    26ee:	88 27       	eor	r24, r24
    26f0:	b8 5f       	subi	r27, 0xF8	; 248
    26f2:	39 f0       	breq	.+14     	; 0x2702 <__fixunssfsi+0x4c>
    26f4:	b9 3f       	cpi	r27, 0xF9	; 249
    26f6:	cc f3       	brlt	.-14     	; 0x26ea <__fixunssfsi+0x34>
    26f8:	86 95       	lsr	r24
    26fa:	77 95       	ror	r23
    26fc:	67 95       	ror	r22
    26fe:	b3 95       	inc	r27
    2700:	d9 f7       	brne	.-10     	; 0x26f8 <__fixunssfsi+0x42>
    2702:	3e f4       	brtc	.+14     	; 0x2712 <__fixunssfsi+0x5c>
    2704:	90 95       	com	r25
    2706:	80 95       	com	r24
    2708:	70 95       	com	r23
    270a:	61 95       	neg	r22
    270c:	7f 4f       	sbci	r23, 0xFF	; 255
    270e:	8f 4f       	sbci	r24, 0xFF	; 255
    2710:	9f 4f       	sbci	r25, 0xFF	; 255
    2712:	08 95       	ret

00002714 <__floatunsisf>:
    2714:	e8 94       	clt
    2716:	09 c0       	rjmp	.+18     	; 0x272a <__floatsisf+0x12>

00002718 <__floatsisf>:
    2718:	97 fb       	bst	r25, 7
    271a:	3e f4       	brtc	.+14     	; 0x272a <__floatsisf+0x12>
    271c:	90 95       	com	r25
    271e:	80 95       	com	r24
    2720:	70 95       	com	r23
    2722:	61 95       	neg	r22
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	8f 4f       	sbci	r24, 0xFF	; 255
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	99 23       	and	r25, r25
    272c:	a9 f0       	breq	.+42     	; 0x2758 <__floatsisf+0x40>
    272e:	f9 2f       	mov	r31, r25
    2730:	96 e9       	ldi	r25, 0x96	; 150
    2732:	bb 27       	eor	r27, r27
    2734:	93 95       	inc	r25
    2736:	f6 95       	lsr	r31
    2738:	87 95       	ror	r24
    273a:	77 95       	ror	r23
    273c:	67 95       	ror	r22
    273e:	b7 95       	ror	r27
    2740:	f1 11       	cpse	r31, r1
    2742:	f8 cf       	rjmp	.-16     	; 0x2734 <__floatsisf+0x1c>
    2744:	fa f4       	brpl	.+62     	; 0x2784 <__floatsisf+0x6c>
    2746:	bb 0f       	add	r27, r27
    2748:	11 f4       	brne	.+4      	; 0x274e <__floatsisf+0x36>
    274a:	60 ff       	sbrs	r22, 0
    274c:	1b c0       	rjmp	.+54     	; 0x2784 <__floatsisf+0x6c>
    274e:	6f 5f       	subi	r22, 0xFF	; 255
    2750:	7f 4f       	sbci	r23, 0xFF	; 255
    2752:	8f 4f       	sbci	r24, 0xFF	; 255
    2754:	9f 4f       	sbci	r25, 0xFF	; 255
    2756:	16 c0       	rjmp	.+44     	; 0x2784 <__floatsisf+0x6c>
    2758:	88 23       	and	r24, r24
    275a:	11 f0       	breq	.+4      	; 0x2760 <__floatsisf+0x48>
    275c:	96 e9       	ldi	r25, 0x96	; 150
    275e:	11 c0       	rjmp	.+34     	; 0x2782 <__floatsisf+0x6a>
    2760:	77 23       	and	r23, r23
    2762:	21 f0       	breq	.+8      	; 0x276c <__floatsisf+0x54>
    2764:	9e e8       	ldi	r25, 0x8E	; 142
    2766:	87 2f       	mov	r24, r23
    2768:	76 2f       	mov	r23, r22
    276a:	05 c0       	rjmp	.+10     	; 0x2776 <__floatsisf+0x5e>
    276c:	66 23       	and	r22, r22
    276e:	71 f0       	breq	.+28     	; 0x278c <__floatsisf+0x74>
    2770:	96 e8       	ldi	r25, 0x86	; 134
    2772:	86 2f       	mov	r24, r22
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	2a f0       	brmi	.+10     	; 0x2784 <__floatsisf+0x6c>
    277a:	9a 95       	dec	r25
    277c:	66 0f       	add	r22, r22
    277e:	77 1f       	adc	r23, r23
    2780:	88 1f       	adc	r24, r24
    2782:	da f7       	brpl	.-10     	; 0x277a <__floatsisf+0x62>
    2784:	88 0f       	add	r24, r24
    2786:	96 95       	lsr	r25
    2788:	87 95       	ror	r24
    278a:	97 f9       	bld	r25, 7
    278c:	08 95       	ret

0000278e <__fp_inf>:
    278e:	97 f9       	bld	r25, 7
    2790:	9f 67       	ori	r25, 0x7F	; 127
    2792:	80 e8       	ldi	r24, 0x80	; 128
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	08 95       	ret

0000279a <__fp_nan>:
    279a:	9f ef       	ldi	r25, 0xFF	; 255
    279c:	80 ec       	ldi	r24, 0xC0	; 192
    279e:	08 95       	ret

000027a0 <__fp_pscA>:
    27a0:	00 24       	eor	r0, r0
    27a2:	0a 94       	dec	r0
    27a4:	16 16       	cp	r1, r22
    27a6:	17 06       	cpc	r1, r23
    27a8:	18 06       	cpc	r1, r24
    27aa:	09 06       	cpc	r0, r25
    27ac:	08 95       	ret

000027ae <__fp_pscB>:
    27ae:	00 24       	eor	r0, r0
    27b0:	0a 94       	dec	r0
    27b2:	12 16       	cp	r1, r18
    27b4:	13 06       	cpc	r1, r19
    27b6:	14 06       	cpc	r1, r20
    27b8:	05 06       	cpc	r0, r21
    27ba:	08 95       	ret

000027bc <__fp_round>:
    27bc:	09 2e       	mov	r0, r25
    27be:	03 94       	inc	r0
    27c0:	00 0c       	add	r0, r0
    27c2:	11 f4       	brne	.+4      	; 0x27c8 <__fp_round+0xc>
    27c4:	88 23       	and	r24, r24
    27c6:	52 f0       	brmi	.+20     	; 0x27dc <__fp_round+0x20>
    27c8:	bb 0f       	add	r27, r27
    27ca:	40 f4       	brcc	.+16     	; 0x27dc <__fp_round+0x20>
    27cc:	bf 2b       	or	r27, r31
    27ce:	11 f4       	brne	.+4      	; 0x27d4 <__fp_round+0x18>
    27d0:	60 ff       	sbrs	r22, 0
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <__fp_round+0x20>
    27d4:	6f 5f       	subi	r22, 0xFF	; 255
    27d6:	7f 4f       	sbci	r23, 0xFF	; 255
    27d8:	8f 4f       	sbci	r24, 0xFF	; 255
    27da:	9f 4f       	sbci	r25, 0xFF	; 255
    27dc:	08 95       	ret

000027de <__fp_split3>:
    27de:	57 fd       	sbrc	r21, 7
    27e0:	90 58       	subi	r25, 0x80	; 128
    27e2:	44 0f       	add	r20, r20
    27e4:	55 1f       	adc	r21, r21
    27e6:	59 f0       	breq	.+22     	; 0x27fe <__fp_splitA+0x10>
    27e8:	5f 3f       	cpi	r21, 0xFF	; 255
    27ea:	71 f0       	breq	.+28     	; 0x2808 <__fp_splitA+0x1a>
    27ec:	47 95       	ror	r20

000027ee <__fp_splitA>:
    27ee:	88 0f       	add	r24, r24
    27f0:	97 fb       	bst	r25, 7
    27f2:	99 1f       	adc	r25, r25
    27f4:	61 f0       	breq	.+24     	; 0x280e <__fp_splitA+0x20>
    27f6:	9f 3f       	cpi	r25, 0xFF	; 255
    27f8:	79 f0       	breq	.+30     	; 0x2818 <__fp_splitA+0x2a>
    27fa:	87 95       	ror	r24
    27fc:	08 95       	ret
    27fe:	12 16       	cp	r1, r18
    2800:	13 06       	cpc	r1, r19
    2802:	14 06       	cpc	r1, r20
    2804:	55 1f       	adc	r21, r21
    2806:	f2 cf       	rjmp	.-28     	; 0x27ec <__fp_split3+0xe>
    2808:	46 95       	lsr	r20
    280a:	f1 df       	rcall	.-30     	; 0x27ee <__fp_splitA>
    280c:	08 c0       	rjmp	.+16     	; 0x281e <__fp_splitA+0x30>
    280e:	16 16       	cp	r1, r22
    2810:	17 06       	cpc	r1, r23
    2812:	18 06       	cpc	r1, r24
    2814:	99 1f       	adc	r25, r25
    2816:	f1 cf       	rjmp	.-30     	; 0x27fa <__fp_splitA+0xc>
    2818:	86 95       	lsr	r24
    281a:	71 05       	cpc	r23, r1
    281c:	61 05       	cpc	r22, r1
    281e:	08 94       	sec
    2820:	08 95       	ret

00002822 <__fp_zero>:
    2822:	e8 94       	clt

00002824 <__fp_szero>:
    2824:	bb 27       	eor	r27, r27
    2826:	66 27       	eor	r22, r22
    2828:	77 27       	eor	r23, r23
    282a:	cb 01       	movw	r24, r22
    282c:	97 f9       	bld	r25, 7
    282e:	08 95       	ret

00002830 <__mulsf3>:
    2830:	0e 94 2b 14 	call	0x2856	; 0x2856 <__mulsf3x>
    2834:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__fp_round>
    2838:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__fp_pscA>
    283c:	38 f0       	brcs	.+14     	; 0x284c <__mulsf3+0x1c>
    283e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__fp_pscB>
    2842:	20 f0       	brcs	.+8      	; 0x284c <__mulsf3+0x1c>
    2844:	95 23       	and	r25, r21
    2846:	11 f0       	breq	.+4      	; 0x284c <__mulsf3+0x1c>
    2848:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__fp_inf>
    284c:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__fp_nan>
    2850:	11 24       	eor	r1, r1
    2852:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__fp_szero>

00002856 <__mulsf3x>:
    2856:	0e 94 ef 13 	call	0x27de	; 0x27de <__fp_split3>
    285a:	70 f3       	brcs	.-36     	; 0x2838 <__mulsf3+0x8>

0000285c <__mulsf3_pse>:
    285c:	95 9f       	mul	r25, r21
    285e:	c1 f3       	breq	.-16     	; 0x2850 <__mulsf3+0x20>
    2860:	95 0f       	add	r25, r21
    2862:	50 e0       	ldi	r21, 0x00	; 0
    2864:	55 1f       	adc	r21, r21
    2866:	62 9f       	mul	r22, r18
    2868:	f0 01       	movw	r30, r0
    286a:	72 9f       	mul	r23, r18
    286c:	bb 27       	eor	r27, r27
    286e:	f0 0d       	add	r31, r0
    2870:	b1 1d       	adc	r27, r1
    2872:	63 9f       	mul	r22, r19
    2874:	aa 27       	eor	r26, r26
    2876:	f0 0d       	add	r31, r0
    2878:	b1 1d       	adc	r27, r1
    287a:	aa 1f       	adc	r26, r26
    287c:	64 9f       	mul	r22, r20
    287e:	66 27       	eor	r22, r22
    2880:	b0 0d       	add	r27, r0
    2882:	a1 1d       	adc	r26, r1
    2884:	66 1f       	adc	r22, r22
    2886:	82 9f       	mul	r24, r18
    2888:	22 27       	eor	r18, r18
    288a:	b0 0d       	add	r27, r0
    288c:	a1 1d       	adc	r26, r1
    288e:	62 1f       	adc	r22, r18
    2890:	73 9f       	mul	r23, r19
    2892:	b0 0d       	add	r27, r0
    2894:	a1 1d       	adc	r26, r1
    2896:	62 1f       	adc	r22, r18
    2898:	83 9f       	mul	r24, r19
    289a:	a0 0d       	add	r26, r0
    289c:	61 1d       	adc	r22, r1
    289e:	22 1f       	adc	r18, r18
    28a0:	74 9f       	mul	r23, r20
    28a2:	33 27       	eor	r19, r19
    28a4:	a0 0d       	add	r26, r0
    28a6:	61 1d       	adc	r22, r1
    28a8:	23 1f       	adc	r18, r19
    28aa:	84 9f       	mul	r24, r20
    28ac:	60 0d       	add	r22, r0
    28ae:	21 1d       	adc	r18, r1
    28b0:	82 2f       	mov	r24, r18
    28b2:	76 2f       	mov	r23, r22
    28b4:	6a 2f       	mov	r22, r26
    28b6:	11 24       	eor	r1, r1
    28b8:	9f 57       	subi	r25, 0x7F	; 127
    28ba:	50 40       	sbci	r21, 0x00	; 0
    28bc:	9a f0       	brmi	.+38     	; 0x28e4 <__mulsf3_pse+0x88>
    28be:	f1 f0       	breq	.+60     	; 0x28fc <__mulsf3_pse+0xa0>
    28c0:	88 23       	and	r24, r24
    28c2:	4a f0       	brmi	.+18     	; 0x28d6 <__mulsf3_pse+0x7a>
    28c4:	ee 0f       	add	r30, r30
    28c6:	ff 1f       	adc	r31, r31
    28c8:	bb 1f       	adc	r27, r27
    28ca:	66 1f       	adc	r22, r22
    28cc:	77 1f       	adc	r23, r23
    28ce:	88 1f       	adc	r24, r24
    28d0:	91 50       	subi	r25, 0x01	; 1
    28d2:	50 40       	sbci	r21, 0x00	; 0
    28d4:	a9 f7       	brne	.-22     	; 0x28c0 <__mulsf3_pse+0x64>
    28d6:	9e 3f       	cpi	r25, 0xFE	; 254
    28d8:	51 05       	cpc	r21, r1
    28da:	80 f0       	brcs	.+32     	; 0x28fc <__mulsf3_pse+0xa0>
    28dc:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__fp_inf>
    28e0:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__fp_szero>
    28e4:	5f 3f       	cpi	r21, 0xFF	; 255
    28e6:	e4 f3       	brlt	.-8      	; 0x28e0 <__mulsf3_pse+0x84>
    28e8:	98 3e       	cpi	r25, 0xE8	; 232
    28ea:	d4 f3       	brlt	.-12     	; 0x28e0 <__mulsf3_pse+0x84>
    28ec:	86 95       	lsr	r24
    28ee:	77 95       	ror	r23
    28f0:	67 95       	ror	r22
    28f2:	b7 95       	ror	r27
    28f4:	f7 95       	ror	r31
    28f6:	e7 95       	ror	r30
    28f8:	9f 5f       	subi	r25, 0xFF	; 255
    28fa:	c1 f7       	brne	.-16     	; 0x28ec <__mulsf3_pse+0x90>
    28fc:	fe 2b       	or	r31, r30
    28fe:	88 0f       	add	r24, r24
    2900:	91 1d       	adc	r25, r1
    2902:	96 95       	lsr	r25
    2904:	87 95       	ror	r24
    2906:	97 f9       	bld	r25, 7
    2908:	08 95       	ret

0000290a <vfprintf>:
    290a:	a3 e1       	ldi	r26, 0x13	; 19
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	eb e8       	ldi	r30, 0x8B	; 139
    2910:	f4 e1       	ldi	r31, 0x14	; 20
    2912:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__prologue_saves__>
    2916:	6c 01       	movw	r12, r24
    2918:	4b 01       	movw	r8, r22
    291a:	2a 01       	movw	r4, r20
    291c:	fc 01       	movw	r30, r24
    291e:	17 82       	std	Z+7, r1	; 0x07
    2920:	16 82       	std	Z+6, r1	; 0x06
    2922:	83 81       	ldd	r24, Z+3	; 0x03
    2924:	81 ff       	sbrs	r24, 1
    2926:	43 c3       	rjmp	.+1670   	; 0x2fae <vfprintf+0x6a4>
    2928:	ae 01       	movw	r20, r28
    292a:	4f 5f       	subi	r20, 0xFF	; 255
    292c:	5f 4f       	sbci	r21, 0xFF	; 255
    292e:	3a 01       	movw	r6, r20
    2930:	f6 01       	movw	r30, r12
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	f4 01       	movw	r30, r8
    2936:	93 fd       	sbrc	r25, 3
    2938:	85 91       	lpm	r24, Z+
    293a:	93 ff       	sbrs	r25, 3
    293c:	81 91       	ld	r24, Z+
    293e:	4f 01       	movw	r8, r30
    2940:	88 23       	and	r24, r24
    2942:	09 f4       	brne	.+2      	; 0x2946 <vfprintf+0x3c>
    2944:	30 c3       	rjmp	.+1632   	; 0x2fa6 <vfprintf+0x69c>
    2946:	85 32       	cpi	r24, 0x25	; 37
    2948:	39 f4       	brne	.+14     	; 0x2958 <vfprintf+0x4e>
    294a:	93 fd       	sbrc	r25, 3
    294c:	85 91       	lpm	r24, Z+
    294e:	93 ff       	sbrs	r25, 3
    2950:	81 91       	ld	r24, Z+
    2952:	4f 01       	movw	r8, r30
    2954:	85 32       	cpi	r24, 0x25	; 37
    2956:	39 f4       	brne	.+14     	; 0x2966 <vfprintf+0x5c>
    2958:	b6 01       	movw	r22, r12
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2960:	52 01       	movw	r10, r4
    2962:	25 01       	movw	r4, r10
    2964:	e5 cf       	rjmp	.-54     	; 0x2930 <vfprintf+0x26>
    2966:	10 e0       	ldi	r17, 0x00	; 0
    2968:	f1 2c       	mov	r15, r1
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	20 32       	cpi	r18, 0x20	; 32
    296e:	a0 f4       	brcc	.+40     	; 0x2998 <vfprintf+0x8e>
    2970:	8b 32       	cpi	r24, 0x2B	; 43
    2972:	69 f0       	breq	.+26     	; 0x298e <vfprintf+0x84>
    2974:	30 f4       	brcc	.+12     	; 0x2982 <vfprintf+0x78>
    2976:	80 32       	cpi	r24, 0x20	; 32
    2978:	59 f0       	breq	.+22     	; 0x2990 <vfprintf+0x86>
    297a:	83 32       	cpi	r24, 0x23	; 35
    297c:	69 f4       	brne	.+26     	; 0x2998 <vfprintf+0x8e>
    297e:	20 61       	ori	r18, 0x10	; 16
    2980:	2c c0       	rjmp	.+88     	; 0x29da <vfprintf+0xd0>
    2982:	8d 32       	cpi	r24, 0x2D	; 45
    2984:	39 f0       	breq	.+14     	; 0x2994 <vfprintf+0x8a>
    2986:	80 33       	cpi	r24, 0x30	; 48
    2988:	39 f4       	brne	.+14     	; 0x2998 <vfprintf+0x8e>
    298a:	21 60       	ori	r18, 0x01	; 1
    298c:	26 c0       	rjmp	.+76     	; 0x29da <vfprintf+0xd0>
    298e:	22 60       	ori	r18, 0x02	; 2
    2990:	24 60       	ori	r18, 0x04	; 4
    2992:	23 c0       	rjmp	.+70     	; 0x29da <vfprintf+0xd0>
    2994:	28 60       	ori	r18, 0x08	; 8
    2996:	21 c0       	rjmp	.+66     	; 0x29da <vfprintf+0xd0>
    2998:	27 fd       	sbrc	r18, 7
    299a:	27 c0       	rjmp	.+78     	; 0x29ea <vfprintf+0xe0>
    299c:	30 ed       	ldi	r19, 0xD0	; 208
    299e:	38 0f       	add	r19, r24
    29a0:	3a 30       	cpi	r19, 0x0A	; 10
    29a2:	78 f4       	brcc	.+30     	; 0x29c2 <vfprintf+0xb8>
    29a4:	26 ff       	sbrs	r18, 6
    29a6:	06 c0       	rjmp	.+12     	; 0x29b4 <vfprintf+0xaa>
    29a8:	fa e0       	ldi	r31, 0x0A	; 10
    29aa:	1f 9f       	mul	r17, r31
    29ac:	30 0d       	add	r19, r0
    29ae:	11 24       	eor	r1, r1
    29b0:	13 2f       	mov	r17, r19
    29b2:	13 c0       	rjmp	.+38     	; 0x29da <vfprintf+0xd0>
    29b4:	4a e0       	ldi	r20, 0x0A	; 10
    29b6:	f4 9e       	mul	r15, r20
    29b8:	30 0d       	add	r19, r0
    29ba:	11 24       	eor	r1, r1
    29bc:	f3 2e       	mov	r15, r19
    29be:	20 62       	ori	r18, 0x20	; 32
    29c0:	0c c0       	rjmp	.+24     	; 0x29da <vfprintf+0xd0>
    29c2:	8e 32       	cpi	r24, 0x2E	; 46
    29c4:	21 f4       	brne	.+8      	; 0x29ce <vfprintf+0xc4>
    29c6:	26 fd       	sbrc	r18, 6
    29c8:	ee c2       	rjmp	.+1500   	; 0x2fa6 <vfprintf+0x69c>
    29ca:	20 64       	ori	r18, 0x40	; 64
    29cc:	06 c0       	rjmp	.+12     	; 0x29da <vfprintf+0xd0>
    29ce:	8c 36       	cpi	r24, 0x6C	; 108
    29d0:	11 f4       	brne	.+4      	; 0x29d6 <vfprintf+0xcc>
    29d2:	20 68       	ori	r18, 0x80	; 128
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <vfprintf+0xd0>
    29d6:	88 36       	cpi	r24, 0x68	; 104
    29d8:	41 f4       	brne	.+16     	; 0x29ea <vfprintf+0xe0>
    29da:	f4 01       	movw	r30, r8
    29dc:	93 fd       	sbrc	r25, 3
    29de:	85 91       	lpm	r24, Z+
    29e0:	93 ff       	sbrs	r25, 3
    29e2:	81 91       	ld	r24, Z+
    29e4:	4f 01       	movw	r8, r30
    29e6:	81 11       	cpse	r24, r1
    29e8:	c1 cf       	rjmp	.-126    	; 0x296c <vfprintf+0x62>
    29ea:	9b eb       	ldi	r25, 0xBB	; 187
    29ec:	98 0f       	add	r25, r24
    29ee:	93 30       	cpi	r25, 0x03	; 3
    29f0:	18 f4       	brcc	.+6      	; 0x29f8 <vfprintf+0xee>
    29f2:	20 61       	ori	r18, 0x10	; 16
    29f4:	80 5e       	subi	r24, 0xE0	; 224
    29f6:	06 c0       	rjmp	.+12     	; 0x2a04 <vfprintf+0xfa>
    29f8:	9b e9       	ldi	r25, 0x9B	; 155
    29fa:	98 0f       	add	r25, r24
    29fc:	93 30       	cpi	r25, 0x03	; 3
    29fe:	08 f0       	brcs	.+2      	; 0x2a02 <vfprintf+0xf8>
    2a00:	71 c1       	rjmp	.+738    	; 0x2ce4 <vfprintf+0x3da>
    2a02:	2f 7e       	andi	r18, 0xEF	; 239
    2a04:	26 ff       	sbrs	r18, 6
    2a06:	16 e0       	ldi	r17, 0x06	; 6
    2a08:	2f 73       	andi	r18, 0x3F	; 63
    2a0a:	32 2e       	mov	r3, r18
    2a0c:	85 36       	cpi	r24, 0x65	; 101
    2a0e:	19 f4       	brne	.+6      	; 0x2a16 <vfprintf+0x10c>
    2a10:	20 64       	ori	r18, 0x40	; 64
    2a12:	32 2e       	mov	r3, r18
    2a14:	08 c0       	rjmp	.+16     	; 0x2a26 <vfprintf+0x11c>
    2a16:	86 36       	cpi	r24, 0x66	; 102
    2a18:	21 f4       	brne	.+8      	; 0x2a22 <vfprintf+0x118>
    2a1a:	f2 2f       	mov	r31, r18
    2a1c:	f0 68       	ori	r31, 0x80	; 128
    2a1e:	3f 2e       	mov	r3, r31
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <vfprintf+0x11c>
    2a22:	11 11       	cpse	r17, r1
    2a24:	11 50       	subi	r17, 0x01	; 1
    2a26:	37 fe       	sbrs	r3, 7
    2a28:	07 c0       	rjmp	.+14     	; 0x2a38 <vfprintf+0x12e>
    2a2a:	1c 33       	cpi	r17, 0x3C	; 60
    2a2c:	50 f4       	brcc	.+20     	; 0x2a42 <vfprintf+0x138>
    2a2e:	ee 24       	eor	r14, r14
    2a30:	e3 94       	inc	r14
    2a32:	e1 0e       	add	r14, r17
    2a34:	27 e0       	ldi	r18, 0x07	; 7
    2a36:	0b c0       	rjmp	.+22     	; 0x2a4e <vfprintf+0x144>
    2a38:	18 30       	cpi	r17, 0x08	; 8
    2a3a:	38 f0       	brcs	.+14     	; 0x2a4a <vfprintf+0x140>
    2a3c:	27 e0       	ldi	r18, 0x07	; 7
    2a3e:	17 e0       	ldi	r17, 0x07	; 7
    2a40:	05 c0       	rjmp	.+10     	; 0x2a4c <vfprintf+0x142>
    2a42:	27 e0       	ldi	r18, 0x07	; 7
    2a44:	4c e3       	ldi	r20, 0x3C	; 60
    2a46:	e4 2e       	mov	r14, r20
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <vfprintf+0x144>
    2a4a:	21 2f       	mov	r18, r17
    2a4c:	e1 2c       	mov	r14, r1
    2a4e:	52 01       	movw	r10, r4
    2a50:	44 e0       	ldi	r20, 0x04	; 4
    2a52:	a4 0e       	add	r10, r20
    2a54:	b1 1c       	adc	r11, r1
    2a56:	f2 01       	movw	r30, r4
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	0e 2d       	mov	r16, r14
    2a62:	a3 01       	movw	r20, r6
    2a64:	0e 94 a1 18 	call	0x3142	; 0x3142 <__ftoa_engine>
    2a68:	2c 01       	movw	r4, r24
    2a6a:	09 81       	ldd	r16, Y+1	; 0x01
    2a6c:	00 ff       	sbrs	r16, 0
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <vfprintf+0x16a>
    2a70:	03 ff       	sbrs	r16, 3
    2a72:	07 c0       	rjmp	.+14     	; 0x2a82 <vfprintf+0x178>
    2a74:	31 fc       	sbrc	r3, 1
    2a76:	08 c0       	rjmp	.+16     	; 0x2a88 <vfprintf+0x17e>
    2a78:	32 fe       	sbrs	r3, 2
    2a7a:	09 c0       	rjmp	.+18     	; 0x2a8e <vfprintf+0x184>
    2a7c:	30 e2       	ldi	r19, 0x20	; 32
    2a7e:	23 2e       	mov	r2, r19
    2a80:	07 c0       	rjmp	.+14     	; 0x2a90 <vfprintf+0x186>
    2a82:	2d e2       	ldi	r18, 0x2D	; 45
    2a84:	22 2e       	mov	r2, r18
    2a86:	04 c0       	rjmp	.+8      	; 0x2a90 <vfprintf+0x186>
    2a88:	9b e2       	ldi	r25, 0x2B	; 43
    2a8a:	29 2e       	mov	r2, r25
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <vfprintf+0x186>
    2a8e:	21 2c       	mov	r2, r1
    2a90:	80 2f       	mov	r24, r16
    2a92:	8c 70       	andi	r24, 0x0C	; 12
    2a94:	19 f0       	breq	.+6      	; 0x2a9c <vfprintf+0x192>
    2a96:	21 10       	cpse	r2, r1
    2a98:	68 c2       	rjmp	.+1232   	; 0x2f6a <vfprintf+0x660>
    2a9a:	a8 c2       	rjmp	.+1360   	; 0x2fec <vfprintf+0x6e2>
    2a9c:	37 fe       	sbrs	r3, 7
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <vfprintf+0x1b4>
    2aa0:	e4 0c       	add	r14, r4
    2aa2:	04 ff       	sbrs	r16, 4
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <vfprintf+0x1a4>
    2aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa8:	81 33       	cpi	r24, 0x31	; 49
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <vfprintf+0x1a4>
    2aac:	ea 94       	dec	r14
    2aae:	1e 14       	cp	r1, r14
    2ab0:	74 f5       	brge	.+92     	; 0x2b0e <vfprintf+0x204>
    2ab2:	f8 e0       	ldi	r31, 0x08	; 8
    2ab4:	fe 15       	cp	r31, r14
    2ab6:	78 f5       	brcc	.+94     	; 0x2b16 <vfprintf+0x20c>
    2ab8:	88 e0       	ldi	r24, 0x08	; 8
    2aba:	e8 2e       	mov	r14, r24
    2abc:	2c c0       	rjmp	.+88     	; 0x2b16 <vfprintf+0x20c>
    2abe:	36 fc       	sbrc	r3, 6
    2ac0:	2a c0       	rjmp	.+84     	; 0x2b16 <vfprintf+0x20c>
    2ac2:	81 2f       	mov	r24, r17
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	84 15       	cp	r24, r4
    2ac8:	95 05       	cpc	r25, r5
    2aca:	9c f0       	brlt	.+38     	; 0x2af2 <vfprintf+0x1e8>
    2acc:	2c ef       	ldi	r18, 0xFC	; 252
    2ace:	42 16       	cp	r4, r18
    2ad0:	2f ef       	ldi	r18, 0xFF	; 255
    2ad2:	52 06       	cpc	r5, r18
    2ad4:	74 f0       	brlt	.+28     	; 0x2af2 <vfprintf+0x1e8>
    2ad6:	43 2d       	mov	r20, r3
    2ad8:	40 68       	ori	r20, 0x80	; 128
    2ada:	34 2e       	mov	r3, r20
    2adc:	0a c0       	rjmp	.+20     	; 0x2af2 <vfprintf+0x1e8>
    2ade:	e2 e0       	ldi	r30, 0x02	; 2
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	ec 0f       	add	r30, r28
    2ae4:	fd 1f       	adc	r31, r29
    2ae6:	e1 0f       	add	r30, r17
    2ae8:	f1 1d       	adc	r31, r1
    2aea:	80 81       	ld	r24, Z
    2aec:	80 33       	cpi	r24, 0x30	; 48
    2aee:	19 f4       	brne	.+6      	; 0x2af6 <vfprintf+0x1ec>
    2af0:	11 50       	subi	r17, 0x01	; 1
    2af2:	11 11       	cpse	r17, r1
    2af4:	f4 cf       	rjmp	.-24     	; 0x2ade <vfprintf+0x1d4>
    2af6:	37 fe       	sbrs	r3, 7
    2af8:	0e c0       	rjmp	.+28     	; 0x2b16 <vfprintf+0x20c>
    2afa:	ee 24       	eor	r14, r14
    2afc:	e3 94       	inc	r14
    2afe:	e1 0e       	add	r14, r17
    2b00:	81 2f       	mov	r24, r17
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	48 16       	cp	r4, r24
    2b06:	59 06       	cpc	r5, r25
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <vfprintf+0x20a>
    2b0a:	14 19       	sub	r17, r4
    2b0c:	04 c0       	rjmp	.+8      	; 0x2b16 <vfprintf+0x20c>
    2b0e:	ee 24       	eor	r14, r14
    2b10:	e3 94       	inc	r14
    2b12:	01 c0       	rjmp	.+2      	; 0x2b16 <vfprintf+0x20c>
    2b14:	10 e0       	ldi	r17, 0x00	; 0
    2b16:	37 fe       	sbrs	r3, 7
    2b18:	06 c0       	rjmp	.+12     	; 0x2b26 <vfprintf+0x21c>
    2b1a:	14 14       	cp	r1, r4
    2b1c:	15 04       	cpc	r1, r5
    2b1e:	34 f4       	brge	.+12     	; 0x2b2c <vfprintf+0x222>
    2b20:	c2 01       	movw	r24, r4
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	05 c0       	rjmp	.+10     	; 0x2b30 <vfprintf+0x226>
    2b26:	85 e0       	ldi	r24, 0x05	; 5
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <vfprintf+0x226>
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	21 10       	cpse	r2, r1
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	11 23       	and	r17, r17
    2b36:	31 f0       	breq	.+12     	; 0x2b44 <vfprintf+0x23a>
    2b38:	21 2f       	mov	r18, r17
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	2f 5f       	subi	r18, 0xFF	; 255
    2b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b40:	82 0f       	add	r24, r18
    2b42:	93 1f       	adc	r25, r19
    2b44:	2f 2d       	mov	r18, r15
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	82 17       	cp	r24, r18
    2b4a:	93 07       	cpc	r25, r19
    2b4c:	14 f4       	brge	.+4      	; 0x2b52 <vfprintf+0x248>
    2b4e:	f8 1a       	sub	r15, r24
    2b50:	01 c0       	rjmp	.+2      	; 0x2b54 <vfprintf+0x24a>
    2b52:	f1 2c       	mov	r15, r1
    2b54:	83 2d       	mov	r24, r3
    2b56:	89 70       	andi	r24, 0x09	; 9
    2b58:	49 f4       	brne	.+18     	; 0x2b6c <vfprintf+0x262>
    2b5a:	ff 20       	and	r15, r15
    2b5c:	39 f0       	breq	.+14     	; 0x2b6c <vfprintf+0x262>
    2b5e:	b6 01       	movw	r22, r12
    2b60:	80 e2       	ldi	r24, 0x20	; 32
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2b68:	fa 94       	dec	r15
    2b6a:	f7 cf       	rjmp	.-18     	; 0x2b5a <vfprintf+0x250>
    2b6c:	22 20       	and	r2, r2
    2b6e:	29 f0       	breq	.+10     	; 0x2b7a <vfprintf+0x270>
    2b70:	b6 01       	movw	r22, r12
    2b72:	82 2d       	mov	r24, r2
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2b7a:	33 fc       	sbrc	r3, 3
    2b7c:	09 c0       	rjmp	.+18     	; 0x2b90 <vfprintf+0x286>
    2b7e:	ff 20       	and	r15, r15
    2b80:	39 f0       	breq	.+14     	; 0x2b90 <vfprintf+0x286>
    2b82:	b6 01       	movw	r22, r12
    2b84:	80 e3       	ldi	r24, 0x30	; 48
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2b8c:	fa 94       	dec	r15
    2b8e:	f7 cf       	rjmp	.-18     	; 0x2b7e <vfprintf+0x274>
    2b90:	37 fe       	sbrs	r3, 7
    2b92:	5a c0       	rjmp	.+180    	; 0x2c48 <vfprintf+0x33e>
    2b94:	94 2d       	mov	r25, r4
    2b96:	85 2d       	mov	r24, r5
    2b98:	57 fe       	sbrs	r5, 7
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <vfprintf+0x296>
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	29 2e       	mov	r2, r25
    2ba2:	38 2e       	mov	r3, r24
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	a2 01       	movw	r20, r4
    2baa:	4e 19       	sub	r20, r14
    2bac:	51 09       	sbc	r21, r1
    2bae:	5d 87       	std	Y+13, r21	; 0x0d
    2bb0:	4c 87       	std	Y+12, r20	; 0x0c
    2bb2:	a2 01       	movw	r20, r4
    2bb4:	42 19       	sub	r20, r2
    2bb6:	53 09       	sbc	r21, r3
    2bb8:	5f 87       	std	Y+15, r21	; 0x0f
    2bba:	4e 87       	std	Y+14, r20	; 0x0e
    2bbc:	61 2f       	mov	r22, r17
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	44 27       	eor	r20, r20
    2bc2:	55 27       	eor	r21, r21
    2bc4:	46 1b       	sub	r20, r22
    2bc6:	57 0b       	sbc	r21, r23
    2bc8:	59 8b       	std	Y+17, r21	; 0x11
    2bca:	48 8b       	std	Y+16, r20	; 0x10
    2bcc:	5f ef       	ldi	r21, 0xFF	; 255
    2bce:	25 16       	cp	r2, r21
    2bd0:	35 06       	cpc	r3, r21
    2bd2:	49 f4       	brne	.+18     	; 0x2be6 <vfprintf+0x2dc>
    2bd4:	b6 01       	movw	r22, r12
    2bd6:	8e e2       	ldi	r24, 0x2E	; 46
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	2a 8b       	std	Y+18, r18	; 0x12
    2bdc:	3b 8b       	std	Y+19, r19	; 0x13
    2bde:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2be2:	3b 89       	ldd	r19, Y+19	; 0x13
    2be4:	2a 89       	ldd	r18, Y+18	; 0x12
    2be6:	42 14       	cp	r4, r2
    2be8:	53 04       	cpc	r5, r3
    2bea:	6c f0       	brlt	.+26     	; 0x2c06 <vfprintf+0x2fc>
    2bec:	4c 85       	ldd	r20, Y+12	; 0x0c
    2bee:	5d 85       	ldd	r21, Y+13	; 0x0d
    2bf0:	42 15       	cp	r20, r2
    2bf2:	53 05       	cpc	r21, r3
    2bf4:	44 f4       	brge	.+16     	; 0x2c06 <vfprintf+0x2fc>
    2bf6:	ee 85       	ldd	r30, Y+14	; 0x0e
    2bf8:	ff 85       	ldd	r31, Y+15	; 0x0f
    2bfa:	e2 0f       	add	r30, r18
    2bfc:	f3 1f       	adc	r31, r19
    2bfe:	e6 0d       	add	r30, r6
    2c00:	f7 1d       	adc	r31, r7
    2c02:	81 81       	ldd	r24, Z+1	; 0x01
    2c04:	01 c0       	rjmp	.+2      	; 0x2c08 <vfprintf+0x2fe>
    2c06:	80 e3       	ldi	r24, 0x30	; 48
    2c08:	51 e0       	ldi	r21, 0x01	; 1
    2c0a:	25 1a       	sub	r2, r21
    2c0c:	31 08       	sbc	r3, r1
    2c0e:	2f 5f       	subi	r18, 0xFF	; 255
    2c10:	3f 4f       	sbci	r19, 0xFF	; 255
    2c12:	48 89       	ldd	r20, Y+16	; 0x10
    2c14:	59 89       	ldd	r21, Y+17	; 0x11
    2c16:	24 16       	cp	r2, r20
    2c18:	35 06       	cpc	r3, r21
    2c1a:	4c f0       	brlt	.+18     	; 0x2c2e <vfprintf+0x324>
    2c1c:	b6 01       	movw	r22, r12
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	2a 8b       	std	Y+18, r18	; 0x12
    2c22:	3b 8b       	std	Y+19, r19	; 0x13
    2c24:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2c28:	2a 89       	ldd	r18, Y+18	; 0x12
    2c2a:	3b 89       	ldd	r19, Y+19	; 0x13
    2c2c:	cf cf       	rjmp	.-98     	; 0x2bcc <vfprintf+0x2c2>
    2c2e:	24 14       	cp	r2, r4
    2c30:	35 04       	cpc	r3, r5
    2c32:	39 f4       	brne	.+14     	; 0x2c42 <vfprintf+0x338>
    2c34:	9a 81       	ldd	r25, Y+2	; 0x02
    2c36:	96 33       	cpi	r25, 0x36	; 54
    2c38:	18 f4       	brcc	.+6      	; 0x2c40 <vfprintf+0x336>
    2c3a:	95 33       	cpi	r25, 0x35	; 53
    2c3c:	11 f4       	brne	.+4      	; 0x2c42 <vfprintf+0x338>
    2c3e:	04 ff       	sbrs	r16, 4
    2c40:	81 e3       	ldi	r24, 0x31	; 49
    2c42:	b6 01       	movw	r22, r12
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	4b c0       	rjmp	.+150    	; 0x2cde <vfprintf+0x3d4>
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	81 33       	cpi	r24, 0x31	; 49
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <vfprintf+0x346>
    2c4e:	0f 7e       	andi	r16, 0xEF	; 239
    2c50:	b6 01       	movw	r22, r12
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2c58:	11 11       	cpse	r17, r1
    2c5a:	05 c0       	rjmp	.+10     	; 0x2c66 <vfprintf+0x35c>
    2c5c:	34 fc       	sbrc	r3, 4
    2c5e:	18 c0       	rjmp	.+48     	; 0x2c90 <vfprintf+0x386>
    2c60:	85 e6       	ldi	r24, 0x65	; 101
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	17 c0       	rjmp	.+46     	; 0x2c94 <vfprintf+0x38a>
    2c66:	b6 01       	movw	r22, r12
    2c68:	8e e2       	ldi	r24, 0x2E	; 46
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	ee 24       	eor	r14, r14
    2c74:	e3 94       	inc	r14
    2c76:	e8 0e       	add	r14, r24
    2c78:	f3 01       	movw	r30, r6
    2c7a:	e8 0f       	add	r30, r24
    2c7c:	f1 1d       	adc	r31, r1
    2c7e:	80 81       	ld	r24, Z
    2c80:	b6 01       	movw	r22, r12
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2c88:	11 50       	subi	r17, 0x01	; 1
    2c8a:	8e 2d       	mov	r24, r14
    2c8c:	91 f7       	brne	.-28     	; 0x2c72 <vfprintf+0x368>
    2c8e:	e6 cf       	rjmp	.-52     	; 0x2c5c <vfprintf+0x352>
    2c90:	85 e4       	ldi	r24, 0x45	; 69
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	b6 01       	movw	r22, r12
    2c96:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2c9a:	57 fc       	sbrc	r5, 7
    2c9c:	05 c0       	rjmp	.+10     	; 0x2ca8 <vfprintf+0x39e>
    2c9e:	41 14       	cp	r4, r1
    2ca0:	51 04       	cpc	r5, r1
    2ca2:	39 f4       	brne	.+14     	; 0x2cb2 <vfprintf+0x3a8>
    2ca4:	04 ff       	sbrs	r16, 4
    2ca6:	05 c0       	rjmp	.+10     	; 0x2cb2 <vfprintf+0x3a8>
    2ca8:	51 94       	neg	r5
    2caa:	41 94       	neg	r4
    2cac:	51 08       	sbc	r5, r1
    2cae:	8d e2       	ldi	r24, 0x2D	; 45
    2cb0:	01 c0       	rjmp	.+2      	; 0x2cb4 <vfprintf+0x3aa>
    2cb2:	8b e2       	ldi	r24, 0x2B	; 43
    2cb4:	b6 01       	movw	r22, r12
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2cbc:	80 e3       	ldi	r24, 0x30	; 48
    2cbe:	9a e0       	ldi	r25, 0x0A	; 10
    2cc0:	49 16       	cp	r4, r25
    2cc2:	51 04       	cpc	r5, r1
    2cc4:	2c f0       	brlt	.+10     	; 0x2cd0 <vfprintf+0x3c6>
    2cc6:	8f 5f       	subi	r24, 0xFF	; 255
    2cc8:	5a e0       	ldi	r21, 0x0A	; 10
    2cca:	45 1a       	sub	r4, r21
    2ccc:	51 08       	sbc	r5, r1
    2cce:	f7 cf       	rjmp	.-18     	; 0x2cbe <vfprintf+0x3b4>
    2cd0:	b6 01       	movw	r22, r12
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2cd8:	b6 01       	movw	r22, r12
    2cda:	c2 01       	movw	r24, r4
    2cdc:	c0 96       	adiw	r24, 0x30	; 48
    2cde:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2ce2:	57 c1       	rjmp	.+686    	; 0x2f92 <vfprintf+0x688>
    2ce4:	83 36       	cpi	r24, 0x63	; 99
    2ce6:	31 f0       	breq	.+12     	; 0x2cf4 <vfprintf+0x3ea>
    2ce8:	83 37       	cpi	r24, 0x73	; 115
    2cea:	79 f0       	breq	.+30     	; 0x2d0a <vfprintf+0x400>
    2cec:	83 35       	cpi	r24, 0x53	; 83
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <vfprintf+0x3e8>
    2cf0:	58 c0       	rjmp	.+176    	; 0x2da2 <vfprintf+0x498>
    2cf2:	21 c0       	rjmp	.+66     	; 0x2d36 <vfprintf+0x42c>
    2cf4:	52 01       	movw	r10, r4
    2cf6:	e2 e0       	ldi	r30, 0x02	; 2
    2cf8:	ae 0e       	add	r10, r30
    2cfa:	b1 1c       	adc	r11, r1
    2cfc:	f2 01       	movw	r30, r4
    2cfe:	80 81       	ld	r24, Z
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	01 e0       	ldi	r16, 0x01	; 1
    2d04:	10 e0       	ldi	r17, 0x00	; 0
    2d06:	23 01       	movw	r4, r6
    2d08:	14 c0       	rjmp	.+40     	; 0x2d32 <vfprintf+0x428>
    2d0a:	52 01       	movw	r10, r4
    2d0c:	f2 e0       	ldi	r31, 0x02	; 2
    2d0e:	af 0e       	add	r10, r31
    2d10:	b1 1c       	adc	r11, r1
    2d12:	f2 01       	movw	r30, r4
    2d14:	40 80       	ld	r4, Z
    2d16:	51 80       	ldd	r5, Z+1	; 0x01
    2d18:	26 ff       	sbrs	r18, 6
    2d1a:	03 c0       	rjmp	.+6      	; 0x2d22 <vfprintf+0x418>
    2d1c:	61 2f       	mov	r22, r17
    2d1e:	70 e0       	ldi	r23, 0x00	; 0
    2d20:	02 c0       	rjmp	.+4      	; 0x2d26 <vfprintf+0x41c>
    2d22:	6f ef       	ldi	r22, 0xFF	; 255
    2d24:	7f ef       	ldi	r23, 0xFF	; 255
    2d26:	c2 01       	movw	r24, r4
    2d28:	2a 8b       	std	Y+18, r18	; 0x12
    2d2a:	0e 94 84 19 	call	0x3308	; 0x3308 <strnlen>
    2d2e:	8c 01       	movw	r16, r24
    2d30:	2a 89       	ldd	r18, Y+18	; 0x12
    2d32:	2f 77       	andi	r18, 0x7F	; 127
    2d34:	15 c0       	rjmp	.+42     	; 0x2d60 <vfprintf+0x456>
    2d36:	52 01       	movw	r10, r4
    2d38:	f2 e0       	ldi	r31, 0x02	; 2
    2d3a:	af 0e       	add	r10, r31
    2d3c:	b1 1c       	adc	r11, r1
    2d3e:	f2 01       	movw	r30, r4
    2d40:	40 80       	ld	r4, Z
    2d42:	51 80       	ldd	r5, Z+1	; 0x01
    2d44:	26 ff       	sbrs	r18, 6
    2d46:	03 c0       	rjmp	.+6      	; 0x2d4e <vfprintf+0x444>
    2d48:	61 2f       	mov	r22, r17
    2d4a:	70 e0       	ldi	r23, 0x00	; 0
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <vfprintf+0x448>
    2d4e:	6f ef       	ldi	r22, 0xFF	; 255
    2d50:	7f ef       	ldi	r23, 0xFF	; 255
    2d52:	c2 01       	movw	r24, r4
    2d54:	2a 8b       	std	Y+18, r18	; 0x12
    2d56:	0e 94 79 19 	call	0x32f2	; 0x32f2 <strnlen_P>
    2d5a:	8c 01       	movw	r16, r24
    2d5c:	2a 89       	ldd	r18, Y+18	; 0x12
    2d5e:	20 68       	ori	r18, 0x80	; 128
    2d60:	32 2e       	mov	r3, r18
    2d62:	23 fd       	sbrc	r18, 3
    2d64:	1a c0       	rjmp	.+52     	; 0x2d9a <vfprintf+0x490>
    2d66:	8f 2d       	mov	r24, r15
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	08 17       	cp	r16, r24
    2d6c:	19 07       	cpc	r17, r25
    2d6e:	a8 f4       	brcc	.+42     	; 0x2d9a <vfprintf+0x490>
    2d70:	b6 01       	movw	r22, r12
    2d72:	80 e2       	ldi	r24, 0x20	; 32
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2d7a:	fa 94       	dec	r15
    2d7c:	f4 cf       	rjmp	.-24     	; 0x2d66 <vfprintf+0x45c>
    2d7e:	f2 01       	movw	r30, r4
    2d80:	37 fc       	sbrc	r3, 7
    2d82:	85 91       	lpm	r24, Z+
    2d84:	37 fe       	sbrs	r3, 7
    2d86:	81 91       	ld	r24, Z+
    2d88:	2f 01       	movw	r4, r30
    2d8a:	b6 01       	movw	r22, r12
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2d92:	f1 10       	cpse	r15, r1
    2d94:	fa 94       	dec	r15
    2d96:	01 50       	subi	r16, 0x01	; 1
    2d98:	11 09       	sbc	r17, r1
    2d9a:	01 15       	cp	r16, r1
    2d9c:	11 05       	cpc	r17, r1
    2d9e:	79 f7       	brne	.-34     	; 0x2d7e <vfprintf+0x474>
    2da0:	f8 c0       	rjmp	.+496    	; 0x2f92 <vfprintf+0x688>
    2da2:	84 36       	cpi	r24, 0x64	; 100
    2da4:	11 f0       	breq	.+4      	; 0x2daa <vfprintf+0x4a0>
    2da6:	89 36       	cpi	r24, 0x69	; 105
    2da8:	59 f5       	brne	.+86     	; 0x2e00 <vfprintf+0x4f6>
    2daa:	52 01       	movw	r10, r4
    2dac:	27 ff       	sbrs	r18, 7
    2dae:	09 c0       	rjmp	.+18     	; 0x2dc2 <vfprintf+0x4b8>
    2db0:	f4 e0       	ldi	r31, 0x04	; 4
    2db2:	af 0e       	add	r10, r31
    2db4:	b1 1c       	adc	r11, r1
    2db6:	f2 01       	movw	r30, r4
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	0a c0       	rjmp	.+20     	; 0x2dd6 <vfprintf+0x4cc>
    2dc2:	f2 e0       	ldi	r31, 0x02	; 2
    2dc4:	af 0e       	add	r10, r31
    2dc6:	b1 1c       	adc	r11, r1
    2dc8:	f2 01       	movw	r30, r4
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	07 2e       	mov	r0, r23
    2dd0:	00 0c       	add	r0, r0
    2dd2:	88 0b       	sbc	r24, r24
    2dd4:	99 0b       	sbc	r25, r25
    2dd6:	2f 76       	andi	r18, 0x6F	; 111
    2dd8:	32 2e       	mov	r3, r18
    2dda:	97 ff       	sbrs	r25, 7
    2ddc:	09 c0       	rjmp	.+18     	; 0x2df0 <vfprintf+0x4e6>
    2dde:	90 95       	com	r25
    2de0:	80 95       	com	r24
    2de2:	70 95       	com	r23
    2de4:	61 95       	neg	r22
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	20 68       	ori	r18, 0x80	; 128
    2dee:	32 2e       	mov	r3, r18
    2df0:	2a e0       	ldi	r18, 0x0A	; 10
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	a3 01       	movw	r20, r6
    2df6:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__ultoa_invert>
    2dfa:	e8 2e       	mov	r14, r24
    2dfc:	e6 18       	sub	r14, r6
    2dfe:	3f c0       	rjmp	.+126    	; 0x2e7e <vfprintf+0x574>
    2e00:	02 2f       	mov	r16, r18
    2e02:	85 37       	cpi	r24, 0x75	; 117
    2e04:	21 f4       	brne	.+8      	; 0x2e0e <vfprintf+0x504>
    2e06:	0f 7e       	andi	r16, 0xEF	; 239
    2e08:	2a e0       	ldi	r18, 0x0A	; 10
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	1d c0       	rjmp	.+58     	; 0x2e48 <vfprintf+0x53e>
    2e0e:	09 7f       	andi	r16, 0xF9	; 249
    2e10:	8f 36       	cpi	r24, 0x6F	; 111
    2e12:	91 f0       	breq	.+36     	; 0x2e38 <vfprintf+0x52e>
    2e14:	18 f4       	brcc	.+6      	; 0x2e1c <vfprintf+0x512>
    2e16:	88 35       	cpi	r24, 0x58	; 88
    2e18:	59 f0       	breq	.+22     	; 0x2e30 <vfprintf+0x526>
    2e1a:	c5 c0       	rjmp	.+394    	; 0x2fa6 <vfprintf+0x69c>
    2e1c:	80 37       	cpi	r24, 0x70	; 112
    2e1e:	19 f0       	breq	.+6      	; 0x2e26 <vfprintf+0x51c>
    2e20:	88 37       	cpi	r24, 0x78	; 120
    2e22:	11 f0       	breq	.+4      	; 0x2e28 <vfprintf+0x51e>
    2e24:	c0 c0       	rjmp	.+384    	; 0x2fa6 <vfprintf+0x69c>
    2e26:	00 61       	ori	r16, 0x10	; 16
    2e28:	04 ff       	sbrs	r16, 4
    2e2a:	09 c0       	rjmp	.+18     	; 0x2e3e <vfprintf+0x534>
    2e2c:	04 60       	ori	r16, 0x04	; 4
    2e2e:	07 c0       	rjmp	.+14     	; 0x2e3e <vfprintf+0x534>
    2e30:	24 ff       	sbrs	r18, 4
    2e32:	08 c0       	rjmp	.+16     	; 0x2e44 <vfprintf+0x53a>
    2e34:	06 60       	ori	r16, 0x06	; 6
    2e36:	06 c0       	rjmp	.+12     	; 0x2e44 <vfprintf+0x53a>
    2e38:	28 e0       	ldi	r18, 0x08	; 8
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	05 c0       	rjmp	.+10     	; 0x2e48 <vfprintf+0x53e>
    2e3e:	20 e1       	ldi	r18, 0x10	; 16
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <vfprintf+0x53e>
    2e44:	20 e1       	ldi	r18, 0x10	; 16
    2e46:	32 e0       	ldi	r19, 0x02	; 2
    2e48:	52 01       	movw	r10, r4
    2e4a:	07 ff       	sbrs	r16, 7
    2e4c:	09 c0       	rjmp	.+18     	; 0x2e60 <vfprintf+0x556>
    2e4e:	f4 e0       	ldi	r31, 0x04	; 4
    2e50:	af 0e       	add	r10, r31
    2e52:	b1 1c       	adc	r11, r1
    2e54:	f2 01       	movw	r30, r4
    2e56:	60 81       	ld	r22, Z
    2e58:	71 81       	ldd	r23, Z+1	; 0x01
    2e5a:	82 81       	ldd	r24, Z+2	; 0x02
    2e5c:	93 81       	ldd	r25, Z+3	; 0x03
    2e5e:	08 c0       	rjmp	.+16     	; 0x2e70 <vfprintf+0x566>
    2e60:	f2 e0       	ldi	r31, 0x02	; 2
    2e62:	af 0e       	add	r10, r31
    2e64:	b1 1c       	adc	r11, r1
    2e66:	f2 01       	movw	r30, r4
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a3 01       	movw	r20, r6
    2e72:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__ultoa_invert>
    2e76:	e8 2e       	mov	r14, r24
    2e78:	e6 18       	sub	r14, r6
    2e7a:	0f 77       	andi	r16, 0x7F	; 127
    2e7c:	30 2e       	mov	r3, r16
    2e7e:	36 fe       	sbrs	r3, 6
    2e80:	0b c0       	rjmp	.+22     	; 0x2e98 <vfprintf+0x58e>
    2e82:	33 2d       	mov	r19, r3
    2e84:	3e 7f       	andi	r19, 0xFE	; 254
    2e86:	e1 16       	cp	r14, r17
    2e88:	50 f4       	brcc	.+20     	; 0x2e9e <vfprintf+0x594>
    2e8a:	34 fe       	sbrs	r3, 4
    2e8c:	0a c0       	rjmp	.+20     	; 0x2ea2 <vfprintf+0x598>
    2e8e:	32 fc       	sbrc	r3, 2
    2e90:	08 c0       	rjmp	.+16     	; 0x2ea2 <vfprintf+0x598>
    2e92:	33 2d       	mov	r19, r3
    2e94:	3e 7e       	andi	r19, 0xEE	; 238
    2e96:	05 c0       	rjmp	.+10     	; 0x2ea2 <vfprintf+0x598>
    2e98:	0e 2d       	mov	r16, r14
    2e9a:	33 2d       	mov	r19, r3
    2e9c:	03 c0       	rjmp	.+6      	; 0x2ea4 <vfprintf+0x59a>
    2e9e:	0e 2d       	mov	r16, r14
    2ea0:	01 c0       	rjmp	.+2      	; 0x2ea4 <vfprintf+0x59a>
    2ea2:	01 2f       	mov	r16, r17
    2ea4:	34 ff       	sbrs	r19, 4
    2ea6:	0c c0       	rjmp	.+24     	; 0x2ec0 <vfprintf+0x5b6>
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ee 0d       	add	r30, r14
    2eac:	f1 1d       	adc	r31, r1
    2eae:	80 81       	ld	r24, Z
    2eb0:	80 33       	cpi	r24, 0x30	; 48
    2eb2:	11 f4       	brne	.+4      	; 0x2eb8 <vfprintf+0x5ae>
    2eb4:	39 7e       	andi	r19, 0xE9	; 233
    2eb6:	08 c0       	rjmp	.+16     	; 0x2ec8 <vfprintf+0x5be>
    2eb8:	32 ff       	sbrs	r19, 2
    2eba:	05 c0       	rjmp	.+10     	; 0x2ec6 <vfprintf+0x5bc>
    2ebc:	0e 5f       	subi	r16, 0xFE	; 254
    2ebe:	04 c0       	rjmp	.+8      	; 0x2ec8 <vfprintf+0x5be>
    2ec0:	83 2f       	mov	r24, r19
    2ec2:	86 78       	andi	r24, 0x86	; 134
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <vfprintf+0x5be>
    2ec6:	0f 5f       	subi	r16, 0xFF	; 255
    2ec8:	33 fd       	sbrc	r19, 3
    2eca:	13 c0       	rjmp	.+38     	; 0x2ef2 <vfprintf+0x5e8>
    2ecc:	30 ff       	sbrs	r19, 0
    2ece:	06 c0       	rjmp	.+12     	; 0x2edc <vfprintf+0x5d2>
    2ed0:	1e 2d       	mov	r17, r14
    2ed2:	0f 15       	cp	r16, r15
    2ed4:	18 f4       	brcc	.+6      	; 0x2edc <vfprintf+0x5d2>
    2ed6:	1f 0d       	add	r17, r15
    2ed8:	10 1b       	sub	r17, r16
    2eda:	0f 2d       	mov	r16, r15
    2edc:	0f 15       	cp	r16, r15
    2ede:	68 f4       	brcc	.+26     	; 0x2efa <vfprintf+0x5f0>
    2ee0:	b6 01       	movw	r22, r12
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	3b 8b       	std	Y+19, r19	; 0x13
    2ee8:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2eec:	0f 5f       	subi	r16, 0xFF	; 255
    2eee:	3b 89       	ldd	r19, Y+19	; 0x13
    2ef0:	f5 cf       	rjmp	.-22     	; 0x2edc <vfprintf+0x5d2>
    2ef2:	0f 15       	cp	r16, r15
    2ef4:	10 f4       	brcc	.+4      	; 0x2efa <vfprintf+0x5f0>
    2ef6:	f0 1a       	sub	r15, r16
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <vfprintf+0x5f2>
    2efa:	f1 2c       	mov	r15, r1
    2efc:	34 ff       	sbrs	r19, 4
    2efe:	12 c0       	rjmp	.+36     	; 0x2f24 <vfprintf+0x61a>
    2f00:	b6 01       	movw	r22, r12
    2f02:	80 e3       	ldi	r24, 0x30	; 48
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	3b 8b       	std	Y+19, r19	; 0x13
    2f08:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2f0c:	3b 89       	ldd	r19, Y+19	; 0x13
    2f0e:	32 ff       	sbrs	r19, 2
    2f10:	17 c0       	rjmp	.+46     	; 0x2f40 <vfprintf+0x636>
    2f12:	31 fd       	sbrc	r19, 1
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <vfprintf+0x612>
    2f16:	88 e7       	ldi	r24, 0x78	; 120
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <vfprintf+0x616>
    2f1c:	88 e5       	ldi	r24, 0x58	; 88
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	b6 01       	movw	r22, r12
    2f22:	0c c0       	rjmp	.+24     	; 0x2f3c <vfprintf+0x632>
    2f24:	83 2f       	mov	r24, r19
    2f26:	86 78       	andi	r24, 0x86	; 134
    2f28:	59 f0       	breq	.+22     	; 0x2f40 <vfprintf+0x636>
    2f2a:	31 ff       	sbrs	r19, 1
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <vfprintf+0x628>
    2f2e:	8b e2       	ldi	r24, 0x2B	; 43
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <vfprintf+0x62a>
    2f32:	80 e2       	ldi	r24, 0x20	; 32
    2f34:	37 fd       	sbrc	r19, 7
    2f36:	8d e2       	ldi	r24, 0x2D	; 45
    2f38:	b6 01       	movw	r22, r12
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2f40:	e1 16       	cp	r14, r17
    2f42:	38 f4       	brcc	.+14     	; 0x2f52 <vfprintf+0x648>
    2f44:	b6 01       	movw	r22, r12
    2f46:	80 e3       	ldi	r24, 0x30	; 48
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2f4e:	11 50       	subi	r17, 0x01	; 1
    2f50:	f7 cf       	rjmp	.-18     	; 0x2f40 <vfprintf+0x636>
    2f52:	ea 94       	dec	r14
    2f54:	f3 01       	movw	r30, r6
    2f56:	ee 0d       	add	r30, r14
    2f58:	f1 1d       	adc	r31, r1
    2f5a:	80 81       	ld	r24, Z
    2f5c:	b6 01       	movw	r22, r12
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2f64:	e1 10       	cpse	r14, r1
    2f66:	f5 cf       	rjmp	.-22     	; 0x2f52 <vfprintf+0x648>
    2f68:	14 c0       	rjmp	.+40     	; 0x2f92 <vfprintf+0x688>
    2f6a:	f4 e0       	ldi	r31, 0x04	; 4
    2f6c:	ff 15       	cp	r31, r15
    2f6e:	58 f5       	brcc	.+86     	; 0x2fc6 <vfprintf+0x6bc>
    2f70:	84 e0       	ldi	r24, 0x04	; 4
    2f72:	f8 1a       	sub	r15, r24
    2f74:	33 fe       	sbrs	r3, 3
    2f76:	1e c0       	rjmp	.+60     	; 0x2fb4 <vfprintf+0x6aa>
    2f78:	21 10       	cpse	r2, r1
    2f7a:	26 c0       	rjmp	.+76     	; 0x2fc8 <vfprintf+0x6be>
    2f7c:	03 ff       	sbrs	r16, 3
    2f7e:	2a c0       	rjmp	.+84     	; 0x2fd4 <vfprintf+0x6ca>
    2f80:	00 e9       	ldi	r16, 0x90	; 144
    2f82:	13 e0       	ldi	r17, 0x03	; 3
    2f84:	f3 2d       	mov	r31, r3
    2f86:	f0 71       	andi	r31, 0x10	; 16
    2f88:	3f 2e       	mov	r3, r31
    2f8a:	f8 01       	movw	r30, r16
    2f8c:	84 91       	lpm	r24, Z
    2f8e:	81 11       	cpse	r24, r1
    2f90:	24 c0       	rjmp	.+72     	; 0x2fda <vfprintf+0x6d0>
    2f92:	ff 20       	and	r15, r15
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <vfprintf+0x68e>
    2f96:	e5 cc       	rjmp	.-1590   	; 0x2962 <vfprintf+0x58>
    2f98:	b6 01       	movw	r22, r12
    2f9a:	80 e2       	ldi	r24, 0x20	; 32
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2fa2:	fa 94       	dec	r15
    2fa4:	f6 cf       	rjmp	.-20     	; 0x2f92 <vfprintf+0x688>
    2fa6:	f6 01       	movw	r30, r12
    2fa8:	86 81       	ldd	r24, Z+6	; 0x06
    2faa:	97 81       	ldd	r25, Z+7	; 0x07
    2fac:	26 c0       	rjmp	.+76     	; 0x2ffa <vfprintf+0x6f0>
    2fae:	8f ef       	ldi	r24, 0xFF	; 255
    2fb0:	9f ef       	ldi	r25, 0xFF	; 255
    2fb2:	23 c0       	rjmp	.+70     	; 0x2ffa <vfprintf+0x6f0>
    2fb4:	b6 01       	movw	r22, r12
    2fb6:	80 e2       	ldi	r24, 0x20	; 32
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2fbe:	fa 94       	dec	r15
    2fc0:	f1 10       	cpse	r15, r1
    2fc2:	f8 cf       	rjmp	.-16     	; 0x2fb4 <vfprintf+0x6aa>
    2fc4:	d9 cf       	rjmp	.-78     	; 0x2f78 <vfprintf+0x66e>
    2fc6:	f1 2c       	mov	r15, r1
    2fc8:	b6 01       	movw	r22, r12
    2fca:	82 2d       	mov	r24, r2
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2fd2:	d4 cf       	rjmp	.-88     	; 0x2f7c <vfprintf+0x672>
    2fd4:	04 e9       	ldi	r16, 0x94	; 148
    2fd6:	13 e0       	ldi	r17, 0x03	; 3
    2fd8:	d5 cf       	rjmp	.-86     	; 0x2f84 <vfprintf+0x67a>
    2fda:	31 10       	cpse	r3, r1
    2fdc:	80 52       	subi	r24, 0x20	; 32
    2fde:	b6 01       	movw	r22, r12
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	0e 94 8f 19 	call	0x331e	; 0x331e <fputc>
    2fe6:	0f 5f       	subi	r16, 0xFF	; 255
    2fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fea:	cf cf       	rjmp	.-98     	; 0x2f8a <vfprintf+0x680>
    2fec:	23 e0       	ldi	r18, 0x03	; 3
    2fee:	2f 15       	cp	r18, r15
    2ff0:	10 f4       	brcc	.+4      	; 0x2ff6 <vfprintf+0x6ec>
    2ff2:	83 e0       	ldi	r24, 0x03	; 3
    2ff4:	be cf       	rjmp	.-132    	; 0x2f72 <vfprintf+0x668>
    2ff6:	f1 2c       	mov	r15, r1
    2ff8:	c1 cf       	rjmp	.-126    	; 0x2f7c <vfprintf+0x672>
    2ffa:	63 96       	adiw	r28, 0x13	; 19
    2ffc:	e2 e1       	ldi	r30, 0x12	; 18
    2ffe:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__epilogue_restores__>

00003002 <__divmodsi4>:
    3002:	05 2e       	mov	r0, r21
    3004:	97 fb       	bst	r25, 7
    3006:	1e f4       	brtc	.+6      	; 0x300e <__divmodsi4+0xc>
    3008:	00 94       	com	r0
    300a:	0e 94 18 18 	call	0x3030	; 0x3030 <__negsi2>
    300e:	57 fd       	sbrc	r21, 7
    3010:	07 d0       	rcall	.+14     	; 0x3020 <__divmodsi4_neg2>
    3012:	0e 94 70 18 	call	0x30e0	; 0x30e0 <__udivmodsi4>
    3016:	07 fc       	sbrc	r0, 7
    3018:	03 d0       	rcall	.+6      	; 0x3020 <__divmodsi4_neg2>
    301a:	4e f4       	brtc	.+18     	; 0x302e <__divmodsi4_exit>
    301c:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__negsi2>

00003020 <__divmodsi4_neg2>:
    3020:	50 95       	com	r21
    3022:	40 95       	com	r20
    3024:	30 95       	com	r19
    3026:	21 95       	neg	r18
    3028:	3f 4f       	sbci	r19, 0xFF	; 255
    302a:	4f 4f       	sbci	r20, 0xFF	; 255
    302c:	5f 4f       	sbci	r21, 0xFF	; 255

0000302e <__divmodsi4_exit>:
    302e:	08 95       	ret

00003030 <__negsi2>:
    3030:	90 95       	com	r25
    3032:	80 95       	com	r24
    3034:	70 95       	com	r23
    3036:	61 95       	neg	r22
    3038:	7f 4f       	sbci	r23, 0xFF	; 255
    303a:	8f 4f       	sbci	r24, 0xFF	; 255
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	08 95       	ret

00003040 <__tablejump2__>:
    3040:	ee 0f       	add	r30, r30
    3042:	ff 1f       	adc	r31, r31
    3044:	05 90       	lpm	r0, Z+
    3046:	f4 91       	lpm	r31, Z
    3048:	e0 2d       	mov	r30, r0
    304a:	09 94       	ijmp

0000304c <__muluhisi3>:
    304c:	0e 94 92 18 	call	0x3124	; 0x3124 <__umulhisi3>
    3050:	a5 9f       	mul	r26, r21
    3052:	90 0d       	add	r25, r0
    3054:	b4 9f       	mul	r27, r20
    3056:	90 0d       	add	r25, r0
    3058:	a4 9f       	mul	r26, r20
    305a:	80 0d       	add	r24, r0
    305c:	91 1d       	adc	r25, r1
    305e:	11 24       	eor	r1, r1
    3060:	08 95       	ret

00003062 <__mulshisi3>:
    3062:	b7 ff       	sbrs	r27, 7
    3064:	0c 94 26 18 	jmp	0x304c	; 0x304c <__muluhisi3>

00003068 <__mulohisi3>:
    3068:	0e 94 26 18 	call	0x304c	; 0x304c <__muluhisi3>
    306c:	82 1b       	sub	r24, r18
    306e:	93 0b       	sbc	r25, r19
    3070:	08 95       	ret

00003072 <__prologue_saves__>:
    3072:	2f 92       	push	r2
    3074:	3f 92       	push	r3
    3076:	4f 92       	push	r4
    3078:	5f 92       	push	r5
    307a:	6f 92       	push	r6
    307c:	7f 92       	push	r7
    307e:	8f 92       	push	r8
    3080:	9f 92       	push	r9
    3082:	af 92       	push	r10
    3084:	bf 92       	push	r11
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	ca 1b       	sub	r28, r26
    309c:	db 0b       	sbc	r29, r27
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	09 94       	ijmp

000030aa <__epilogue_restores__>:
    30aa:	2a 88       	ldd	r2, Y+18	; 0x12
    30ac:	39 88       	ldd	r3, Y+17	; 0x11
    30ae:	48 88       	ldd	r4, Y+16	; 0x10
    30b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    30bc:	b9 84       	ldd	r11, Y+9	; 0x09
    30be:	c8 84       	ldd	r12, Y+8	; 0x08
    30c0:	df 80       	ldd	r13, Y+7	; 0x07
    30c2:	ee 80       	ldd	r14, Y+6	; 0x06
    30c4:	fd 80       	ldd	r15, Y+5	; 0x05
    30c6:	0c 81       	ldd	r16, Y+4	; 0x04
    30c8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ca:	aa 81       	ldd	r26, Y+2	; 0x02
    30cc:	b9 81       	ldd	r27, Y+1	; 0x01
    30ce:	ce 0f       	add	r28, r30
    30d0:	d1 1d       	adc	r29, r1
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	ed 01       	movw	r28, r26
    30de:	08 95       	ret

000030e0 <__udivmodsi4>:
    30e0:	a1 e2       	ldi	r26, 0x21	; 33
    30e2:	1a 2e       	mov	r1, r26
    30e4:	aa 1b       	sub	r26, r26
    30e6:	bb 1b       	sub	r27, r27
    30e8:	fd 01       	movw	r30, r26
    30ea:	0d c0       	rjmp	.+26     	; 0x3106 <__udivmodsi4_ep>

000030ec <__udivmodsi4_loop>:
    30ec:	aa 1f       	adc	r26, r26
    30ee:	bb 1f       	adc	r27, r27
    30f0:	ee 1f       	adc	r30, r30
    30f2:	ff 1f       	adc	r31, r31
    30f4:	a2 17       	cp	r26, r18
    30f6:	b3 07       	cpc	r27, r19
    30f8:	e4 07       	cpc	r30, r20
    30fa:	f5 07       	cpc	r31, r21
    30fc:	20 f0       	brcs	.+8      	; 0x3106 <__udivmodsi4_ep>
    30fe:	a2 1b       	sub	r26, r18
    3100:	b3 0b       	sbc	r27, r19
    3102:	e4 0b       	sbc	r30, r20
    3104:	f5 0b       	sbc	r31, r21

00003106 <__udivmodsi4_ep>:
    3106:	66 1f       	adc	r22, r22
    3108:	77 1f       	adc	r23, r23
    310a:	88 1f       	adc	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	1a 94       	dec	r1
    3110:	69 f7       	brne	.-38     	; 0x30ec <__udivmodsi4_loop>
    3112:	60 95       	com	r22
    3114:	70 95       	com	r23
    3116:	80 95       	com	r24
    3118:	90 95       	com	r25
    311a:	9b 01       	movw	r18, r22
    311c:	ac 01       	movw	r20, r24
    311e:	bd 01       	movw	r22, r26
    3120:	cf 01       	movw	r24, r30
    3122:	08 95       	ret

00003124 <__umulhisi3>:
    3124:	a2 9f       	mul	r26, r18
    3126:	b0 01       	movw	r22, r0
    3128:	b3 9f       	mul	r27, r19
    312a:	c0 01       	movw	r24, r0
    312c:	a3 9f       	mul	r26, r19
    312e:	70 0d       	add	r23, r0
    3130:	81 1d       	adc	r24, r1
    3132:	11 24       	eor	r1, r1
    3134:	91 1d       	adc	r25, r1
    3136:	b2 9f       	mul	r27, r18
    3138:	70 0d       	add	r23, r0
    313a:	81 1d       	adc	r24, r1
    313c:	11 24       	eor	r1, r1
    313e:	91 1d       	adc	r25, r1
    3140:	08 95       	ret

00003142 <__ftoa_engine>:
    3142:	28 30       	cpi	r18, 0x08	; 8
    3144:	08 f0       	brcs	.+2      	; 0x3148 <__ftoa_engine+0x6>
    3146:	27 e0       	ldi	r18, 0x07	; 7
    3148:	33 27       	eor	r19, r19
    314a:	da 01       	movw	r26, r20
    314c:	99 0f       	add	r25, r25
    314e:	31 1d       	adc	r19, r1
    3150:	87 fd       	sbrc	r24, 7
    3152:	91 60       	ori	r25, 0x01	; 1
    3154:	00 96       	adiw	r24, 0x00	; 0
    3156:	61 05       	cpc	r22, r1
    3158:	71 05       	cpc	r23, r1
    315a:	39 f4       	brne	.+14     	; 0x316a <__ftoa_engine+0x28>
    315c:	32 60       	ori	r19, 0x02	; 2
    315e:	2e 5f       	subi	r18, 0xFE	; 254
    3160:	3d 93       	st	X+, r19
    3162:	30 e3       	ldi	r19, 0x30	; 48
    3164:	2a 95       	dec	r18
    3166:	e1 f7       	brne	.-8      	; 0x3160 <__ftoa_engine+0x1e>
    3168:	08 95       	ret
    316a:	9f 3f       	cpi	r25, 0xFF	; 255
    316c:	30 f0       	brcs	.+12     	; 0x317a <__ftoa_engine+0x38>
    316e:	80 38       	cpi	r24, 0x80	; 128
    3170:	71 05       	cpc	r23, r1
    3172:	61 05       	cpc	r22, r1
    3174:	09 f0       	breq	.+2      	; 0x3178 <__ftoa_engine+0x36>
    3176:	3c 5f       	subi	r19, 0xFC	; 252
    3178:	3c 5f       	subi	r19, 0xFC	; 252
    317a:	3d 93       	st	X+, r19
    317c:	91 30       	cpi	r25, 0x01	; 1
    317e:	08 f0       	brcs	.+2      	; 0x3182 <__ftoa_engine+0x40>
    3180:	80 68       	ori	r24, 0x80	; 128
    3182:	91 1d       	adc	r25, r1
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	1f 93       	push	r17
    318a:	0f 93       	push	r16
    318c:	ff 92       	push	r15
    318e:	ef 92       	push	r14
    3190:	19 2f       	mov	r17, r25
    3192:	98 7f       	andi	r25, 0xF8	; 248
    3194:	96 95       	lsr	r25
    3196:	e9 2f       	mov	r30, r25
    3198:	96 95       	lsr	r25
    319a:	96 95       	lsr	r25
    319c:	e9 0f       	add	r30, r25
    319e:	ff 27       	eor	r31, r31
    31a0:	ee 50       	subi	r30, 0x0E	; 14
    31a2:	fc 4f       	sbci	r31, 0xFC	; 252
    31a4:	99 27       	eor	r25, r25
    31a6:	33 27       	eor	r19, r19
    31a8:	ee 24       	eor	r14, r14
    31aa:	ff 24       	eor	r15, r15
    31ac:	a7 01       	movw	r20, r14
    31ae:	e7 01       	movw	r28, r14
    31b0:	05 90       	lpm	r0, Z+
    31b2:	08 94       	sec
    31b4:	07 94       	ror	r0
    31b6:	28 f4       	brcc	.+10     	; 0x31c2 <__ftoa_engine+0x80>
    31b8:	36 0f       	add	r19, r22
    31ba:	e7 1e       	adc	r14, r23
    31bc:	f8 1e       	adc	r15, r24
    31be:	49 1f       	adc	r20, r25
    31c0:	51 1d       	adc	r21, r1
    31c2:	66 0f       	add	r22, r22
    31c4:	77 1f       	adc	r23, r23
    31c6:	88 1f       	adc	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	06 94       	lsr	r0
    31cc:	a1 f7       	brne	.-24     	; 0x31b6 <__ftoa_engine+0x74>
    31ce:	05 90       	lpm	r0, Z+
    31d0:	07 94       	ror	r0
    31d2:	28 f4       	brcc	.+10     	; 0x31de <__ftoa_engine+0x9c>
    31d4:	e7 0e       	add	r14, r23
    31d6:	f8 1e       	adc	r15, r24
    31d8:	49 1f       	adc	r20, r25
    31da:	56 1f       	adc	r21, r22
    31dc:	c1 1d       	adc	r28, r1
    31de:	77 0f       	add	r23, r23
    31e0:	88 1f       	adc	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	66 1f       	adc	r22, r22
    31e6:	06 94       	lsr	r0
    31e8:	a1 f7       	brne	.-24     	; 0x31d2 <__ftoa_engine+0x90>
    31ea:	05 90       	lpm	r0, Z+
    31ec:	07 94       	ror	r0
    31ee:	28 f4       	brcc	.+10     	; 0x31fa <__ftoa_engine+0xb8>
    31f0:	f8 0e       	add	r15, r24
    31f2:	49 1f       	adc	r20, r25
    31f4:	56 1f       	adc	r21, r22
    31f6:	c7 1f       	adc	r28, r23
    31f8:	d1 1d       	adc	r29, r1
    31fa:	88 0f       	add	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	66 1f       	adc	r22, r22
    3200:	77 1f       	adc	r23, r23
    3202:	06 94       	lsr	r0
    3204:	a1 f7       	brne	.-24     	; 0x31ee <__ftoa_engine+0xac>
    3206:	05 90       	lpm	r0, Z+
    3208:	07 94       	ror	r0
    320a:	20 f4       	brcc	.+8      	; 0x3214 <__ftoa_engine+0xd2>
    320c:	49 0f       	add	r20, r25
    320e:	56 1f       	adc	r21, r22
    3210:	c7 1f       	adc	r28, r23
    3212:	d8 1f       	adc	r29, r24
    3214:	99 0f       	add	r25, r25
    3216:	66 1f       	adc	r22, r22
    3218:	77 1f       	adc	r23, r23
    321a:	88 1f       	adc	r24, r24
    321c:	06 94       	lsr	r0
    321e:	a9 f7       	brne	.-22     	; 0x320a <__ftoa_engine+0xc8>
    3220:	84 91       	lpm	r24, Z
    3222:	10 95       	com	r17
    3224:	17 70       	andi	r17, 0x07	; 7
    3226:	41 f0       	breq	.+16     	; 0x3238 <__ftoa_engine+0xf6>
    3228:	d6 95       	lsr	r29
    322a:	c7 95       	ror	r28
    322c:	57 95       	ror	r21
    322e:	47 95       	ror	r20
    3230:	f7 94       	ror	r15
    3232:	e7 94       	ror	r14
    3234:	1a 95       	dec	r17
    3236:	c1 f7       	brne	.-16     	; 0x3228 <__ftoa_engine+0xe6>
    3238:	e8 e9       	ldi	r30, 0x98	; 152
    323a:	f3 e0       	ldi	r31, 0x03	; 3
    323c:	68 94       	set
    323e:	15 90       	lpm	r1, Z+
    3240:	15 91       	lpm	r17, Z+
    3242:	35 91       	lpm	r19, Z+
    3244:	65 91       	lpm	r22, Z+
    3246:	95 91       	lpm	r25, Z+
    3248:	05 90       	lpm	r0, Z+
    324a:	7f e2       	ldi	r23, 0x2F	; 47
    324c:	73 95       	inc	r23
    324e:	e1 18       	sub	r14, r1
    3250:	f1 0a       	sbc	r15, r17
    3252:	43 0b       	sbc	r20, r19
    3254:	56 0b       	sbc	r21, r22
    3256:	c9 0b       	sbc	r28, r25
    3258:	d0 09       	sbc	r29, r0
    325a:	c0 f7       	brcc	.-16     	; 0x324c <__ftoa_engine+0x10a>
    325c:	e1 0c       	add	r14, r1
    325e:	f1 1e       	adc	r15, r17
    3260:	43 1f       	adc	r20, r19
    3262:	56 1f       	adc	r21, r22
    3264:	c9 1f       	adc	r28, r25
    3266:	d0 1d       	adc	r29, r0
    3268:	7e f4       	brtc	.+30     	; 0x3288 <__ftoa_engine+0x146>
    326a:	70 33       	cpi	r23, 0x30	; 48
    326c:	11 f4       	brne	.+4      	; 0x3272 <__ftoa_engine+0x130>
    326e:	8a 95       	dec	r24
    3270:	e6 cf       	rjmp	.-52     	; 0x323e <__ftoa_engine+0xfc>
    3272:	e8 94       	clt
    3274:	01 50       	subi	r16, 0x01	; 1
    3276:	30 f0       	brcs	.+12     	; 0x3284 <__ftoa_engine+0x142>
    3278:	08 0f       	add	r16, r24
    327a:	0a f4       	brpl	.+2      	; 0x327e <__ftoa_engine+0x13c>
    327c:	00 27       	eor	r16, r16
    327e:	02 17       	cp	r16, r18
    3280:	08 f4       	brcc	.+2      	; 0x3284 <__ftoa_engine+0x142>
    3282:	20 2f       	mov	r18, r16
    3284:	23 95       	inc	r18
    3286:	02 2f       	mov	r16, r18
    3288:	7a 33       	cpi	r23, 0x3A	; 58
    328a:	28 f0       	brcs	.+10     	; 0x3296 <__ftoa_engine+0x154>
    328c:	79 e3       	ldi	r23, 0x39	; 57
    328e:	7d 93       	st	X+, r23
    3290:	2a 95       	dec	r18
    3292:	e9 f7       	brne	.-6      	; 0x328e <__ftoa_engine+0x14c>
    3294:	10 c0       	rjmp	.+32     	; 0x32b6 <__ftoa_engine+0x174>
    3296:	7d 93       	st	X+, r23
    3298:	2a 95       	dec	r18
    329a:	89 f6       	brne	.-94     	; 0x323e <__ftoa_engine+0xfc>
    329c:	06 94       	lsr	r0
    329e:	97 95       	ror	r25
    32a0:	67 95       	ror	r22
    32a2:	37 95       	ror	r19
    32a4:	17 95       	ror	r17
    32a6:	17 94       	ror	r1
    32a8:	e1 18       	sub	r14, r1
    32aa:	f1 0a       	sbc	r15, r17
    32ac:	43 0b       	sbc	r20, r19
    32ae:	56 0b       	sbc	r21, r22
    32b0:	c9 0b       	sbc	r28, r25
    32b2:	d0 09       	sbc	r29, r0
    32b4:	98 f0       	brcs	.+38     	; 0x32dc <__ftoa_engine+0x19a>
    32b6:	23 95       	inc	r18
    32b8:	7e 91       	ld	r23, -X
    32ba:	73 95       	inc	r23
    32bc:	7a 33       	cpi	r23, 0x3A	; 58
    32be:	08 f0       	brcs	.+2      	; 0x32c2 <__ftoa_engine+0x180>
    32c0:	70 e3       	ldi	r23, 0x30	; 48
    32c2:	7c 93       	st	X, r23
    32c4:	20 13       	cpse	r18, r16
    32c6:	b8 f7       	brcc	.-18     	; 0x32b6 <__ftoa_engine+0x174>
    32c8:	7e 91       	ld	r23, -X
    32ca:	70 61       	ori	r23, 0x10	; 16
    32cc:	7d 93       	st	X+, r23
    32ce:	30 f0       	brcs	.+12     	; 0x32dc <__ftoa_engine+0x19a>
    32d0:	83 95       	inc	r24
    32d2:	71 e3       	ldi	r23, 0x31	; 49
    32d4:	7d 93       	st	X+, r23
    32d6:	70 e3       	ldi	r23, 0x30	; 48
    32d8:	2a 95       	dec	r18
    32da:	e1 f7       	brne	.-8      	; 0x32d4 <__ftoa_engine+0x192>
    32dc:	11 24       	eor	r1, r1
    32de:	ef 90       	pop	r14
    32e0:	ff 90       	pop	r15
    32e2:	0f 91       	pop	r16
    32e4:	1f 91       	pop	r17
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	99 27       	eor	r25, r25
    32ec:	87 fd       	sbrc	r24, 7
    32ee:	90 95       	com	r25
    32f0:	08 95       	ret

000032f2 <strnlen_P>:
    32f2:	fc 01       	movw	r30, r24
    32f4:	05 90       	lpm	r0, Z+
    32f6:	61 50       	subi	r22, 0x01	; 1
    32f8:	70 40       	sbci	r23, 0x00	; 0
    32fa:	01 10       	cpse	r0, r1
    32fc:	d8 f7       	brcc	.-10     	; 0x32f4 <strnlen_P+0x2>
    32fe:	80 95       	com	r24
    3300:	90 95       	com	r25
    3302:	8e 0f       	add	r24, r30
    3304:	9f 1f       	adc	r25, r31
    3306:	08 95       	ret

00003308 <strnlen>:
    3308:	fc 01       	movw	r30, r24
    330a:	61 50       	subi	r22, 0x01	; 1
    330c:	70 40       	sbci	r23, 0x00	; 0
    330e:	01 90       	ld	r0, Z+
    3310:	01 10       	cpse	r0, r1
    3312:	d8 f7       	brcc	.-10     	; 0x330a <strnlen+0x2>
    3314:	80 95       	com	r24
    3316:	90 95       	com	r25
    3318:	8e 0f       	add	r24, r30
    331a:	9f 1f       	adc	r25, r31
    331c:	08 95       	ret

0000331e <fputc>:
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	fb 01       	movw	r30, r22
    3328:	23 81       	ldd	r18, Z+3	; 0x03
    332a:	21 fd       	sbrc	r18, 1
    332c:	03 c0       	rjmp	.+6      	; 0x3334 <fputc+0x16>
    332e:	8f ef       	ldi	r24, 0xFF	; 255
    3330:	9f ef       	ldi	r25, 0xFF	; 255
    3332:	28 c0       	rjmp	.+80     	; 0x3384 <fputc+0x66>
    3334:	22 ff       	sbrs	r18, 2
    3336:	16 c0       	rjmp	.+44     	; 0x3364 <fputc+0x46>
    3338:	46 81       	ldd	r20, Z+6	; 0x06
    333a:	57 81       	ldd	r21, Z+7	; 0x07
    333c:	24 81       	ldd	r18, Z+4	; 0x04
    333e:	35 81       	ldd	r19, Z+5	; 0x05
    3340:	42 17       	cp	r20, r18
    3342:	53 07       	cpc	r21, r19
    3344:	44 f4       	brge	.+16     	; 0x3356 <fputc+0x38>
    3346:	a0 81       	ld	r26, Z
    3348:	b1 81       	ldd	r27, Z+1	; 0x01
    334a:	9d 01       	movw	r18, r26
    334c:	2f 5f       	subi	r18, 0xFF	; 255
    334e:	3f 4f       	sbci	r19, 0xFF	; 255
    3350:	31 83       	std	Z+1, r19	; 0x01
    3352:	20 83       	st	Z, r18
    3354:	8c 93       	st	X, r24
    3356:	26 81       	ldd	r18, Z+6	; 0x06
    3358:	37 81       	ldd	r19, Z+7	; 0x07
    335a:	2f 5f       	subi	r18, 0xFF	; 255
    335c:	3f 4f       	sbci	r19, 0xFF	; 255
    335e:	37 83       	std	Z+7, r19	; 0x07
    3360:	26 83       	std	Z+6, r18	; 0x06
    3362:	10 c0       	rjmp	.+32     	; 0x3384 <fputc+0x66>
    3364:	eb 01       	movw	r28, r22
    3366:	09 2f       	mov	r16, r25
    3368:	18 2f       	mov	r17, r24
    336a:	00 84       	ldd	r0, Z+8	; 0x08
    336c:	f1 85       	ldd	r31, Z+9	; 0x09
    336e:	e0 2d       	mov	r30, r0
    3370:	09 95       	icall
    3372:	89 2b       	or	r24, r25
    3374:	e1 f6       	brne	.-72     	; 0x332e <fputc+0x10>
    3376:	8e 81       	ldd	r24, Y+6	; 0x06
    3378:	9f 81       	ldd	r25, Y+7	; 0x07
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	9f 83       	std	Y+7, r25	; 0x07
    337e:	8e 83       	std	Y+6, r24	; 0x06
    3380:	81 2f       	mov	r24, r17
    3382:	90 2f       	mov	r25, r16
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	08 95       	ret

0000338e <vsnprintf>:
    338e:	ae e0       	ldi	r26, 0x0E	; 14
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	ed ec       	ldi	r30, 0xCD	; 205
    3394:	f9 e1       	ldi	r31, 0x19	; 25
    3396:	0c 94 47 18 	jmp	0x308e	; 0x308e <__prologue_saves__+0x1c>
    339a:	8c 01       	movw	r16, r24
    339c:	ca 01       	movw	r24, r20
    339e:	46 e0       	ldi	r20, 0x06	; 6
    33a0:	4c 83       	std	Y+4, r20	; 0x04
    33a2:	1a 83       	std	Y+2, r17	; 0x02
    33a4:	09 83       	std	Y+1, r16	; 0x01
    33a6:	77 ff       	sbrs	r23, 7
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <vsnprintf+0x20>
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	70 e8       	ldi	r23, 0x80	; 128
    33ae:	fb 01       	movw	r30, r22
    33b0:	31 97       	sbiw	r30, 0x01	; 1
    33b2:	fe 83       	std	Y+6, r31	; 0x06
    33b4:	ed 83       	std	Y+5, r30	; 0x05
    33b6:	a9 01       	movw	r20, r18
    33b8:	bc 01       	movw	r22, r24
    33ba:	ce 01       	movw	r24, r28
    33bc:	01 96       	adiw	r24, 0x01	; 1
    33be:	0e 94 85 14 	call	0x290a	; 0x290a <vfprintf>
    33c2:	4d 81       	ldd	r20, Y+5	; 0x05
    33c4:	5e 81       	ldd	r21, Y+6	; 0x06
    33c6:	57 fd       	sbrc	r21, 7
    33c8:	0a c0       	rjmp	.+20     	; 0x33de <vsnprintf+0x50>
    33ca:	2f 81       	ldd	r18, Y+7	; 0x07
    33cc:	38 85       	ldd	r19, Y+8	; 0x08
    33ce:	42 17       	cp	r20, r18
    33d0:	53 07       	cpc	r21, r19
    33d2:	0c f4       	brge	.+2      	; 0x33d6 <vsnprintf+0x48>
    33d4:	9a 01       	movw	r18, r20
    33d6:	f8 01       	movw	r30, r16
    33d8:	e2 0f       	add	r30, r18
    33da:	f3 1f       	adc	r31, r19
    33dc:	10 82       	st	Z, r1
    33de:	2e 96       	adiw	r28, 0x0e	; 14
    33e0:	e4 e0       	ldi	r30, 0x04	; 4
    33e2:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__epilogue_restores__+0x1c>

000033e6 <__ultoa_invert>:
    33e6:	fa 01       	movw	r30, r20
    33e8:	aa 27       	eor	r26, r26
    33ea:	28 30       	cpi	r18, 0x08	; 8
    33ec:	51 f1       	breq	.+84     	; 0x3442 <__ultoa_invert+0x5c>
    33ee:	20 31       	cpi	r18, 0x10	; 16
    33f0:	81 f1       	breq	.+96     	; 0x3452 <__ultoa_invert+0x6c>
    33f2:	e8 94       	clt
    33f4:	6f 93       	push	r22
    33f6:	6e 7f       	andi	r22, 0xFE	; 254
    33f8:	6e 5f       	subi	r22, 0xFE	; 254
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	8f 4f       	sbci	r24, 0xFF	; 255
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	af 4f       	sbci	r26, 0xFF	; 255
    3402:	b1 e0       	ldi	r27, 0x01	; 1
    3404:	3e d0       	rcall	.+124    	; 0x3482 <__ultoa_invert+0x9c>
    3406:	b4 e0       	ldi	r27, 0x04	; 4
    3408:	3c d0       	rcall	.+120    	; 0x3482 <__ultoa_invert+0x9c>
    340a:	67 0f       	add	r22, r23
    340c:	78 1f       	adc	r23, r24
    340e:	89 1f       	adc	r24, r25
    3410:	9a 1f       	adc	r25, r26
    3412:	a1 1d       	adc	r26, r1
    3414:	68 0f       	add	r22, r24
    3416:	79 1f       	adc	r23, r25
    3418:	8a 1f       	adc	r24, r26
    341a:	91 1d       	adc	r25, r1
    341c:	a1 1d       	adc	r26, r1
    341e:	6a 0f       	add	r22, r26
    3420:	71 1d       	adc	r23, r1
    3422:	81 1d       	adc	r24, r1
    3424:	91 1d       	adc	r25, r1
    3426:	a1 1d       	adc	r26, r1
    3428:	20 d0       	rcall	.+64     	; 0x346a <__ultoa_invert+0x84>
    342a:	09 f4       	brne	.+2      	; 0x342e <__ultoa_invert+0x48>
    342c:	68 94       	set
    342e:	3f 91       	pop	r19
    3430:	2a e0       	ldi	r18, 0x0A	; 10
    3432:	26 9f       	mul	r18, r22
    3434:	11 24       	eor	r1, r1
    3436:	30 19       	sub	r19, r0
    3438:	30 5d       	subi	r19, 0xD0	; 208
    343a:	31 93       	st	Z+, r19
    343c:	de f6       	brtc	.-74     	; 0x33f4 <__ultoa_invert+0xe>
    343e:	cf 01       	movw	r24, r30
    3440:	08 95       	ret
    3442:	46 2f       	mov	r20, r22
    3444:	47 70       	andi	r20, 0x07	; 7
    3446:	40 5d       	subi	r20, 0xD0	; 208
    3448:	41 93       	st	Z+, r20
    344a:	b3 e0       	ldi	r27, 0x03	; 3
    344c:	0f d0       	rcall	.+30     	; 0x346c <__ultoa_invert+0x86>
    344e:	c9 f7       	brne	.-14     	; 0x3442 <__ultoa_invert+0x5c>
    3450:	f6 cf       	rjmp	.-20     	; 0x343e <__ultoa_invert+0x58>
    3452:	46 2f       	mov	r20, r22
    3454:	4f 70       	andi	r20, 0x0F	; 15
    3456:	40 5d       	subi	r20, 0xD0	; 208
    3458:	4a 33       	cpi	r20, 0x3A	; 58
    345a:	18 f0       	brcs	.+6      	; 0x3462 <__ultoa_invert+0x7c>
    345c:	49 5d       	subi	r20, 0xD9	; 217
    345e:	31 fd       	sbrc	r19, 1
    3460:	40 52       	subi	r20, 0x20	; 32
    3462:	41 93       	st	Z+, r20
    3464:	02 d0       	rcall	.+4      	; 0x346a <__ultoa_invert+0x84>
    3466:	a9 f7       	brne	.-22     	; 0x3452 <__ultoa_invert+0x6c>
    3468:	ea cf       	rjmp	.-44     	; 0x343e <__ultoa_invert+0x58>
    346a:	b4 e0       	ldi	r27, 0x04	; 4
    346c:	a6 95       	lsr	r26
    346e:	97 95       	ror	r25
    3470:	87 95       	ror	r24
    3472:	77 95       	ror	r23
    3474:	67 95       	ror	r22
    3476:	ba 95       	dec	r27
    3478:	c9 f7       	brne	.-14     	; 0x346c <__ultoa_invert+0x86>
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	61 05       	cpc	r22, r1
    347e:	71 05       	cpc	r23, r1
    3480:	08 95       	ret
    3482:	9b 01       	movw	r18, r22
    3484:	ac 01       	movw	r20, r24
    3486:	0a 2e       	mov	r0, r26
    3488:	06 94       	lsr	r0
    348a:	57 95       	ror	r21
    348c:	47 95       	ror	r20
    348e:	37 95       	ror	r19
    3490:	27 95       	ror	r18
    3492:	ba 95       	dec	r27
    3494:	c9 f7       	brne	.-14     	; 0x3488 <__ultoa_invert+0xa2>
    3496:	62 0f       	add	r22, r18
    3498:	73 1f       	adc	r23, r19
    349a:	84 1f       	adc	r24, r20
    349c:	95 1f       	adc	r25, r21
    349e:	a0 1d       	adc	r26, r0
    34a0:	08 95       	ret

000034a2 <_exit>:
    34a2:	f8 94       	cli

000034a4 <__stop_program>:
    34a4:	ff cf       	rjmp	.-2      	; 0x34a4 <__stop_program>
